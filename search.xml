<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>MySQL引擎</title>
      <link href="/2019/05/06/mysql%E5%BC%95%E6%93%8E/"/>
      <url>/2019/05/06/mysql%E5%BC%95%E6%93%8E/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>数据库</code>存储引擎是数据库底层软件组织，数据库管理系统（DBMS）使用数据引擎进行创建、查询、更新和删除数据。不同的存储引擎提供不同的存储机制、索引技巧、锁定水平等功能，使用不同的存储引擎，还可以获得特定的功能。现在许多不同的数据库管理系统都支持多种不同的数据引擎。<code>MySQL</code>的核心就是存储引擎。</p><h3 id="存储引擎查看"><a href="#存储引擎查看" class="headerlink" title="存储引擎查看"></a>存储引擎查看</h3><p>MySQL给开发者提供了查询存储引擎的功能，我这里使用的是MySQL 5.1.73，查看存储引擎的命令是<code>SHOW ENGINES</code>，其执行结果的输出为<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+------------+---------+------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">| Engine     | Support | Comment                                                    | Transactions | XA   | Savepoints |</span><br><span class="line">+------------+---------+------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">| MRG_MYISAM | YES     | Collection of identical MyISAM tables                      | NO           | NO   | NO         |</span><br><span class="line">| CSV        | YES     | CSV storage engine                                         | NO           | NO   | NO         |</span><br><span class="line">| MyISAM     | DEFAULT | Default engine as of MySQL 3.23 with great performance     | NO           | NO   | NO         |</span><br><span class="line">| InnoDB     | YES     | Supports transactions, row-level locking, and foreign keys | YES          | YES  | YES        |</span><br><span class="line">| MEMORY     | YES     | Hash based, stored in memory, useful for temporary tables  | NO           | NO   | NO         |</span><br><span class="line">+------------+---------+------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>由上面的输出结果可以看到MySQL给用户提供了非常多的存储引擎，包括处理事务安全表的引擎和处理非事务安全表的引擎。<br>如果要想查看数据库默认使用哪个引擎，可以通过使用命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE 'storage_engine';</span><br></pre></td></tr></table></figure></p><p>来查看，其输出结果如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+----------------+--------+</span><br><span class="line">| Variable_name  | Value  |</span><br><span class="line">+----------------+--------+</span><br><span class="line">| storage_engine | MyISAM |</span><br><span class="line">+----------------+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><h3 id="存储引擎比较"><a href="#存储引擎比较" class="headerlink" title="存储引擎比较"></a>存储引擎比较</h3><p>在MySQL中，不需要在整个服务器中使用同一种存储引擎，针对具体的要求，可以对每一个表使用不同的存储引擎。Support列的值表示某种引擎是否能使用：YES表示可以使用、NO表示不能使用、DEFAULT表示该引擎为当前默认的存储引擎。下面来看一下其中几种常用的引擎</p><h4 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h4><p>InnoDB是事务型数据库的首选引擎，支持事务安全表（ACID），支持行锁定和外键，上面的命令行输出也看到了，InnoDB是默认的MySQL引擎。InnoDB主要特性有：</p><ul><li>InnoDB给MySQL提供了具有提交、回滚和崩溃恢复能力的事务安全（ACID兼容）存储引擎。InnoDB锁定在行级并且也在SELECT语句中提供一个类似Oracle的非锁定读。这些功能增加了多用户部署和性能。在SQL查询中，可以自由地将InnoDB类型的表和其他MySQL的表类型混合起来，甚至在同一个查询中也可以混合</li><li>InnoDB是为处理巨大数据量的最大性能设计。它的CPU效率可能是任何其他基于磁盘的关系型数据库引擎所不能匹敌的</li><li>InnoDB存储引擎完全与MySQL服务器整合，InnoDB存储引擎为在主内存中缓存数据和索引而维持它自己的缓冲池。InnoDB将它的表和索引在一个逻辑表空间中，表空间可以包含数个文件（或原始磁盘文件）。这与MyISAM表不同，比如在MyISAM表中每个表被存放在分离的文件中。InnoDB表可以是任何尺寸，即使在文件尺寸被限制为2GB的操作系统上</li><li>InnoDB支持外键完整性约束，存储表中的数据时，每张表的存储都按主键顺序存放，如果没有<code>显示</code>在表定义时指定主键，InnoDB会为每一行生成一个6字节的<code>ROWID</code>，并以此作为主键</li><li>InnoDB被用在众多需要高性能的大型数据库站点上</li></ul><p>InnoDB不创建目录，使用InnoDB时，MySQL将在数据目录下创建一个名为<code>ibdata1</code>的<code>10MB</code>大小的<code>自动扩展</code>数据文件，以及两个名为<code>ib_logfile0</code>和<code>ib_logfile1</code>的<code>5MB</code>大小的日志文件</p><h4 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h4><p>MyISAM基于ISAM存储引擎，并对其进行扩展。它是在Web、数据仓储和其他应用环境下最常使用的存储引擎之一。MyISAM拥有较高的插入、查询速度，但<code>不支持事务</code>。MyISAM主要特性有：</p><ul><li>大文件（达到63位文件长度）在支持大文件的文件系统和操作系统上被支持</li><li>当把删除和更新及插入操作混合使用的时候，动态尺寸的行产生更少碎片。这要通过合并相邻被删除的块，以及若下一个块被删除，就扩展到下一块自动完成</li><li>每个MyISAM表最大索引数是64，这可以通过<code>重新编译</code>来改变。每个索引最大的列数是16</li><li>最大的键长度是<code>1000字节</code>，这也可以通过<code>编译</code>来改变，对于键长度超过250字节的情况，一个超过1024字节的键将被用上</li><li><code>BLOB</code>和<code>TEXT</code>列可以被索引</li><li><code>NULL</code>被允许在索引的列中，这个值占每个键的0~1个字节</li><li>所有数字键值以高字节优先被存储以允许一个更高的索引压缩</li><li>每个MyISAM类型的表都有一个<code>AUTO_INCREMENT</code>的内部列，当<code>INSERT</code>和<code>UPDATE</code>操作的时候该列被更新，同时<code>AUTO_INCREMENT</code>列将被刷新。所以说，MyISAM类型表的<code>AUTO_INCREMENT</code>列更新比InnoDB类型的<code>AUTO_INCREMENT</code>更快</li><li>可以把数据文件和索引文件放在<code>不同目录</code></li><li>每个字符列可以有不同的字符集</li><li>有<code>VARCHAR</code>的表可以固定或动态记录长度</li><li><code>VARCHAR</code>和<code>CHAR</code>列可以多达64KB</li></ul><p>使用MyISAM引擎创建数据库，将产生<code>3</code>个文件。文件的名字以表名字开始，扩展名之处文件类型：frm文件存储表定义、数据文件的扩展名为.MYD（MYData）、索引文件的扩展名时.MYI（MYIndex）</p><h4 id="MEMORY"><a href="#MEMORY" class="headerlink" title="MEMORY"></a>MEMORY</h4><p>MEMORY存储引擎将表中的数据存储到<code>内存</code>中，来查询和引用其他表数据提供快速访问。MEMORY主要特性有</p><ul><li>MEMORY表的每个表可以有多达32个索引，每个索引16列，以及500字节的最大键长度</li><li>MEMORY存储引擎执行<code>HASH</code>和<code>BTREE</code>索引</li><li>可以在一个MEMORY表中有非唯一键值</li><li>MEMORY表使用一个固定的记录长度格式</li><li>MEMORY不支持<code>BLOB</code>或<code>TEXT</code>列</li><li>MEMORY支持<code>AUTO_INCREMENT</code>列和对可包含<code>NULL</code>值的列的索引</li><li>MEMORY表在所由客户端之间共享（就像其他任何非TEMPORARY表）</li><li>MEMORY表内存被存储在内存中，内存是MEMORY表和服务器在查询处理时的空闲中，创建的内部表共享</li><li>当不再需要MEMORY表的内容时，要释放被MEMORY表使用的内存，应该执行<code>DELETE FROM</code>或<code>TRUNCATE TABLE</code>，或者删除整个表（使用<code>DROP TABLE</code>）</li></ul><h3 id="存储引擎的选择"><a href="#存储引擎的选择" class="headerlink" title="存储引擎的选择"></a>存储引擎的选择</h3><p>不同的存储引擎都有各自的特点，以适应不同的需求，如下图所示</p><p><center><img src="/2019/05/06/mysql引擎/vs.png" alt=""></center><br>如果要提供提交、回滚、崩溃恢复能力的事务安全（ACID兼容）能力，并要求实现并发控制，<code>InnoDB</code>是一个好的选择。<br>如果数据表主要用来插入和查询记录，则<code>MyISAM</code>引擎能提供较高的处理效率。<br>如果只是临时存放数据，数据量不大，并且不需要较高的数据安全性，可以选择将数据保存在内存中的<code>Memory</code>引擎，MySQL中使用该引擎作为<code>临时表</code>，存放查询的中间结果。<br>如果只有INSERT和SELECT操作，可以选择<code>Archive</code>，<code>Archive</code>支持<code>高并发</code>的<code>插入</code>操作，但是本身<code>不是事务安全的</code>。<code>Archive</code>非常适合存储<code>归档数据</code>，如<code>记录日志信息</code>可以使用<code>Archive</code>。<br>使用哪一种引擎需要灵活选择，一个数据库中多个表可以使用<code>不同引擎</code>以满足各种性能和实际需求，使用合适的存储引擎，将会提高整个数据库的性能。</p>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
            <tag> 引擎 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud 微服务架构</title>
      <link href="/2019/05/01/Spring-Cloud-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"/>
      <url>/2019/05/01/Spring-Cloud-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/</url>
      <content type="html"><![CDATA[<h3 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h3><p><center><img src="/2019/05/01/Spring-Cloud-微服务架构/20180815110816876.png" alt=""></center></p><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><h4 id="Sleuth-链路跟踪"><a href="#Sleuth-链路跟踪" class="headerlink" title="Sleuth-链路跟踪"></a>Sleuth-链路跟踪</h4><p>为服务之间的调用提供链路追踪。通过Sleuth可以很清楚的了解到一个服务请求经过了哪些服务，每个服务处理花费了多长。从而让我们可以很方便的理清各微服务间的调用关系。</p><h4 id="断路器（Hystrix）"><a href="#断路器（Hystrix）" class="headerlink" title="断路器（Hystrix）"></a>断路器（Hystrix）</h4><p>在微服务架构中，根据业务来拆分成一个个的服务，服务与服务之间可以相互调用（RPC），在Spring Cloud可以用RestTemplate+Ribbon和Feign来调用。为了保证其高可用，单个服务通常会集群部署。由于网络原因或者自身的原因，服务并不能保证100%可用，如果单个服务出现问题，调用这个服务就会出现线程阻塞，此时若有大量的请求涌入，Servlet容器的线程资源会被消耗完毕，导致服务瘫痪。服务与服务之间的依赖性，故障会传播，会对整个微服务系统造成灾难性的严重后果，这就是服务故障的“雪崩”效应。Netflix开源了Hystrix组件，实现了断路器模式，SpringCloud对这一组件进行了整合。</p><h4 id="Turbine集群监控"><a href="#Turbine集群监控" class="headerlink" title="Turbine集群监控"></a>Turbine集群监控</h4><p>Turbine 是聚合服务器发送事件流数据的一个工具，用来监控集群下 hystrix 的 metrics 情况；通过turbine可以监控集群的请求量，可以知道系统的请求高峰期，从而更好的知道系统的短板在哪里。</p><h4 id="Consul服务治理-和Eureka服务治理"><a href="#Consul服务治理-和Eureka服务治理" class="headerlink" title="Consul服务治理 和Eureka服务治理"></a>Consul服务治理 和Eureka服务治理</h4><p>由于Spring Cloud为服务治理做了一层抽象接口，所以在Spring Cloud应用中可以支持多种不同的服务治理框架，比如：Netflix Eureka、Consul、Zookeeper。<br>Spring Cloud Consul项目是针对Consul的服务治理实现。Consul是一个分布式高可用的系统，它包含多个组件，但是作为一个整体，在微服务架构中为我们的基础设施提供服务发现和服务配置的工具。它包含了下面几个特性： 服务发现、 健康检查、 Key/Value存储、 多数据中心。由于Consul自身提供了服务端，所以我们不需要像之前实现Eureka的时候创建服务注册中心，直接通过下载consul的服务端程序就可以使用。Consul比Eureka注册支持的更多一些。</p><h4 id="config配置管理"><a href="#config配置管理" class="headerlink" title="config配置管理"></a>config配置管理</h4><p>引入spring cloud config后，我们的外部配置文件就可以集中放置在一个git仓库里，再新建一个config server，用来管理所有的配置文件，维护的时候需要更改配置时，只需要在本地更改后，推送到远程仓库，所有的服务实例都可以通过config server来获取配置文件，这时每个服务实例就相当于配置服务的客户端config client,为了保证系统的稳定，配置服务端config server可以进行集群部署。</p><h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><p>用来做反向代理、负载均衡，当有请求的时候，根据配置的调度策略（加权轮询、IP哈希、最少连接数、一致性哈希）给请求者返回相应的服务器IP。</p><h4 id="Zuul服务网关"><a href="#Zuul服务网关" class="headerlink" title="Zuul服务网关"></a>Zuul服务网关</h4><p>zuul的核心是一系列的filters, 其作用可以类比Servlet框架的Filter；Zuul的主要功能是路由和过滤器。是各种服务的统一入口，同时还会用来提供监控、授权、安全、调度等等；可以通过扩展ZuulFilter，在执行方法之前，做各种检查工作。</p><h3 id="Spring-Cloud项目简介"><a href="#Spring-Cloud项目简介" class="headerlink" title="Spring Cloud项目简介"></a>Spring Cloud项目简介</h3><p>　spring Cloud是基于Spring Boot的一整套实现微服务的框架。他提供了微服务开发所需的配置管理、服务发现、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话和集群状态管理等组件。最重要的是，跟spring boot框架一起使用的话，会让你开发微服务架构的云服务非常好的方便。SpringBoot旨在简化创建产品级的 Spring 应用和服务，简化了配置文件，使用嵌入式web服务器，含有诸多开箱即用微服务功能。<br>Spring Cloud子项目包括：</p><h4 id="Spring-Cloud-Config"><a href="#Spring-Cloud-Config" class="headerlink" title="Spring Cloud Config"></a>Spring Cloud Config</h4><p>配置管理开发工具包，可以让你把配置放到远程服务器，目前支持本地存储、Git以及Subversion。</p><h4 id="Spring-Cloud-Bus"><a href="#Spring-Cloud-Bus" class="headerlink" title="Spring Cloud Bus"></a>Spring Cloud Bus</h4><p>事件、消息总线，用于在集群（例如，配置变化事件）中传播状态变化，可与Spring Cloud Config联合实现热部署。</p><h4 id="Spring-Cloud-Netflix"><a href="#Spring-Cloud-Netflix" class="headerlink" title="Spring Cloud Netflix"></a>Spring Cloud Netflix</h4><p>针对多种Netflix组件提供的开发工具包，其中包括Eureka、Hystrix、Zuul、Archaius等。</p><h4 id="Netflix-Eureka"><a href="#Netflix-Eureka" class="headerlink" title="Netflix Eureka"></a>Netflix Eureka</h4><p>云端负载均衡，一个基于 REST 的服务，用于定位服务，以实现云端的负载均衡和中间层服务器的故障转移。</p><h4 id="Netflix-Hystrix"><a href="#Netflix-Hystrix" class="headerlink" title="Netflix Hystrix"></a>Netflix Hystrix</h4><p>容错管理工具，旨在通过控制服务和第三方库的节点,从而对延迟和故障提供更强大的容错能力。</p><h4 id="Netflix-Zuul"><a href="#Netflix-Zuul" class="headerlink" title="Netflix Zuul"></a>Netflix Zuul</h4><p>边缘服务工具，是提供动态路由，监控，弹性，安全等的边缘服务。</p><h4 id="Netflix-Archaius"><a href="#Netflix-Archaius" class="headerlink" title="Netflix Archaius"></a>Netflix Archaius</h4><p>配置管理API，包含一系列配置管理API，提供动态类型化属性、线程安全配置操作、轮询框架、回调机制等功能。</p><h4 id="Spring-Cloud-for-Cloud-Foundry"><a href="#Spring-Cloud-for-Cloud-Foundry" class="headerlink" title="Spring Cloud for Cloud Foundry"></a>Spring Cloud for Cloud Foundry</h4><p>通过Oauth2协议绑定服务到Cloud Foundry，Cloud Foundry是VMware推出的开源PaaS云平台</p><h4 id="Spring-Cloud-Sleuth"><a href="#Spring-Cloud-Sleuth" class="headerlink" title="Spring Cloud Sleuth"></a>Spring Cloud Sleuth</h4><p>日志收集工具包，封装了Dapper,Zipkin和HTrace操作。</p><h4 id="Spring-Cloud-Data-Flow"><a href="#Spring-Cloud-Data-Flow" class="headerlink" title="Spring Cloud Data Flow"></a>Spring Cloud Data Flow</h4><p>大数据操作工具，通过命令行方式操作数据流</p><h4 id="Spring-Cloud-Security"><a href="#Spring-Cloud-Security" class="headerlink" title="Spring Cloud Security"></a>Spring Cloud Security</h4><p>安全工具包，为你的应用程序添加安全控制，主要是指OAuth2</p><h4 id="Spring-Cloud-Consul"><a href="#Spring-Cloud-Consul" class="headerlink" title="Spring Cloud Consul"></a>Spring Cloud Consul</h4><p>封装了Consul操作，consul是一个服务发现与配置工具，与Docker容器可以无缝集成。</p><h4 id="Spring-Cloud-Zookeeper"><a href="#Spring-Cloud-Zookeeper" class="headerlink" title="Spring Cloud Zookeeper"></a>Spring Cloud Zookeeper</h4><p>操作Zookeeper的工具包，用于使用zookeeper方式的服务注册和发现。</p><h4 id="Spring-Cloud-Stream"><a href="#Spring-Cloud-Stream" class="headerlink" title="Spring Cloud Stream"></a>Spring Cloud Stream</h4><p>数据流操作开发包，封装了与Redis,Rabbit、Kafka等发送接收消息。</p><h4 id="Spring-Cloud-CLI"><a href="#Spring-Cloud-CLI" class="headerlink" title="Spring Cloud CLI"></a>Spring Cloud CLI</h4><p>基于 Spring Boot CLI，可以让你以命令行方式快速建立云组件。</p><p>　</p>]]></content>
      
      <categories>
          
          <category> 微服务 </category>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Spring Cloud </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Boot &amp;&amp; Spring Cloud</title>
      <link href="/2019/04/27/Spring-Boot-Spring-Cloud/"/>
      <url>/2019/04/27/Spring-Boot-Spring-Cloud/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Spring Boot先于Spring Cloud问世，Spring Boot相当于脚手架，借助它可以快速搭建“房子”，它本身不具备任何功能属性，只是普通房间，没有任何其它功能。</p><h3 id="什么是Spring-Boot"><a href="#什么是Spring-Boot" class="headerlink" title="什么是Spring Boot"></a>什么是Spring Boot</h3><p>Spring Boot简化了基于Spring的应用开发，通过少量的代码就能创建一个独立的、产品级别的Spring应用。Spring Boot为Spring平台及第三方库提供<code>开箱即用</code>的设置，这样你就可以有条不紊的开始；大多数的Spring Boot应用仅仅只需要少量的Spring配置。<br>Spring Boot是由<code>Pivotal</code>团队提供的全新框架，其设计目的是用来简化Spring应用的初始搭建及开发工程。该框架采用了特定的方式进行配置，从而使开发人员不再需要定义样板化的配置。换句话来说，你也可以将Spring Boot理解成并不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了所有的jar包，Spring Boot整合了所有的框架。<br>Spring Boot的核心思想就是<code>约定大于配置，一切自动完成</code>。采用Spring Boot可以大大的简化你的开发模式，所有你想集成的常用框架，它都有对应的组建支持。</p><h3 id="什么是Spring-Cloud"><a href="#什么是Spring-Cloud" class="headerlink" title="什么是Spring Cloud"></a>什么是Spring Cloud</h3><p>Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙滴简化了分布式系统基础设施的开发，如服<code>务发现注册</code>、<code>配置中心</code>、<code>消息总线</code>、<code>负载均更</code>、<code>断路器</code>、<code>数据监控</code>等，都可以用Spring Boot的开发风格做到一键启动和部署。Spring并未重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉负责的配置和实现原理，最终给开发者留出了一套<code>简单易懂</code>、<code>容易部署和维护</code>的分布式系统开发工具包。<br>微服务是可以<code>独立部署</code>、<code>水平扩展</code>、<code>独立访问</code>的服务单元，Spring Cloud就是这些微服务的大管家；采用微服务这种架构之后，项目的数量会变得非常多，Spring Cloud做为大管家就需要提供各种方案来维护整个生态。Spring Cloud本身并不会提供具体功能性的操作，它更专注于服务之间的<code>通讯</code>、<code>熔断</code>、<code>监控</code>等。因此需要很多的组建来完成只一套功能的支持。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Spring Boot和Spring cloud的关系如下：Spring Boot是Spring的一套快速配置脚手架，可以基于Spring Boot快速开发单个微服务，Spring Cloud是一个基于Spring Boot实现的云应用开发工具；Spring Boot专注于快速、方便集成的单个微服务个体，Spring Cloud关注全局的服务治理框架；Spring Boot是用了默认大于配置的理念，很多集成方案已经提前帮你选择好了，能不自己配置就不要自己配置，Spring Cloud很大的一部分是基于Spring Boot来实现的。Spring Boot可以脱离开Spring Cloud独立使用来开发项目，但是Spring Cloud则不能离开Spring Boot，属于依赖的关系。</p>]]></content>
      
      <categories>
          
          <category> 微服务 </category>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Spring Cloud </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>高性能服务器上进行JVM调优</title>
      <link href="/2019/04/26/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E8%BF%9B%E8%A1%8CJVM%E8%B0%83%E4%BC%98/"/>
      <url>/2019/04/26/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E8%BF%9B%E8%A1%8CJVM%E8%B0%83%E4%BC%98/</url>
      <content type="html"><![CDATA[<p>本文介绍的是如何在高性能即高配置的服务器上进行JVM优化，为了充分利用高性能服务器的硬件资源，可以采用以下措施进行优化</p><h3 id="采用64位操作系统，并为JVM分配大内存"><a href="#采用64位操作系统，并为JVM分配大内存" class="headerlink" title="采用64位操作系统，并为JVM分配大内存"></a>采用64位操作系统，并为JVM分配大内存</h3><p>如果JVM中堆内存太小，就会频繁地发生垃圾回收，而垃圾回收都会伴随不同程度的程序停顿，因此如果扩大堆内存的话就可以减少垃圾回收的频率，从而避免程序的停顿。因此首先想到的就是扩大内存容量。而32位的操作系统理论上支持的最大内存只有4G，但是64位的操作系统最大却可以支持到128G的内存；综上所述我们可以使用64位的操作系统和64位的JVM，并为JVM分配更大的堆内存。但“幸福的烦恼”也随之而来。<br>堆内存变大后，固然垃圾收集的频率减少了，但每次垃圾回收的时间将会变长。如果堆内存为14G，那么每次Full GC的时间将长达数十秒。如果Full GC频繁发生，那么对于任何一个网站或者程序来说都是是无法忍受的。<br>因此，对于使用大内存的程序来说，一定要减少Full GC的频率，如果每天只有一两次Full GC，而且发生在低峰时间段内， 那完全可以接受。</p><h3 id="减少Full-GC-频率"><a href="#减少Full-GC-频率" class="headerlink" title="减少Full GC 频率"></a>减少Full GC 频率</h3><p>为了减少Full GC的频率则需要尽量避免太多对象进入到老年代，有下列做法可以参考：</p><h4 id="确保对象都是“朝生夕死”的"><a href="#确保对象都是“朝生夕死”的" class="headerlink" title="确保对象都是“朝生夕死”的"></a>确保对象都是“朝生夕死”的</h4><p>一个对象使用完后应尽快让他失效，然后尽快在新生代中被Minor GC回收掉，尽量避免对象在新生代中停留太长时间。</p><h4 id="提高大对象直接进入老年代的门槛"><a href="#提高大对象直接进入老年代的门槛" class="headerlink" title="提高大对象直接进入老年代的门槛"></a>提高大对象直接进入老年代的门槛</h4><p>通过设置参数-XX:PretrnureSizeThreshold来提高大对象的门槛，尽量让对象都先进入新生代，然后尽快被Minor GC回收掉，而不要直接进入老年代。 </p><h4 id="避免大对象"><a href="#避免大对象" class="headerlink" title="避免大对象"></a>避免大对象</h4><p>大对象对于JVM来说是个噩耗。如果对象过大，当前新生代的剩余空间装不下它，那么就需要使用分配担保机制，将当前新生代的对象都复制到老年代中，给大对象腾出空间，分配担保涉及到大量的复制，因此效率很低。如果将大对象直接放入老年代，虽然避免了分配担保过程，但该对象只有当Full GC时才能被回收，而Full GC的代价是高昂的。如果大对象过多时，老年代很快就装满了，这时就需要进行Full GC，如果Full GC频率过高，程序就会变得很卡。<br>对于大对象可以参考一下几种处理方法</p><ul><li>在写程序的时候尽量避免大对象<br>从源头降低大对象的出现，尽量选择空间利用率较高的数据结构存储。</li><li>尽量缩短大对象的有效时间<br>对象用完后尽快让它失效，好让垃圾收集器尽快将他回收，避免因在新生代呆的时间过长而进入老年代。</li></ul>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java垃圾回收(GC)机制</title>
      <link href="/2019/04/25/java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6-GC-%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/04/25/java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6-GC-%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>Java与其它语言（c/c++）对比来说，创建一个对象且使用后，不用再显式的delete/free，且能在一定程度上保证系统内存资源的及时回收，这些都要要归功于于Java特有的的垃圾回收机制（Garbage Collection，GC），但也正是因为有垃圾回收机制的存在，一旦系统内存发生泄漏或溢出时，排查问题比较困难，因此Java程序猿深入理解Java虚拟机GC机制就变得非常重要。<br>要掌握Java GC机制，首先需要搞清楚以下几个问题：</p><ul><li>运行时有哪些内存区域？</li><li>运行时怎么给类、对象分配内存？</li><li>哪些区域的内存需要回收？</li><li>内存中的哪些对象可以回收？</li><li>如何回收？</li></ul><h3 id="JVM-运行时有哪些内存区域"><a href="#JVM-运行时有哪些内存区域" class="headerlink" title="JVM 运行时有哪些内存区域?"></a>JVM 运行时有哪些内存区域?</h3><p>根据Java虚拟机的规范规定，虚拟机所管理的运行时内存分为以下区域</p><ul><li>程序计数器<br>每一条Java线程都有一个独立的程序计数器，我们把线程相互独立隔离的区域叫线程私有的，它的作用可以看作是当前线程所执行的字节码的行号指示器，它是一块较小的空间区域，如果执行的是Java方法，这个计数器记录的是正在执行的虚拟机字节码的指令地址，如果是native的方法，这个计数器的值为空（undefined）</li><li>Java虚拟机栈<br>Java虚拟机栈与程序计数器一样，也是线程私有的；Java虚拟机栈描述的是Java方法执行的内存模型，每个方法被执行的时候都会同时创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链路、方法出口等信息。每一个方法从被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。</li><li>本地方法栈<br>本地方法栈和虚拟机栈作用非常相似，不同的是Java虚拟机栈是为执行的是Java方法服务的，而本地方法栈是为native的方法执行服务的。</li><li>Java堆<br>Java堆（heap）是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的<code>对象实例</code>以及<code>数组</code>都要在堆上分配内存。在堆上的内存是<code>分代管理</code>的，分为<code>新生代</code>和<code>老年代</code>，新生代又细分为：<code>Eden</code>，<code>From Survivor</code>，<code>To Survivor</code>，它们空间大小比例为<code>8:1:1</code>。</li><li>方法区<br>方法区与Java堆一样，是各个<code>线程共享</code>的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然Java虚拟机规范把方法区描述为堆得一个逻辑部分，但是它却有一个别名叫Non-Heap（非堆），目的应该是与Java堆区分开来，也称“永久代”（Permanent Generation）。hotspot虚拟机永久代已经完全在JDK 8移除，用Native Memory来的实现，命名为metaSpace，</li><li>运行时常量池<br>运行时常量池是方法区的一部分。用于存放编译期生成的各种字面量和符号引用。</li></ul><h3 id="JVM-运行时怎么给类、对象分配内存"><a href="#JVM-运行时怎么给类、对象分配内存" class="headerlink" title="JVM 运行时怎么给类、对象分配内存?"></a>JVM 运行时怎么给类、对象分配内存?</h3><p>根据上面的JVM运行时数据区域的划分可以知道，几乎所有的对象都在堆上分配，而类信息、常量、静态变量在方法区分配。堆内存是分代管理的，对象优先在Eden分配；大对象（所谓的大对象是指需要连续内存空间的Java对象，如很长的字符串或者数组）直接进入老年代；长期存活的对象将进入老年代，在垃圾回收时在Survivor中每熬过一次youngGC，他的年龄就增加1，直到到达指定的年龄就会被放入老年代。</p><h3 id="JVM-哪些区域的内存需要回收"><a href="#JVM-哪些区域的内存需要回收" class="headerlink" title="JVM 哪些区域的内存需要回收?"></a>JVM 哪些区域的内存需要回收?</h3><p>根据JVM运行时数据区域的各个部分，程序计数器、虚拟机栈、本地方法栈三个区域随着线程而生，随线程灭而灭。栈中的栈帧随着方法的进入和退出而进栈出栈。每个栈帧分配多少内存在类结构确定下来的时候就基本已经确定。所以这个三个区域内存回收时方法或者线程结束而回收的，不需要太多关注；而Java堆和方法区则不一样，一个接口不同实现类，一个方法中不同的分支，在具体运行的时候才能确定创建那些对象，所以这部分内存是动态的，也是需要垃圾回收机制来回收处理的。</p><h3 id="JVM-内存中的哪些对象可以回收？"><a href="#JVM-内存中的哪些对象可以回收？" class="headerlink" title="JVM 内存中的哪些对象可以回收？"></a>JVM 内存中的哪些对象可以回收？</h3><h4 id="堆内存"><a href="#堆内存" class="headerlink" title="堆内存"></a>堆内存</h4><p>判断堆内的对象是否可以回收，需要判断这个对象实例是否确实没用，判断算法有两种：引用计数法和根搜索算法。</p><ul><li>引用计数法</li></ul><blockquote><p>就是给每个对象加一个计数器，如果有一个地方引用就加1，当引用失效就减1；当计数器为0，则认为对象是无用的。这种算法最大的问题在于不能解决相互引用的对象，如：A.b=B;B.a=A，在没有其他引用的情况下，应该回收；但按照引用计数法来计算，他们的引用都不为0，显然不能回收。</p></blockquote><ul><li>根搜索算法</li></ul><blockquote><p>这个算法的思路是通过一系列名为“GC Roots”的对象作为起点，从这个节点向下搜索，搜索所经过的路径称为引用链（Reference Chain），当一个对象到GC Roots没有任何引用链相连时，则证明该对象不可用。</p></blockquote><p>Java等一大部分商用语言是用根搜索算法来管理内存的，Java中可以做为GC Roots的对象有如下几种：</p><ul><li>虚拟机栈（栈帧中的本地变量表）中的引用的对象</li><li>方法区中的类静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>本地方法栈JNI(Native)的引用对象</li></ul><h4 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h4><p>方法区回收主要有两部分：废弃的常量和无用的类。废弃的常量判断方法和堆中的对象类似，只要判断没有地方引用就可以回收。相比之下，判断一个类是否无用，条件就比较苛刻，需要同时满足以下3个条件才能算是“无用的类”：</p><ul><li>该类的所有实例都已经被回收，也就是Java堆中不存在该类的任何实例</li><li>加载该类的ClassLoader已经被回收</li><li>该类对应的Java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法<br>虚拟机可以对于满足上面三个条件的无用类进行回收，仅仅是可以回收，具体能否回收，JVM提供了-Xnoclassgc参数进行控制。</li></ul><h3 id="JVM-如何回收？"><a href="#JVM-如何回收？" class="headerlink" title="JVM 如何回收？"></a>JVM 如何回收？</h3><p>JVM gc有多种算法，根据不同的算法实现了不同的垃圾回收器，每种收集器可以在不同的应用场景使用。</p><h4 id="回收算法"><a href="#回收算法" class="headerlink" title="回收算法"></a>回收算法</h4><ul><li>标记-清除（Mark-Sweep）算法<br>如它的名字一样，算法分“标记”和“清除”两个阶段：<br>首先标记出所有需要回收的对象，在标记完成后统一回收掉被标记的对象。该方法主要有两个缺点：一个是效率问题，标记和清除效率都不高；另一个是空间问题：标记清除后会产生大量空间碎片。</li><li>复制（Copying）算法<br>该算法将内存按容量分成大小相等的两块，每次只用一块，当这一块内存用完后，就将可用的对象复制到另外一块上面，然后一次性清除已用过那块的内存空间。优点是实现简单，运行效率高，缺点是内存缩小为原来的一半。</li><li>标记整理（Mark-Compact）算法<br>该算法仍然与标记-清除算法一样，第一步标记，第二步不是对无用对象清理，而是，让所有可用对象都向一端移动，然后直接清理掉端边界以外的内存。标记整理算法的优点是不会产生空间碎片。</li><li>分代收集（Generation Collection）算法<br>分代收集算法根据对象存活周期的不同将内存划为几块，一般把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最合适的收集算法。在新生代中，每次垃圾回收时都发现大批对象死去，只有少量存活，那就选用复制算法，付出少量复制成本就可以完成收集。而老年代中对象存活率较高且没有空间进行担保，就必须使用“标记-清除”或者“标记-整理”算法。<h4 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h4>垃圾回收器是垃圾回收算法的具体实现，一般不同的厂商或者不同版本的虚拟机都包含不同的垃圾收集器，并且一般会提供参数供用户选择在不用业务场景下组合出各个年代所使用的收集器。</li><li>Serial(串行GC)收集器<br>Serial收集器是一个新生代收集器，单线程执行，使用复制算法。它在进行垃圾收集时，必须暂停其他所有的工作线程(用户线程)。是Jvm client模式下默认的新生代收集器。对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。 </li><li>ParNew(并行GC)收集器<br>ParNew收集器其实就是Serial收集器的多线程版本，除了使用多条线程进行垃圾收集之外，其余行为与Serial收集器一样。</li><li>Parallel Scavenge(并行回收GC)收集器<br>Parallel Scavenge收集器也是一个新生代收集器，它也是使用复制算法的收集器，又是并行多线程收集器。Parallel Scavenge收集器的特点是它的关注点与其他收集器不同，CMS等收集器的关注点是尽可能地缩短垃圾收集时用户线程的停顿时间，而Parallel Scavenge收集器的目标则是达到一个可控制的吞吐量。吞吐量 = 程序运行时间/(程序运行时间 + 垃圾收集时间)，虚拟机总共运行了100分钟。其中垃圾收集花掉1分钟，那吞吐量就是99%。 </li><li>Serial Old(串行GC)收集器<br>Serial Old是Serial收集器的老年代版本，它同样使用一个单线程执行收集，使用“标记-整理”算法。主要使用在Client模式下的虚拟机。</li><li>Parallel Old(并行GC)收集器<br>Parallel Old 是Parallel Scavenge收集器的老年代版本，使用多线程和“标记-整理”算法。 </li><li>CMS(并发GC)收集器<br>CMS(Concurrent Mark Sweep)收集器是一种以获取最短回收停顿时间为目标的收集器。CMS收集器是基于“标记-清除”算法实现的，整个收集过程大致分为4个步骤：①.初始标记(CMS initial mark)；②.并发标记(CMS concurrenr mark)；③.重新标记(CMS remark)；④.并发清除(CMS concurrent sweep)。 其中初始标记、重新标记这两个步骤任然需要停顿其他用户线程。初始标记仅仅只是标记出GC ROOTS能直接关联到的对象，速度很快，并发标记阶段是进行GC ROOTS 根搜索算法阶段，会判定对象是否存活。而重新标记阶段则是为了修正并发标记期间，因用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间会被初始标记阶段稍长，但比并发标记阶段要短。由于整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，所以整体来说，CMS收集器的内存回收过程是与用户线程一起并发执行的。CMS收集器的优点：并发收集、低停顿，但是CMS还远远达不到完美，器主要有三个显著缺点：</li></ul><blockquote><p>CMS收集器对CPU资源非常敏感。在并发阶段，虽然不会导致用户线程停顿，但是会占用CPU资源而导致引用程序变慢，总吞吐量下降。CMS默认启动的回收线程数是：(CPU数量+3) / 4。</p></blockquote><blockquote><p>CMS收集器无法处理浮动垃圾，可能出现“Concurrent Mode Failure“，失败后而导致另一次Full  GC的产生。由于CMS并发清理阶段用户线程还在运行，伴随程序的运行自热会有新的垃圾不断产生，这一部分垃圾出现在标记过程之后，CMS无法在本次收集中处理它们，只好留待下一次GC时将其清理掉。这一部分垃圾称为“浮动垃圾”。也是由于在垃圾收集阶段用户线程还需要运行，<br>即需要预留足够的内存空间给用户线程使用，因此CMS收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，需要预留一部分内存空间提供并发收集时的程序运作使用。在默认设置下，CMS收集器在老年代使用了68%的空间时就会被激活，也可以通过参数-XX:CMSInitiatingOccupancyFraction的值来提供触发百分比，以降低内存回收次数提高性能。要是CMS运行期间预留的内存无法满足程序其他线程需要，就会出现“Concurrent Mode Failure”失败，这时候虚拟机将启动后备预案：临时启用Serial Old收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。所以说参数-XX:CMSInitiatingOccupancyFraction设置的过高将会很容易导致“Concurrent Mode Failure”失败，性能反而降低。</p></blockquote><blockquote><p>CMS是基于“标记-清除”算法实现的收集器，使用“标记-清除”算法收集后，会产生大量碎片。空间碎片太多时，将会给对象分配带来很多麻烦，比如说大对象，内存空间找不到连续的空间来分配不得不提前触发一次Full  GC。为了解决这个问题，CMS收集器提供了一个-XX:UseCMSCompactAtFullCollection开关参数，用于在Full  GC之后增加一个碎片整理过程，还可通过-XX:CMSFullGCBeforeCompaction参数设置执行多少次不压缩的Full  GC之后，跟着来一次碎片整理过程。</p></blockquote><ul><li>G1收集器<br>在G1中，堆被划分成 许多个连续的区域(region)。每个区域大小相等，在1M~32M之间。JVM最多支持2000个区域，可推算G1能支持的最大内存为2000*32M=62.5G。区域(region)的大小在JVM初始化的时候决定，也可以用-XX:G1HeapReginSize设置。在G1中没有物理上的Yong(Eden/Survivor)/Old Generation，它们是逻辑的，使用一些非连续的区域(Region)组成的。</li></ul><h4 id="垃圾收集（Garbage-Collection）"><a href="#垃圾收集（Garbage-Collection）" class="headerlink" title="垃圾收集（Garbage Collection）"></a>垃圾收集（Garbage Collection）</h4><p>新生代的GC叫YongGC，也叫MinorGC，指发生在新生代的垃圾回收动作，因为Java具备朝生夕灭特性，所以YongGC非常频繁，一般回收集比较快；老年代GC叫FullGC，也叫Major GC，一般都伴有YongGC，GC的速度一般比YongGC慢10倍以上。目前虚拟机实现都是分代收集(G1物理上是不连续的，是逻辑分代，这里主要以jdk1.7之前为例)，当要给对象分配空间时，在Eden上分配空间，如果空间不够，则触发一次YongGC，如果空间够，则分配空间，如果还不够则直接进入老年代；当一次YongGC后，从Eden，From Survivor的对象放入To Survivor，如果放不下，则进入老年代；每次Yong GC 后还留在Survivor中的对象，对象的年龄Age加1，达到一定年龄（默认为15，可用参数-XX:MaxTenuringThreshold设置）后自动进入老年代；在发生Yong GC时，虚拟机会检测之前每次晋升到老年代的平均大小是否大于老年代的剩余空间大小，如果大于，则改为直接进行一次Full GC。如果小于则看HandlePromotionFailure设置是否允许担保失败，如果允许，那只会进行Minor GC；如果不允许，则也要改为进行一次Full GC。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Java GC主要主要指Java堆和方法区的对象回收，哪些对象可以回收是通过根搜索算法来判断的，在堆中是分代收集的，怎么回收是由具体的垃圾收集器来完成的，在不同的应用场景下，开发者可以选择不同的收集器来满足业务需求，达到最佳性能。 </p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> full gc </tag>
            
            <tag> jvm </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>高并发秒发系统</title>
      <link href="/2019/04/25/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A7%92%E5%8F%91%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/04/25/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A7%92%E5%8F%91%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<p>在每年的双十一、618等促销活动中，淘宝、京东等电商平台都会推出众多的秒杀活动，作为一个开发人员都会有一个疑问“这些秒杀活动是如何设计及支持如此大量的瞬时请求的”？</p><h2 id="秒杀活动的特点"><a href="#秒杀活动的特点" class="headerlink" title="秒杀活动的特点"></a>秒杀活动的特点</h2><ul><li>秒杀业务简单，卖家查询，买家下订单减库存</li><li>秒杀时网站访问流量激增，出现峰值</li><li>访问请求数量远大于实际需求量</li></ul><h2 id="秒杀系统设计方案"><a href="#秒杀系统设计方案" class="headerlink" title="秒杀系统设计方案"></a>秒杀系统设计方案</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p> 一个秒杀系统从前到后，依次有：<br> <code>前端浏览器秒杀页面 ---&gt; 中间代理服务 ---&gt; 后端服务层 ---&gt; 数据库层</code><br>根据上面这个流程，一般优化设计思路：<code>将请求拦截在系统上游，降低下游压力</code>。在一个并发量大，实际需求小的系统中，应当尽量在前端拦截无效流量，降低下游服务器和数据库的压力，不然很可能造成数据库读写锁冲突，甚至导致死锁，最终请求超时。<br>设计思路与优化点：</p><ul><li>限流：屏蔽掉无用的流量，允许少部分流量流向后端。</li><li>削峰：瞬时大流量峰值容易压垮系统，解决这个问题是重中之重。常用的消峰方法有异步处理、缓存和消息中间件等技术。</li><li>异步处理：秒杀系统是一个高并发系统，采用异步处理模式可以极大地提高系统并发量，其实异步处理就是削峰的一种实现方式。</li><li>内存缓存：秒杀系统最大的瓶颈一般都是数据库读写，由于数据库读写属于磁盘IO，性能很低，如果能够把部分数据或业务逻辑转移到内存缓存，效率会有极大地提升。</li><li>可拓展：当然如果我们想支持更多用户，更大的并发，最好就将系统设计成弹性可拓展的，如果流量来了，拓展机器就好了。像淘宝、京东等双十一活动时会增加大量机器应对交易高峰。</li><li>消息队列：消息队列可以削峰，将拦截大量并发请求，这也是一个异步处理过程，后台业务根据自己的处理能力，从消息队列中主动的拉取请求消息进行业务处理。</li><li>充分利用缓存：利用缓存可极大提高系统读写速度。 </li></ul><h3 id="详细方案"><a href="#详细方案" class="headerlink" title="详细方案"></a>详细方案</h3><h4 id="前端方案"><a href="#前端方案" class="headerlink" title="前端方案"></a>前端方案</h4><ul><li>静态资源缓存：将活动页面上的所有可以静态的元素全部静态化，尽量减少动态元素；通过CDN缓存静态资源，来抗峰值。 </li><li>禁止重复提交：用户提交之后按钮置灰，禁止重复提交 </li><li>用户限流：在某一时间段内只允许用户提交一次请求，比如可以采取IP限流</li></ul><h4 id="中间代理层"><a href="#中间代理层" class="headerlink" title="中间代理层"></a>中间代理层</h4><p>可利用负载均衡（例如反响代理Nginx等）使用多个服务器并发处理请求，减小服务器压力。</p><h4 id="后端方案"><a href="#后端方案" class="headerlink" title="后端方案"></a>后端方案</h4><h5 id="控制层-网关层"><a href="#控制层-网关层" class="headerlink" title="控制层(网关层)"></a>控制层(网关层)</h5><p>限制同一UserID访问频率：尽量拦截浏览器请求，但针对某些恶意攻击或其它插件，在服务端控制层需要针对同一个访问uid，限制访问频率。</p><h5 id="服务层"><a href="#服务层" class="headerlink" title="服务层"></a>服务层</h5><p>当用户量非常大的时候，拦截流量后的请求访问量还是非常大，此时仍需进一步优化。</p><ul><li>业务分离:将秒杀业务系统和其他业务分离，单独放在高配服务器上，可以集中资源对访问请求抗压。</li><li>采用消息队列缓存请求：将大流量请求写到消息队列缓存，利用服务器根据自己的处理能力主动到消息缓存队列中抓取任务处理请求，数据库层订阅消息减库存，减库存成功的请求返回秒杀成功，失败的返回秒杀结束。</li><li>利用缓存应对读请求：对于读多写少业务，大部分请求是查询请求，所以可以读写分离，利用缓存分担数据库压力。</li><li>利用缓存应对写请求：缓存也是可以应对写请求的，可把数据库中的库存数据转移到Redis缓存中，所有减库存操作都在Redis中进行，然后再通过后台进程把Redis中的用户秒杀请求同步到数据库中。</li></ul><h5 id="数据库层"><a href="#数据库层" class="headerlink" title="数据库层"></a>数据库层</h5><p> 数据库层是最脆弱的一层，一般在应用设计时在上游就需要把请求拦截掉，数据库层只承担“能力范围内”的访问请求。所以，上面通过在服务层引入队列和缓存，让最底层的数据库高枕无忧。如果不使用缓存来作为中间缓冲而是直接访问数据库的话，可以对数据库进行优化，减少数据库压力。 对于秒杀系统，直接访问数据库的话，存在一个【事务竞争优化】问题，可使用存储过程（或者触发器）等技术绑定操作，整个事务在MySQL端完成，把整个热点执行放在一个过程当中一次性完成，可以屏蔽掉网络延迟时间，减少行级锁持有时间，提高事务并发访问速度。</p>]]></content>
      
      
        <tags>
            
            <tag> 并发 </tag>
            
            <tag> 秒杀 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Sentinel 与 Hystrix 的对比</title>
      <link href="/2019/04/24/Sentinel-%E4%B8%8E-Hystrix-%E7%9A%84%E5%AF%B9%E6%AF%94/"/>
      <url>/2019/04/24/Sentinel-%E4%B8%8E-Hystrix-%E7%9A%84%E5%AF%B9%E6%AF%94/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/alibaba/Sentinel" target="_blank" rel="noopener">Sentinel</a> 是阿里中间件团队开源的，面向分布式服务架构的轻量级高可用流量控制组件，主要以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度来帮助用户保护服务的稳定性。大家可能会问：Sentinel 和之前常用的熔断降级库 Netflix Hystrix 有什么异同呢？本文将从多个角度对 Sentinel 和 Hystrix 进行对比，帮助大家进行技术选型。</p><h4 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h4><h5 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a><a href="https://github.com/Netflix/Hystrix/wiki" target="_blank" rel="noopener">Hystrix</a></h5><p>Hystrix的官方介绍</p><blockquote><p>Hystrix is a library that helps you control the interactions between these distributed services by adding latency tolerance and fault tolerance logic. Hystrix does this by isolating points of access between the services, stopping cascading failures across them, and providing fallback options, all of which improve your system’s overall resiliency.</p></blockquote><p>由上可以看到 Hystrix 的关注点在于以 <code>隔离</code> 和 <code>熔断</code> 为主的容错机制，超时或被熔断的调用将会快速失败，并可以提供 <code>fallback</code> 机制。</p><h5 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h5><p>Sentinel 的侧重点在于：</p><ul><li>多样化的流量控制</li><li>熔断降级</li><li>系统负载保护</li><li>实时监控和控制台</li></ul><h4 id="共同特性"><a href="#共同特性" class="headerlink" title="共同特性"></a>共同特性</h4><h5 id="资源模型和执行模型上的对比"><a href="#资源模型和执行模型上的对比" class="headerlink" title="资源模型和执行模型上的对比"></a>资源模型和执行模型上的对比</h5><blockquote><p>Hystrix 的资源模型设计上采用了命令模式，将对外部资源的调用和 fallback 逻辑封装成一个命令对象（HystrixCommand / HystrixObservableCommand），其底层的执行是基于 RxJava 实现的。每个 Command 创建时都要指定 commandKey 和 groupKey（用于区分资源）以及对应的隔离策略（线程池隔离 or 信号量隔离）。线程池隔离模式下需要配置线程池对应的参数（线程池名称、容量、排队超时等），然后 Command 就会在指定的线程池按照指定的容错策略执行；信号量隔离模式下需要配置最大并发数，执行 Command 时 Hystrix 就会限制其并发调用。</p></blockquote><blockquote><p>Sentinel 的设计则更为简单。相比 Hystrix Command 强依赖隔离规则，Sentinel 的资源定义与规则配置的耦合度更低。Hystrix 的 Command 强依赖于隔离规则配置的原因是隔离规则会直接影响 Command 的执行。在执行的时候 Hystrix 会解析 Command 的隔离规则来创建 RxJava Scheduler 并在其上调度执行，若是线程池模式则 Scheduler 底层的线程池为配置的线程池，若是信号量模式则简单包装成当前线程执行的 Scheduler。而 Sentinel 并不指定执行模型，也不关注应用是如何执行的。Sentinel 的原则非常简单：根据对应资源配置的规则来为资源执行相应的限流/降级/负载保护策略。在 Sentinel 中资源定义和规则配置是分离的。用户先通过 Sentinel API 给对应的业务逻辑定义资源（埋点），然后可以在需要的时候配置规则。埋点方式有两种：</p><ul><li>try-catch 方式（通过 SphU.entry(…)），用户在 catch 块中执行异常处理 / fallback</li><li>if-else 方式（通过 SphO.entry(…)），当返回 false 时执行异常处理 / fallback<br>从 0.1.1 版本开始，Sentinel 还支持基于注解的资源定义方式，可以通过注解参数指定异常处理函数和 fallback 函数。<br>从 0.2.0 版本开始，Sentinel 引入异步调用链路支持，可以方便地统计异步调用资源的数据，维护异步调用链路，同时具备了适配异步框架/库的能力。可以参考 <a href="https://github.com/alibaba/Sentinel/wiki/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8#%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8%E6%94%AF%E6%8C%81" target="_blank" rel="noopener">相关文档</a>。<br>Sentinel 提供<a href="https://github.com/alibaba/Sentinel/wiki/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%99%E6%89%A9%E5%B1%95" target="_blank" rel="noopener">多样化的规则配置方式</a>。除了直接通过 <code>loadRules API</code> 将规则注册到内存态之外，用户还可以注册各种外部数据源来提供动态的规则。用户可以根据系统当前的实时情况去动态地变更规则配置，数据源会将变更推送至 Sentinel 并即时生效。</li></ul></blockquote><h5 id="隔离设计上的对比"><a href="#隔离设计上的对比" class="headerlink" title="隔离设计上的对比"></a>隔离设计上的对比</h5><p>隔离是 Hystrix 的核心功能之一。Hystrix 提供两种隔离策略：线程池隔离（Bulkhead Pattern）和信号量隔离，其中最推荐也是最常用的是线程池隔离。Hystrix 的线程池隔离针对不同的资源分别创建不同的线程池，不同服务调用都发生在不同的线程池中，在线程池排队、超时等阻塞情况时可以快速失败，并可以提供 fallback 机制。线程池隔离的好处是隔离度比较高，可以针对某个资源的线程池去进行处理而不影响其它资源，但是代价就是线程上下文切换的 overhead 比较大，特别是对低延时的调用有比较大的影响。<br>但是，实际情况下，线程池隔离并没有带来非常多的好处。首先就是过多的线程池会非常影响性能。考虑这样一个场景，在 Tomcat 之类的 Servlet 容器使用 Hystrix，本身 Tomcat 自身的线程数目就非常多了（可能到几十或一百多），如果加上 Hystrix 为各个资源创建的线程池，总共线程数目会非常多（几百个线程），这样上下文切换会有非常大的损耗。另外，线程池模式比较彻底的隔离性使得 Hystrix 可以针对不同资源线程池的排队、超时情况分别进行处理，但这其实是超时熔断和流量控制要解决的问题，如果组件具备了超时熔断和流量控制的能力，线程池隔离就显得没有那么必要了。<br>Hystrix 的信号量隔离限制对某个资源调用的并发数。这样的隔离非常轻量级，仅限制对某个资源调用的并发数，而不是显式地去创建线程池，所以 overhead 比较小，但是效果不错，也支持超时失败。Sentinel 可以通过并发线程数模式的流量控制来提供信号量隔离的功能。并且结合基于响应时间的熔断降级模式，可以在不稳定资源的平均响应时间比较高的时候自动降级，防止过多的慢调用占满并发数，影响整个系统。</p><h5 id="熔断降级对比"><a href="#熔断降级对比" class="headerlink" title="熔断降级对比"></a>熔断降级对比</h5><p>Sentinel 和 Hystrix 的熔断降级功能本质上都是基于熔断器模式（Circuit Breaker Pattern）。Sentinel 与 Hystrix 都支持基于失败比率（异常比率）的熔断降级，在调用达到一定量级并且失败比率达到设定的阈值时自动进行熔断，此时所有对该资源的调用都会被 block，直到过了指定的时间窗口后才启发性地恢复。上面提到过，Sentinel 还支持基于平均响应时间的熔断降级，可以在服务响应时间持续飙高的时候自动熔断，拒绝掉更多的请求，直到一段时间后才恢复。这样可以防止调用非常慢造成级联阻塞的情况。</p><h5 id="实时指标统计实现对比"><a href="#实时指标统计实现对比" class="headerlink" title="实时指标统计实现对比"></a>实时指标统计实现对比</h5><p>Hystrix 和 Sentinel 的实时指标数据统计实现都是基于滑动窗口的。Hystrix 1.5 之前的版本是通过环形数组实现的滑动窗口，通过锁配合 CAS 的操作对每个桶的统计信息进行更新。Hystrix 1.5 开始对实时指标统计的实现进行了重构，将指标统计数据结构抽象成了响应式流（reactive stream）的形式，方便消费者去利用指标信息。同时底层改造成了基于 RxJava 的事件驱动模式，在服务调用成功/失败/超时的时候发布相应的事件，通过一系列的变换和聚合最终得到实时的指标统计数据流，可以被熔断器或 Dashboard 消费。<br>Sentinel 目前抽象出了 Metric 指标统计接口，底层可以有不同的实现，目前默认的实现是基于 <code>LeapArray</code> 的高性能滑动窗口，后续根据需要可能会引入 reactive stream 等实现。</p><h4 id="Sentinel-的特色"><a href="#Sentinel-的特色" class="headerlink" title="Sentinel 的特色"></a>Sentinel 的特色</h4><h5 id="轻量级、高性能"><a href="#轻量级、高性能" class="headerlink" title="轻量级、高性能"></a>轻量级、高性能</h5><p>Sentinel 作为一个功能完备的高可用流量管控组件，其核心 <code>sentinel-core</code> 没有任何多余依赖，打包后只有不到 200 KB，非常轻量级。开发者可以放心地引入 <code>sentinel-core</code> 而不需担心依赖问题。同时，Sentinel 提供了多种扩展点，用户可以很方便地根据需求去进行扩展，并且无缝地切合到 Sentinel 中。<br>引入 Sentinel 带来的性能损耗非常小。只有在业务单机量级超过 25W QPS 的时候才会有一些显著的影响（5% - 10% 左右），单机 QPS 不太大的时候损耗几乎可以忽略不计。</p><h5 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h5><p>Sentinel 可以针对不同的调用关系，以不同的运行指标（如 QPS、并发调用数、系统负载等）为基准，对资源调用进行流量控制，将随机的请求调整成合适的形状。<br>Sentinel 支持多样化的流量整形策略，在 QPS 过高的时候可以自动将流量调整成合适的形状。常用的有：</p><ul><li>直接拒绝模式：即超出的请求直接拒绝。</li><li>慢启动预热模式：当流量激增的时候，控制流量通过的速率，让通过的流量缓慢增加，在一定时间内逐渐增加到阈值上限，给冷系统一个预热的时间，避免冷系统被压垮。</li><li>匀速器模式：利用 <code>Leaky Bucket</code> 算法实现的匀速模式，严格控制了请求通过的时间间隔，同时堆积的请求将会排队，超过超时时长的请求直接被拒绝。<br>Sentinel 还支持 <a href="https://github.com/alibaba/Sentinel/wiki/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6#%E5%9F%BA%E4%BA%8E%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB%E7%9A%84%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6" target="_blank" rel="noopener">基于调用关系的限流</a>，包括基于调用方限流、基于调用链入口限流、关联流量限流等，依托于 Sentinel 强大的调用链路统计信息，可以提供精准的不同维度的限流。<br>Sentinel 0.2.0 开始支持 <a href="https://github.com/alibaba/Sentinel/wiki/%E7%83%AD%E7%82%B9%E5%8F%82%E6%95%B0%E9%99%90%E6%B5%81" target="_blank" rel="noopener">热点参数限流</a>，能够实时的统计热点参数并针对热点参数的资源调用进行流量控制。<h5 id="系统负载保护"><a href="#系统负载保护" class="headerlink" title="系统负载保护"></a>系统负载保护</h5>Sentinel 对系统的维度提供保护，负载保护算法借鉴了 TCP BBR 的思想。当系统负载较高的时候，如果仍持续让请求进入，可能会导致系统崩溃，无法响应。在集群环境下，网络负载均衡会把本应这台机器承载的流量转发到其它的机器上去。如果这个时候其它的机器也处在一个边缘状态的时候，这个增加的流量就会导致这台机器也崩溃，最后导致整个集群不可用。针对这个情况，Sentinel 提供了对应的保护机制，让系统的入口流量和系统的负载达到一个平衡，保证系统在能力范围之内处理最多的请求。</li></ul><h5 id="实时监控与控制面板"><a href="#实时监控与控制面板" class="headerlink" title="实时监控与控制面板"></a>实时监控与控制面板</h5><p>Sentinel 提供 HTTP API 用于获取<a href="https://github.com/alibaba/Sentinel/wiki/%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7" target="_blank" rel="noopener">实时的监控信息</a>，如调用链路统计信息、簇点信息、规则信息等。如果用户正在使用 Spring Boot/Spring Cloud 并使用了 <a href="https://github.com/spring-cloud-incubator/spring-cloud-alibaba" target="_blank" rel="noopener">Sentinel Spring Cloud Starter</a>，还可以方便地通过其暴露的 Actuator Endpoint 来获取运行时的一些信息，如动态规则等。未来 Sentinel 还会支持标准化的指标监控 API，可以方便地整合各种监控系统和可视化系统，如 Prometheus、Grafana 等。<br><a href="https://github.com/alibaba/Sentinel/wiki/%E6%8E%A7%E5%88%B6%E5%8F%B0" target="_blank" rel="noopener">Sentinel 控制台（Dashboard）</a>提供了机器发现、配置规则、查看实时监控、查看调用链路信息等功能，使得用户可以非常方便地去查看监控和进行配置。</p><h5 id="生态"><a href="#生态" class="headerlink" title="生态"></a>生态</h5><p>Sentinel 目前已经针对 Servlet、Dubbo、Spring Boot/Spring Cloud、gRPC 等进行了适配，用户只需引入相应依赖并进行简单配置即可非常方便地享受 Sentinel 的高可用流量防护能力。未来 Sentinel 还会对更多常用框架进行适配，并且会为 Service Mesh 提供集群流量防护的能力。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><table><thead><tr><th></th><th>Sentinel</th><th>Hystrix</th></tr></thead><tbody><tr><td>隔离策略</td><td>信号量隔离</td><td>线程池隔离/信号量隔离</td></tr><tr><td>熔断降级策略</td><td>基于响应时间或失败比率</td><td>基于失败比率</td></tr><tr><td>实时指标实现</td><td>滑动窗口</td><td>滑动窗口（基于 RxJava）</td></tr><tr><td>规则配置</td><td>支持多种数据源</td><td>支持多种数据源</td></tr><tr><td>扩展性</td><td>多个扩展点</td><td>插件的形式</td></tr><tr><td>基于注解的支持</td><td>支持</td><td>支持</td></tr><tr><td>限流</td><td>基于 QPS，支持基于调用关系的限流</td><td>有限的支持</td></tr><tr><td>流量整形</td><td>支持慢启动、匀速器模式</td><td>不支持</td></tr><tr><td>系统负载保护</td><td>支持</td><td>不支持</td></tr><tr><td>控制台</td><td>开箱即用，可配置规则、查看秒级监控、机器发现等</td><td>不完善</td></tr><tr><td>常见框架的适配</td><td>Servlet、Spring Cloud、Dubbo、gRPC 等</td><td>Servlet、Spring Cloud Netflix</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sentinel </tag>
            
            <tag> Hystrix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>分布式事务</title>
      <link href="/2019/04/24/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
      <url>/2019/04/24/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
      <content type="html"><![CDATA[<h3 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h3><p>事务提供一种机制将一个活动涉及的所有操作纳入到一个不可分割的执行单元，组成事务的所有操作只有在所有操作均能正常执行的情况下方能提交，只要其中任一操作执行失败，都将导致整个事务的回滚。简单地说，事务提供一种“要么什么都不做，要么做全套（All Do or Nothing Do）”机制。</p><h3 id="ACID-事务四大特性"><a href="#ACID-事务四大特性" class="headerlink" title="ACID(事务四大特性)"></a>ACID(事务四大特性)</h3><h4 id="A-原子性-Atomicity"><a href="#A-原子性-Atomicity" class="headerlink" title="A:原子性(Atomicity)"></a>A:原子性(Atomicity)</h4><p>一个事务(transaction)中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p><h4 id="C-一致性-Consistency"><a href="#C-一致性-Consistency" class="headerlink" title="C:一致性(Consistency)"></a>C:一致性(Consistency)</h4><p>事务的一致性指的是在一个事务执行之前和执行之后数据库都必须处于一致性状态。如果事务成功地完成，那么系统中所有变化将正确地应用，系统处于有效状态。如果在事务中出现错误，那么系统中的所有变化将自动地回滚，系统返回到原始状态。</p><h4 id="I-隔离性-Isolation"><a href="#I-隔离性-Isolation" class="headerlink" title="I:隔离性(Isolation)"></a>I:隔离性(Isolation)</h4><p>指的是在并发环境中，当不同的事务同时操纵相同的数据时，每个事务都有各自的完整数据空间。由并发事务所做的修改必须与任何其他并发事务所做的修改隔离。事务查看数据更新时，数据所处的状态要么是另一事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看到中间状态的数据。</p><h4 id="D-持久性-Durability"><a href="#D-持久性-Durability" class="headerlink" title="D:持久性(Durability)"></a>D:持久性(Durability)</h4><p>指的是只要事务成功结束，它对数据库所做的更新就必须永久保存下来。即使发生系统崩溃，重新启动数据库系统后，数据库还能恢复到事务成功结束时的状态。</p><h3 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h3><h4 id="什么是分布式事务"><a href="#什么是分布式事务" class="headerlink" title="什么是分布式事务"></a>什么是分布式事务</h4><p>分布式事务就是指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上。简单的说，就是一次大的操作由不同的小操作组成，这些小的操作分布在不同的服务器上，且属于不同的应用，分布式事务需要保证这些小操作要么全部成功，要么全部失败。本质上来说，分布式事务就是为了保证不同数据库的数据一致性。</p><h4 id="分布式事务产生的原因"><a href="#分布式事务产生的原因" class="headerlink" title="分布式事务产生的原因"></a>分布式事务产生的原因</h4><p>分布式事务产生的原因可以分为两块，一个是service产生多个节点，另一个是resource产生多个节点。</p><h5 id="service多个节点"><a href="#service多个节点" class="headerlink" title="service多个节点"></a>service多个节点</h5><p>随着互联网快速发展，微服务，SOA等服务架构模式正在被大规模的使用，举个简单的例子，一个公司之内，用户的资产可能分为好多个部分，比如余额，积分，优惠券等等。在公司内部有可能积分功能由一个微服务团队维护，优惠券又是另外的团队维护。这样的话就无法保证积分扣减了之后，优惠券能否扣减成功。</p><h5 id="resource多个节点"><a href="#resource多个节点" class="headerlink" title="resource多个节点"></a>resource多个节点</h5><p>同样的，互联网发展得太快了，我们的Mysql一般来说装千万级的数据就得进行分库分表，对于一个支付系统的转账业务来说，你给你的朋友转钱，有可能你的数据库是在北京，而你的朋友的钱是存在上海，所以我们依然无法保证他们能同时成功。</p><h4 id="分布式事务的基础"><a href="#分布式事务的基础" class="headerlink" title="分布式事务的基础"></a>分布式事务的基础</h4><p>从上面来看分布式事务是随着互联网高速发展应运而生的，这是一个必然的我们之前说过数据库的ACID四大特性，已经无法满足我们分布式事务，这个时候又有一些技术大佬提出一些新的理论:</p><h5 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h5><p>CAP定理，又被叫作布鲁尔定理。对于设计分布式系统来说(不仅仅是分布式事务)的架构师来说，CAP就是你的入门理论。</p><ul><li>C (一致性):对某个指定的客户端来说，读操作能返回最新的写操作。对于数据分布在不同节点上的数据上来说，如果在某个节点更新了数据，那么在其他节点如果都能读取到这个最新的数据，那么就称为强一致，如果有某个节点没有读取到，那就是分布式不一致。</li><li>A (可用性)：非故障的节点在合理的时间内返回合理的响应(不是错误和超时的响应)。可用性的两个关键一个是合理的时间，一个是合理的响应。合理的时间指的是请求不能无限被阻塞，应该在合理的时间给出返回。合理的响应指的是系统应该明确返回结果并且结果是正确的，这里的正确指的是比如应该返回50，而不是返回40。</li><li>P (分区容错性):当出现网络分区后，系统能够继续工作。打个比方，这里个集群有多台机器，有台机器网络出现了问题，但是这个集群仍然可以正常工作。</li></ul><p>熟悉CAP的人都知道，三者不能共有，如果感兴趣可以搜索CAP的证明，在分布式系统中，网络无法100%可靠，分区其实是一个必然现象，如果我们选择了CA而放弃了P，那么当发生分区现象时，为了保证一致性，这个时候必须拒绝请求，但是A又不允许，所以分布式系统理论上不可能选择CA架构，只能选择CP或者AP架构。<br>对于CP来说，放弃可用性，追求一致性和分区容错性，我们的zookeeper其实就是追求的强一致。<br>对于AP来说，放弃一致性(这里说的一致性是强一致性)，追求分区容错性和可用性，这是很多分布式系统设计时的选择，后面的BASE也是根据AP来扩展。<br>顺便一提，CAP理论中是忽略网络延迟，也就是当事务提交时，从节点A复制到节点B，但是在现实中这个是明显不可能的，所以总会有一定的时间是不一致。同时CAP中选择两个，比如你选择了CP，并不是叫你放弃A。因为P出现的概率实在是太小了，大部分的时间你仍然需要保证CA。就算分区出现了你也要为后来的A做准备，比如通过一些日志的手段，是其他机器回复至可用。</p><h5 id="BASE"><a href="#BASE" class="headerlink" title="BASE"></a>BASE</h5><p>BASE 是 Basically Available(基本可用)、Soft state(软状态)和 Eventually consistent (最终一致性)三个短语的缩写。是对CAP中AP的一个扩展。</p><ul><li>基本可用:分布式系统在出现故障时，允许损失部分可用功能，保证核心功能可用。</li><li>软状态:允许系统中存在中间状态，这个状态不影响系统可用性，这里指的是CAP中的不一致。</li><li>最终一致:最终一致是指经过一段时间后，所有节点数据都将会达到一致。</li></ul><p>BASE解决了CAP中理论没有网络延迟，在BASE中用软状态和最终一致，保证了延迟后的一致性。BASE和 ACID 是相反的，它完全不同于ACID的强一致性模型，而是通过牺牲强一致性来获得可用性，并允许数据在一段时间内是不一致的，但最终达到一致状态。</p><h4 id="分布式事务解决方案"><a href="#分布式事务解决方案" class="headerlink" title="分布式事务解决方案"></a>分布式事务解决方案</h4><h5 id="是否真的要分布式事务"><a href="#是否真的要分布式事务" class="headerlink" title="是否真的要分布式事务"></a>是否真的要分布式事务</h5><p>在说方案之前，首先你一定要明确你是否真的需要分布式事务？<br>上面说过出现分布式事务的两个原因，其中有个原因是因为微服务过多。我见过太多团队一个人维护几个微服务，太多团队过度设计，搞得所有人疲劳不堪，而微服务过多就会引出分布式事务，这个时候我不会建议你去采用下面任何一种方案，而是请把需要事务的微服务聚合成一个单机服务，使用数据库的本地事务。因为不论任何一种方案都会增加你系统的复杂度，这样的成本实在是太高了，千万不要因为追求某些设计，而引入不必要的成本和复杂度。</p><h5 id="2PC"><a href="#2PC" class="headerlink" title="2PC"></a>2PC</h5><p>说到2PC就不得不聊数据库分布式事务中的 XA Transactions。<br>在XA协议中分为两阶段:</p><ul><li>第一阶段：事务管理器要求每个涉及到事务的数据库预提交(precommit)此操作，并反映是否可以提交.</li><li>第二阶段：事务协调器要求每个数据库提交数据，或者回滚数据。<br>优点： 尽量保证了数据的强一致，实现成本较低，在各大主流数据库都有自己实现，对于MySQL是从5.5开始支持。<br>缺点:</li><li>单点问题:事务管理器在整个流程中扮演的角色很关键，如果其宕机，比如在第一阶段已经完成，在第二阶段正准备提交的时候事务管理器宕机，资源管理器就会一直阻塞，导致数据库无法使用。</li><li>同步阻塞:在准备就绪之后，资源管理器中的资源一直处于阻塞，直到提交完成，释放资源。</li><li>数据不一致:两阶段提交协议虽然为分布式数据强一致性所设计，但仍然存在数据不一致性的可能，比如在第二阶段中，假设协调者发出了事务commit的通知，但是因为网络问题该通知仅被一部分参与者所收到并执行了commit操作，其余的参与者则因为没有收到通知一直处于阻塞状态，这时候就产生了数据的不一致性。<br>总的来说，XA协议比较简单，成本较低，但是其单点问题，以及不能支持高并发(由于同步阻塞)依然是其最大的弱点。<h5 id="TCC"><a href="#TCC" class="headerlink" title="TCC"></a>TCC</h5>关于TCC（Try-Confirm-Cancel）的概念，最早是由Pat Helland于2007年发表的一篇名为《Life beyond Distributed Transactions:an Apostate’s Opinion》的论文提出。<br>TCC事务机制相比于上面介绍的XA，解决了其几个缺点:</li><li>1.解决了协调者单点，由主业务方发起并完成这个业务活动。业务活动管理器也变成多点，引入集群。</li><li>2.同步阻塞:引入超时，超时后进行补偿，并且不会锁定整个资源，将资源转换为业务逻辑形式，粒度变小。</li><li>3.数据一致性，有了补偿机制之后，由业务活动管理器控制一致性。<br>对于TCC的解释:</li><li>Try阶段：尝试执行,完成所有业务检查（一致性）,预留必须业务资源（准隔离性）</li><li>Confirm阶段：确认执行真正执行业务，不作任何业务检查，只使用Try阶段预留的业务资源，Confirm操作满足幂等性。要求具备幂等设计，Confirm失败后需要进行重试。</li><li>Cancel阶段：取消执行，释放Try阶段预留的业务资源<br>Cancel操作满足幂等性Cancel阶段的异常和Confirm阶段异常处理方案基本上一致。<h5 id="本地消息表"><a href="#本地消息表" class="headerlink" title="本地消息表"></a>本地消息表</h5>本地消息表这个方案最初是ebay提出的 ebay的完整方案<a href="https://queue.acm.org/detail.cfm?id=1394128。" target="_blank" rel="noopener">https://queue.acm.org/detail.cfm?id=1394128。</a><br>此方案的核心是将需要分布式处理的任务通过消息日志的方式来异步执行。消息日志可以存储到本地文本、数据库或消息队列，再通过业务规则自动或人工发起重试。人工重试更多的是应用于支付场景，通过对账系统对事后问题的处理。<br>对于本地消息队列来说核心是把大事务转变为小事务。还是举上面用100元去买一瓶水的例子。<br>1.当你扣钱的时候，你需要在你扣钱的服务器上新增加一个本地消息表，你需要把你扣钱和写入减去水的库存到本地消息表放入同一个事务(依靠数据库本地事务保证一致性。<br>2.这个时候有个定时任务去轮询这个本地事务表，把没有发送的消息，扔给商品库存服务器，叫他减去水的库存，到达商品服务器之后这个时候得先写入这个服务器的事务表，然后进行扣减，扣减成功后，更新事务表中的状态。<br>3.商品服务器通过定时任务扫描消息表或者直接通知扣钱服务器，扣钱服务器本地消息表进行状态更新。<br>4.针对一些异常情况，定时扫描未成功处理的消息，进行重新发送，在商品服务器接到消息之后，首先判断是否是重复的，如果已经接收，在判断是否执行，如果执行在马上又进行通知事务，如果未执行，需要重新执行需要由业务保证幂等，也就是不会多扣一瓶水。<br>本地消息队列是BASE理论，是最终一致模型，适用于对一致性要求不高的。实现这个模型时需要注意重试的幂等。<h5 id="MQ"><a href="#MQ" class="headerlink" title="MQ"></a>MQ</h5>在RocketMQ中实现了分布式事务，实际上其实是对本地消息表的一个封装，将本地消息表移动到了MQ内部，下面简单介绍一下MQ事务。<br>基本流程如下:<br>第一阶段Prepared消息，会拿到消息的地址。<br>第二阶段执行本地事务。<br>第三阶段通过第一阶段拿到的地址去访问消息，并修改状态。消息接受者就能使用这个消息。<br>如果确认消息失败，在RocketMq Broker中提供了定时扫描没有更新状态的消息，如果有消息没有得到确认，会向消息发送者发送消息，来判断是否提交，在rocketmq中是以listener的形式给发送者，用来处理。<br>如果消费超时，则需要一直重试，消息接收端需要保证幂等。如果消息消费失败，这个就需要人工进行处理，因为这个概率较低，如果为了这种小概率时间而设计这个复杂的流程反而得不偿失<h5 id="Saga事务"><a href="#Saga事务" class="headerlink" title="Saga事务"></a>Saga事务</h5>Saga是30年前一篇数据库伦理提到的一个概念。其核心思想是将长事务拆分为多个本地短事务，由Saga事务协调器协调，如果正常结束那就正常完成，如果某个步骤失败，则根据相反顺序一次调用补偿操作。<br>Saga的组成：<br>每个Saga由一系列sub-transaction Ti 组成<br>每个Ti 都有对应的补偿动作Ci，补偿动作用于撤销Ti造成的结果,这里的每个T，都是一个本地事务。<br>可以看到，和TCC相比，Saga没有“预留 try”动作，它的Ti就是直接提交到库。<br>Saga的执行顺序有两种：<br>T1, T2, T3, …, Tn<br>T1, T2, …, Tj, Cj,…, C2, C1，其中0 &lt; j &lt; n<br>Saga定义了两种恢复策略：<br>向后恢复，即上面提到的第二种执行顺序，其中j是发生错误的sub-transaction，这种做法的效果是撤销掉之前所有成功的sub-transation，使得整个Saga的执行结果撤销。<br>向前恢复，适用于必须要成功的场景，执行顺序是类似于这样的：T1, T2, …, Tj(失败), Tj(重试),…, Tn，其中j是发生错误的sub-transaction。该情况下不需要Ci。<br>这里要注意的是，在saga模式中不能保证隔离性，因为没有锁住资源，其他事务依然可以覆盖或者影响当前事务。<br>还是拿100元买一瓶水的例子来说，这里定义<br>T1=扣100元 T2=给用户加一瓶水 T3=减库存一瓶水<br>C1=加100元 C2=给用户减一瓶水 C3=给库存加一瓶水<br>我们一次进行T1,T2，T3如果发生问题，就执行发生问题的C操作的反向。<br>上面说到的隔离性的问题会出现在，如果执行到T3这个时候需要执行回滚，但是这个用户已经把水喝了(另外一个事务)，回滚的时候就会发现，无法给用户减一瓶水了。这就是事务之间没有隔离性的问题<br>可以看见saga模式没有隔离性的影响还是较大，可以参照华为的解决方案:从业务层面入手加入一 Session 以及锁的机制来保证能够串行化操作资源。也可以在业务层面通过预先冻结资金的方式隔离这部分资源， 最后在业务操作的过程中可以通过及时读取当前状态的方式获取到最新的更新。</li></ul>]]></content>
      
      <categories>
          
          <category> 事务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事务 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring-cloud熔断器</title>
      <link href="/2019/04/23/spring-cloud%E7%86%94%E6%96%AD%E5%99%A8/"/>
      <url>/2019/04/23/spring-cloud%E7%86%94%E6%96%AD%E5%99%A8/</url>
      <content type="html"><![CDATA[<h4 id="雪崩效应"><a href="#雪崩效应" class="headerlink" title="雪崩效应"></a>雪崩效应</h4><p>在微服务架构中通常会有多个服务层调用，基础服务的故障可能会导致级联故障，进而造成整个系统不可用的情况，这种现象被称为服务雪崩效应。服务雪崩效应是一种因“服务提供者”的不可用导致“服务消费者”的不可用,并将不可用逐渐放大的过程。</p><h4 id="熔断器（CircuitBreaker）"><a href="#熔断器（CircuitBreaker）" class="headerlink" title="熔断器（CircuitBreaker）"></a>熔断器（CircuitBreaker）</h4><p>熔断器的原理很简单，如同电力过载保护器。它可以实现快速失败，如果它在一段时间内侦测到许多类似的错误，会强迫其以后的多个调用快速失败，不再访问远程服务器，从而防止应用程序不断地尝试执行可能会失败的操作，使得应用程序继续执行而不用等待修正错误，或者浪费CPU时间去等到长时间的超时产生。熔断器也可以使应用程序能够诊断错误是否已经修正，如果已经修正，应用程序会再次尝试调用操作。<br>熔断器模式就像是那些容易导致错误的操作的一种代理。这种代理能够记录最近调用发生错误的次数，然后决定使用允许操作继续，或者立即返回错误。<br><code>熔断器就是保护服务高可用的最后一道防线。</code></p><h4 id="Hystrix特性"><a href="#Hystrix特性" class="headerlink" title="Hystrix特性"></a>Hystrix特性</h4><h5 id="1-断路器机制"><a href="#1-断路器机制" class="headerlink" title="1.断路器机制"></a>1.断路器机制</h5><p>断路器很好理解, 当Hystrix Command请求后端服务失败数量超过一定比例(默认50%), 断路器会切换到开路状态(Open). 这时所有请求会直接失败而不会发送到后端服务. 断路器保持在开路状态一段时间后(默认5秒), 自动切换到半开路状态(HALF-OPEN). 这时会判断下一次请求的返回情况, 如果请求成功, 断路器切回闭路状态(CLOSED), 否则重新切换到开路状态(OPEN). Hystrix的断路器就像我们家庭电路中的保险丝, 一旦后端服务不可用, 断路器会直接切断请求链, 避免发送大量无效请求影响系统吞吐量, 并且断路器有自我检测并恢复的能力.</p><h5 id="2-Fallback"><a href="#2-Fallback" class="headerlink" title="2.Fallback"></a>2.Fallback</h5><p>Fallback相当于是降级操作. 对于查询操作, 我们可以实现一个fallback方法, 当请求后端服务出现异常的时候, 可以使用fallback方法返回的值. fallback方法的返回值一般是设置的默认值或者来自缓存.</p><h5 id="3-资源隔离"><a href="#3-资源隔离" class="headerlink" title="3.资源隔离"></a>3.资源隔离</h5><p>在Hystrix中, 主要通过线程池来实现资源隔离. 通常在使用的时候我们会根据调用的远程服务划分出多个线程池. 例如调用产品服务的Command放入A线程池, 调用账户服务的Command放入B线程池. 这样做的主要优点是运行环境被隔离开了. 这样就算调用服务的代码存在bug或者由于其他原因导致自己所在线程池被耗尽时, 不会对系统的其他服务造成影响. 但是带来的代价就是维护多个线程池会对系统带来额外的性能开销. 如果是对性能有严格要求而且确信自己调用服务的客户端代码不会出问题的话, 可以使用Hystrix的信号模式(Semaphores)来隔离资源.</p>]]></content>
      
      <categories>
          
          <category> spring cloud </category>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hystrix </tag>
            
            <tag> spring cloud </tag>
            
            <tag> 熔断器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring cloud版本</title>
      <link href="/2019/04/23/spring-cloud%E7%89%88%E6%9C%AC/"/>
      <url>/2019/04/23/spring-cloud%E7%89%88%E6%9C%AC/</url>
      <content type="html"><![CDATA[<p>Spring Cloud是一个由众多独立子项目组成的大型综合项目，每个子项目有不同的发行节奏，都维护着自己的发布版本号。Spring Cloud通过一个资源清单BOM（Bill of Materials）来管理每个版本的子项目清单。为避免与子项目的发布号混淆，所以没有采用版本号的方式，而是通过命名的方式。这些版本名称的命名方式采用了伦敦地铁站的名称，同时根据字母表的顺序来对应版本时间顺序，比如：最早的Release版本：Angel，第二个Release版本：Brixton，然后是Camden、Dalston、Edgware，目前最新的是Finchley版本。<br>当一个版本的Spring Cloud项目的发布内容积累到临界点或者解决了一个严重bug后，就会发布一个“service releases”版本，简称SRX版本，其中X是一个递增数字。当前官网上最新的稳定版本是Edgware.SR5，里程碑版本是Finchley.M9。下表列出了这两个版本所包含的子项目及各子项目的版本号。</p><center><img src="/2019/04/23/spring-cloud版本/1556019194673.jpg" alt=""></center>]]></content>
      
      <categories>
          
          <category> spring cloud </category>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring cloud </tag>
            
            <tag> version </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Protobuf简介</title>
      <link href="/2019/03/26/Protobuf%E7%AE%80%E4%BB%8B/"/>
      <url>/2019/03/26/Protobuf%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p><center><img src="/2019/03/26/Protobuf简介/protobuf.png" alt="protobuf"></center><br>protobuf是google提供的一个开源序列化框架，类似于XML，JSON这样的数据表示语言，其最大的特点是基于二进制，因此比传统的XML表示高效短小得多。虽然是二进制数据格式，但并没有因此变得复杂，开发人员通过按照一定的语法定义结构化的消息格式，然后送给命令行工具，工具将自动生成相关的类，可以支持PHP、Java、c++、Python等语言环境。通过将这些类包含在项目中，可以很轻松的调用相关方法来完成业务消息的序列化与反序列化工作。<br>protobuf在google中是一个比较核心的基础库，作为分布式运算涉及到大量的不同业务消息的传递，如何高效简洁的表示、操作这些业务消息在google这样的大规模应用中是至关重要的。而protobuf这样的库正好是在效率、数据大小、易用性之间取得了很好的平衡。</p><h3 id="Protobuf消息定义"><a href="#Protobuf消息定义" class="headerlink" title="Protobuf消息定义"></a>Protobuf消息定义</h3><p>字段格式：限定修饰符① | 数据类型② | 字段名称③ | = | 字段编码值④ | [字段默认值⑤]</p><h4 id="①．限定修饰符包含-required-optional-repeated"><a href="#①．限定修饰符包含-required-optional-repeated" class="headerlink" title="①．限定修饰符包含 required\optional\repeated"></a>①．限定修饰符包含 required\optional\repeated</h4><ul><li>Required: 表示是一个必须字段，必须相对于发送方，在发送消息之前必须设置该字段的值，对于接收方，必须能够识别该字段的意思。发送之前没有设置required字段或者无法识别required字段都会引发编解码异常，导致消息被丢弃。</li><li>Optional：表示是一个可选字段，可选对于发送方，在发送消息时，可以有选择性的设置或者不设置该字段的值。对于接收方，如果能够识别可选字段就进行相应的处理，如果无法识别，则忽略该字段，消息中的其它字段正常处理。—因为optional字段的特性，很多接口在升级版本中都把后来添加的字段都统一的设置为optional字段，这样老的版本无需升级程序也可以正常的与新的软件进行通信，只不过新的字段无法识别而已，因为并不是每个节点都需要新的功能，因此可以做到按需升级和平滑过渡。</li><li>Repeated：表示该字段可以包含0~N个元素。其特性和optional一样，但是每一次可以包含多个值。可以看作是在传递一个数组的值。</li></ul><h4 id="②．数据类型"><a href="#②．数据类型" class="headerlink" title="②．数据类型"></a>②．数据类型</h4><p>Protobuf定义了一套基本数据类型。几乎都可以映射到C++\Java等语言的基础数据类型.     </p><table><thead><tr><th>protobuf 数据类型</th><th>描述</th><th>打包</th><th>C++语言映射</th></tr></thead><tbody><tr><td>bool</td><td>布尔类型</td><td>1字节</td><td>bool</td></tr><tr><td>double</td><td>64位浮点数</td><td>N</td><td>double</td></tr><tr><td>float</td><td>32为浮点数</td><td>N</td><td>float</td></tr><tr><td>int32</td><td>32位整数</td><td>N</td><td>int</td></tr><tr><td>uin32</td><td>无符号32位整数</td><td>N</td><td>unsigned int</td></tr><tr><td>int64</td><td>64位整数</td><td>N</td><td>__int64</td></tr><tr><td>uint64</td><td>64位无符号整数</td><td>N</td><td>unsigned __int64</td></tr><tr><td>sint32</td><td>32位整数，处理负数效率更高</td><td>N</td><td>int32</td></tr><tr><td>sing64</td><td>64位整数 处理负数效率更高</td><td>N</td><td>__int64</td></tr><tr><td>fixed32</td><td>32位无符号整数</td><td>4</td><td>unsigned int32</td></tr><tr><td>fixed64</td><td>64位无符号整数</td><td>8</td><td>unsigned __int64</td></tr><tr><td>sfixed32</td><td>32位整数、能以更高的效率处理负数</td><td>4</td><td>unsigned int32</td></tr><tr><td>sfixed64</td><td>64位整数</td><td>8</td><td>unsigned __int64</td></tr><tr><td>string</td><td>只能处理 ASCII字符</td><td>N</td><td>std::string</td></tr><tr><td>bytes</td><td>用于处理多字节的语言字符、如中文</td><td>N</td><td>std::string</td></tr><tr><td>enum</td><td>可以包含一个用户自定义的枚举类型uint32</td><td>N(uint32)</td><td>enum</td></tr><tr><td>message</td><td>可以包含一个用户自定义的消息类型</td><td>N</td><td>object of class</td></tr></tbody></table><ul><li>N 表示打包的字节并不是固定。而是根据数据的大小或者长度。例如int32，如果数值比较小，在0~127时，使用一个字节打包。</li><li>关于枚举的打包方式和uint32相同。</li><li>关于message，类似于c语言中的结构包含另外一个结构作为数据成员一样。</li><li>关于 fixed32 和int32的区别。fixed32的打包效率比int32的效率高，但是使用的空间一般比int32多。因此一个属于时间效率高，一个属于空间效率高。根据项目的实际情况，一般选择fixed32，如果遇到对传输数据量要求比较苛刻的环境，可以选择int32.</li></ul><h4 id="③．字段名称"><a href="#③．字段名称" class="headerlink" title="③．字段名称"></a>③．字段名称</h4><p>字段名称的命名与C、C++、Java等语言的变量命名方式几乎是相同的。<br>protobuf建议字段的命名采用以下划线分割的驼峰式。例如 first_name 而不是firstName.</p><h4 id="④．字段编码值"><a href="#④．字段编码值" class="headerlink" title="④．字段编码值"></a>④．字段编码值</h4><p>有了该值，通信双方才能互相识别对方的字段。当然相同的编码值，其限定修饰符和数据类型必须相同。<br>编码值的取值范围为 1~2^32（4294967296）。<br>其中 1~15的编码时间和空间效率都是最高的，编码值越大，其编码的时间和空间效率就越低（相对于1-15），当然一般情况下相邻的2个值编码效率的是相同的，除非2个值恰好实在4字节，12字节，20字节等的临界区。比如15和16.<br>1900~2000编码值为Google protobuf 系统内部保留值，建议不要在自己的项目中使用。<br>protobuf 还建议把经常要传递的值把其字段编码设置为1-15之间的值。<br>消息中的字段的编码值无需连续，只要是合法的，并且不能在同一个消息中有字段包含相同的编码值。<br>建议：项目投入运营以后涉及到版本升级时的新增消息字段全部使用optional或者repeated，尽量不实用required。如果使用了required，需要全网统一升级，如果使用optional或者repeated可以平滑升级。</p><h4 id="⑤．默认值。当在传递数据时，对于required数据类型，如果用户没有设置值，则使用默认值传递到对端。当接受数据是，对于optional字段，如果没有接收到optional字段，则设置为默认值。"><a href="#⑤．默认值。当在传递数据时，对于required数据类型，如果用户没有设置值，则使用默认值传递到对端。当接受数据是，对于optional字段，如果没有接收到optional字段，则设置为默认值。" class="headerlink" title="⑤．默认值。当在传递数据时，对于required数据类型，如果用户没有设置值，则使用默认值传递到对端。当接受数据是，对于optional字段，如果没有接收到optional字段，则设置为默认值。"></a>⑤．默认值。当在传递数据时，对于required数据类型，如果用户没有设置值，则使用默认值传递到对端。当接受数据是，对于optional字段，如果没有接收到optional字段，则设置为默认值。</h4><ul><li>关于import<br>protobuf 接口文件可以像C语言的h文件一个，分离为多个，在需要的时候通过 import导入需要对文件。其行为和C语言的#include或者java的import的行为大致相同。</li><li>关于package<br>避免名称冲突，可以给每个文件指定一个package名称，对于java解析为java中的包。对于C++则解析为名称空间。</li><li>关于message<br>支持嵌套消息，消息可以包含另一个消息作为其字段。也可以在消息内定义一个新的消息。</li><li>关于enum<br>枚举的定义和C++相同，但是有一些限制。<br>枚举值必须大于等于0的整数。<br>使用分号(;)分隔枚举变量而不是C++语言中的逗号(,)</li></ul><p><strong>参考：</strong></p><ul><li><a href="http://code.google.com/p/protobuf/" target="_blank" rel="noopener">官方文档</a></li><li><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-gpb/index.html" target="_blank" rel="noopener">Google Protocol Buffer 的使用和原理</a></li></ul>]]></content>
      
      <categories>
          
          <category> protobuf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> protobuf </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>springboot跨域</title>
      <link href="/2019/03/25/springboot%E8%B7%A8%E5%9F%9F/"/>
      <url>/2019/03/25/springboot%E8%B7%A8%E5%9F%9F/</url>
      <content type="html"><![CDATA[<p><center><img src="/2019/03/25/springboot跨域/cross.jpg" alt="cross"></center></p><h4 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h4><p>跨域，按照字面意思是跨到了另外的域；域不仅指的是不同的域名网站，也可以是同一个域名不同的端口号也算不同的域；以浏览器的角度来看，只要协议、域名、端口有任何一个不同，都被当作是不同的域。</p><h4 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h4><p>cors全称是<code>Cross-Origin Resource Sharing</code>,<code>跨域资源共享</code>，这是浏览器的标准，基本上现在市面上的浏览器都支持。</p><h4 id="跨域支持"><a href="#跨域支持" class="headerlink" title="跨域支持"></a>跨域支持</h4><p>目前有两种主流的跨域支持方式，一种是在反向代理层配置（如nginx），另一种是直接在后端（如Java）代码中支持。关于nginx层面的反向代理层配置详见<a href="https://segmentfault.com/a/1190000012550346" target="_blank" rel="noopener">Nginx配置跨域请求 Access-Control-Allow-Origin *</a>，本文章主要介绍在后端如何配置对跨域的支持，代码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.CorsFilter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局跨域设置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangjunfeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-03-21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalCorsConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        CorsConfiguration corsConfiguration = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        corsConfiguration.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">"origin"</span>);</span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">"content-type"</span>);</span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">"token"</span>);</span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">"text/plain charset=UTF-8"</span>);</span><br><span class="line">        corsConfiguration.addAllowedOrigin(<span class="string">"*"</span>);</span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">"POST"</span>);</span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">"GET"</span>);</span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">"OPTIONS"</span>);</span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">"DELETE"</span>);</span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">"PUT"</span>);</span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">"HEAD"</span>);</span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">"TRACE"</span>);</span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">"PATCH"</span>);</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">"/**"</span>, corsConfiguration);</span><br><span class="line">        FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean(<span class="keyword">new</span> CorsFilter(source));</span><br><span class="line">        <span class="comment">// 这个顺序很重要哦，为避免麻烦请设置在最前</span></span><br><span class="line">        bean.setOrder(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> springboot </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mvnw &amp;&amp; mvnw.cmd</title>
      <link href="/2019/03/19/mvnw-mvnw-cmd/"/>
      <url>/2019/03/19/mvnw-mvnw-cmd/</url>
      <content type="html"><![CDATA[<p>当创见一个Spring Boot的应用程序时，在程序的根目录下可以看到 <code>mvnw</code> 和 <code>mvnw.cmd</code> 这个两个文件，那么这两个文件各自的用途是什么呢？</p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><code>mvnw</code>全程是<code>maven wrapper</code>，它的原理是在<code>maven-wrapper.properties</code>文件中记录你要使用的<code>maven</code>版本，当用户执行<code>mvnw clean</code> 命令时，发现当前用户的<code>maven</code>版本和期望的版本不一致，那么就可以下载期望的版本，然后用期望的版本来执行<code>mvn</code>命令，比如<code>mvn clean</code>。<br><code>Maven</code>是一个常用的构建工具，但是<code>Maven</code>的版本和插件的配合并不是那么完美，有时候你需要切换到一个统一的版本，以保证所有东西正常工作。<code>Gradle</code>提供了一个<code>Wrapper</code>，可以很好解决<code>maven</code>版本切换的问题，并且更重要的是不需要预先安装<code>Gradle</code>。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">mvn -N io.takari:maven:wrapper</span><br><span class="line">[INFO] Scanning for projects...</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/io/takari/maven/maven-metadata.xml</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/io/takari/maven/maven-metadata.xml (662 B at 812 B/s)</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/io/takari/maven/0.7.4/maven-0.7.4.pom</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/io/takari/maven/0.7.4/maven-0.7.4.pom (2.3 kB at 4.9 kB/s)</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/io/takari/takari/27/takari-27.pom</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/io/takari/takari/27/takari-27.pom (14 kB at 24 kB/s)</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/io/takari/maven/0.7.4/maven-0.7.4.jar</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/io/takari/maven/0.7.4/maven-0.7.4.jar (9.0 kB at 24 kB/s)</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] -------------------------&lt; com.kiwi:kiwismart &gt;-------------------------</span><br><span class="line">[INFO] Building spring-boot-basic 0.0.1-SNAPSHOT</span><br><span class="line">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven:0.7.4:wrapper (default-cli) @ kiwismart ---</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/io/takari/maven-wrapper/0.5.3/maven-wrapper-0.5.3.pom</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/io/takari/maven-wrapper/0.5.3/maven-wrapper-0.5.3.pom (2.4 kB at 6.8 kB/s)</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/io/takari/takari-archiver/0.1.9/takari-archiver-0.1.9.pom</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/io/takari/takari-archiver/0.1.9/takari-archiver-0.1.9.pom (1.8 kB at 4.1 kB/s)</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/io/takari/takari/15/takari-15.pom</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/io/takari/takari/15/takari-15.pom (15 kB at 30 kB/s)</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/com/google/guava/guava/14.0.1/guava-14.0.1.pom</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/com/google/guava/guava/14.0.1/guava-14.0.1.pom (5.4 kB at 105 kB/s)</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/com/google/guava/guava-parent/14.0.1/guava-parent-14.0.1.pom</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/com/google/guava/guava-parent/14.0.1/guava-parent-14.0.1.pom (2.6 kB at 12 kB/s)</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/org/apache/commons/commons-compress/1.8.1/commons-compress-1.8.1.pom</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/org/apache/commons/commons-compress/1.8.1/commons-compress-1.8.1.pom (11 kB at 286 kB/s)</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/io/takari/graph/takari-graph/0.0.3/takari-graph-0.0.3.pom</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/io/takari/graph/takari-graph/0.0.3/takari-graph-0.0.3.pom (4.7 kB at 13 kB/s)</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/io/takari/takari/14/takari-14.pom</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/io/takari/takari/14/takari-14.pom (13 kB at 33 kB/s)</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/org/codehaus/plexus/plexus-utils/3.0.16/plexus-utils-3.0.16.pom</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/org/codehaus/plexus/plexus-utils/3.0.16/plexus-utils-3.0.16.pom (3.4 kB at 9.2 kB/s)</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/com/tinkerpop/blueprints/blueprints-core/2.6.0/blueprints-core-2.6.0.pom</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/com/tinkerpop/blueprints/blueprints-core/2.6.0/blueprints-core-2.6.0.pom (3.6 kB at 8.4 kB/s)</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/com/tinkerpop/blueprints/blueprints/2.6.0/blueprints-2.6.0.pom</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/com/tinkerpop/blueprints/blueprints/2.6.0/blueprints-2.6.0.pom (7.0 kB at 19 kB/s)</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/org/apache/maven/maven-model/3.2.3/maven-model-3.2.3.pom</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/org/apache/maven/maven-model/3.2.3/maven-model-3.2.3.pom (4.1 kB at 9.6 kB/s)</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/org/apache/maven/maven/3.2.3/maven-3.2.3.pom</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/org/apache/maven/maven/3.2.3/maven-3.2.3.pom (23 kB at 45 kB/s)</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/com/github/spullara/mustache/java/compiler/0.8.15/compiler-0.8.15.pom</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/com/github/spullara/mustache/java/compiler/0.8.15/compiler-0.8.15.pom (5.6 kB at 11 kB/s)</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/com/github/spullara/mustache/java/mustache.java/0.8.15/mustache.java-0.8.15.pom</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/com/github/spullara/mustache/java/mustache.java/0.8.15/mustache.java-0.8.15.pom (3.5 kB at 8.6 kB/s)</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/com/squareup/javapoet/1.0.0/javapoet-1.0.0.pom</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/com/squareup/javapoet/1.0.0/javapoet-1.0.0.pom (3.5 kB at 9.4 kB/s)</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/io/airlift/airline/0.6/airline-0.6.pom</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/io/airlift/airline/0.6/airline-0.6.pom (6.8 kB at 7.2 kB/s)</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/com/google/guava/guava/12.0/guava-12.0.pom</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/com/google/guava/guava/12.0/guava-12.0.pom (5.3 kB at 152 kB/s)</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/com/google/guava/guava-parent/12.0/guava-parent-12.0.pom</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/com/google/guava/guava-parent/12.0/guava-parent-12.0.pom (2.8 kB at 110 kB/s)</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/org/antlr/antlr4-runtime/4.5/antlr4-runtime-4.5.pom</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/org/antlr/antlr4-runtime/4.5/antlr4-runtime-4.5.pom (2.7 kB at 62 kB/s)</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/org/abego/treelayout/org.abego.treelayout.core/1.0.1/org.abego.treelayout.core-1.0.1.pom</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/org/abego/treelayout/org.abego.treelayout.core/1.0.1/org.abego.treelayout.core-1.0.1.pom (3.1 kB at 6.3 kB/s)</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/io/takari/maven-wrapper/0.5.3/maven-wrapper-0.5.3.jar</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/io/takari/takari-archiver/0.1.9/takari-archiver-0.1.9.jar</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/com/google/guava/guava/14.0.1/guava-14.0.1.jar</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/org/apache/commons/commons-compress/1.8.1/commons-compress-1.8.1.jar</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/io/takari/graph/takari-graph/0.0.3/takari-graph-0.0.3.jar</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/org/apache/commons/commons-compress/1.8.1/commons-compress-1.8.1.jar (366 kB at 2.0 MB/s)</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/com/tinkerpop/blueprints/blueprints-core/2.6.0/blueprints-core-2.6.0.jar</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/io/takari/maven-wrapper/0.5.3/maven-wrapper-0.5.3.jar (51 kB at 87 kB/s)</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/org/apache/maven/maven-model/3.2.3/maven-model-3.2.3.jar</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/io/takari/takari-archiver/0.1.9/takari-archiver-0.1.9.jar (41 kB at 58 kB/s)</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/com/github/spullara/mustache/java/compiler/0.8.15/compiler-0.8.15.jar</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/com/google/guava/guava/14.0.1/guava-14.0.1.jar (2.2 MB at 2.6 MB/s)</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/com/squareup/javapoet/1.0.0/javapoet-1.0.0.jar</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/io/takari/graph/takari-graph/0.0.3/takari-graph-0.0.3.jar (173 kB at 132 kB/s)</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/io/airlift/airline/0.6/airline-0.6.jar</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/org/apache/maven/maven-model/3.2.3/maven-model-3.2.3.jar (160 kB at 121 kB/s)</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/org/antlr/antlr4-runtime/4.5/antlr4-runtime-4.5.jar</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/com/github/spullara/mustache/java/compiler/0.8.15/compiler-0.8.15.jar (116 kB at 87 kB/s)</span><br><span class="line">Downloading from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/org/abego/treelayout/org.abego.treelayout.core/1.0.1/org.abego.treelayout.core-1.0.1.jar</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/org/abego/treelayout/org.abego.treelayout.core/1.0.1/org.abego.treelayout.core-1.0.1.jar (26 kB at 19 kB/s)</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/org/antlr/antlr4-runtime/4.5/antlr4-runtime-4.5.jar (374 kB at 250 kB/s)</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/com/tinkerpop/blueprints/blueprints-core/2.6.0/blueprints-core-2.6.0.jar (274 kB at 177 kB/s)</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/io/airlift/airline/0.6/airline-0.6.jar (87 kB at 50 kB/s)</span><br><span class="line">Downloaded from pp-nexus: http://nexus.pengpengla.com:8081/nexus/content/groups/public/com/squareup/javapoet/1.0.0/javapoet-1.0.0.jar (65 kB at 37 kB/s)</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] Maven Wrapper version 0.5.3 has been successfully set up for your project.</span><br><span class="line">[INFO] Using Apache Maven: 3.6.0</span><br><span class="line">[INFO] Repo URL in properties file: http://nexus.pengpengla.com:8081/nexus/content/groups/public/</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time: 13.001 s</span><br><span class="line">[INFO] Finished at: 2019-03-19T11:45:00+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> mvn -N io.takari:maven:wrapper -Dmaven=3.1.0 ##指定maven版本</span><br><span class="line">./mvnw clean install</span><br></pre></td></tr></table></figure><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p><code>mvnw</code>适用于Linux(bash),<code>mvnw.cmd</code> 适用于Windows环境</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mvn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Redis数据结构</title>
      <link href="/2019/03/15/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2019/03/15/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<p><center><img src="/2019/03/15/Redis数据结构/redis-data-structure-types.jpeg" alt=""></center><br>    如上图所示，Redis有5个基本数据结构(string、list、hash、set和zset)，它们是日常开发中使用频率非常高应用最为广泛的数据结构，把这5个数据结构都掌握了，面试的时候又可以给自己加分了。</p><h4 id="string"><a href="#string" class="headerlink" title="string"></a>string</h4><blockquote><p>Redis的字符串是动态字符串，是可以修改的字符串，内部结构实现上类似于Java的ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配，如图中所示，内部为当前字符串实际分配的空间capacity一般要高于实际字符串长度len。当字符串长度小于1M时，扩容都是加倍现有的空间，如果超过1M，扩容时一次只会多扩1M的空间。需要注意的是字符串最大长度为512M。</p></blockquote><h5 id="初始化字符串"><a href="#初始化字符串" class="headerlink" title="初始化字符串"></a>初始化字符串</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">set</span> today:news helloword</span></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h5 id="获取字符串的内容"><a href="#获取字符串的内容" class="headerlink" title="获取字符串的内容"></a>获取字符串的内容</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> get today:news</span></span><br><span class="line">"helloword"</span><br></pre></td></tr></table></figure><h5 id="获取字符串的长度"><a href="#获取字符串的长度" class="headerlink" title="获取字符串的长度"></a>获取字符串的长度</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> strlen today:news</span></span><br><span class="line">(integer) 9</span><br></pre></td></tr></table></figure><h5 id="获取子串"><a href="#获取子串" class="headerlink" title="获取子串"></a>获取子串</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> getrange today:news 0 5</span></span><br><span class="line">"hellow"</span><br></pre></td></tr></table></figure><h5 id="覆盖子串"><a href="#覆盖子串" class="headerlink" title="覆盖子串"></a>覆盖子串</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> setrange today:news 5 hi</span></span><br><span class="line">(integer) 9</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> get today:news</span></span><br><span class="line">"hellohird"</span><br></pre></td></tr></table></figure><h5 id="追加子串"><a href="#追加子串" class="headerlink" title="追加子串"></a>追加子串</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">  append today:news ^_^</span></span><br><span class="line">(integer) 12</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> get today:news</span></span><br><span class="line">"hellohird^_^"</span><br></pre></td></tr></table></figure><h5 id="过期和删除"><a href="#过期和删除" class="headerlink" title="过期和删除"></a>过期和删除</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> expire today:news 60000 <span class="comment">#设置过期时间</span></span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  ttl today:news <span class="comment"># 查看剩余过期时间</span></span></span><br><span class="line">(integer) 59972</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> del today:news <span class="comment"># 删除key</span></span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> get  today:news <span class="comment"># 检索key</span></span></span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><h5 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h5><p>如果字符串的内容是一个整数，那么还可以将字符串当成计数器来使用。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">  <span class="built_in">set</span> numbers 100</span></span><br><span class="line">OK</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> incrby numbers 20</span></span><br><span class="line">(integer) 120</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> decrby numbers 100</span></span><br><span class="line">(integer) 20</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> incr numbers <span class="comment">#等同于 incrby numbers 1</span></span></span><br><span class="line">(integer) 21</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  decr numbers <span class="comment"># 等同于 decrby numbers 1</span></span></span><br><span class="line">(integer) 20</span><br></pre></td></tr></table></figure></p><p><strong>计数器是有范围的，它不能超过Long.Max，不能低于Long.MIN</strong></p><h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><blockquote><p>Redis将列表数据结构命名为list而不是array，是因为列表的存储结构用的是链表而不是数组，而且链表还是双向链表。因为它是链表，所以随机定位性能较弱，首尾插入删除性能较优。如果list的列表长度很长，使用时我们一定要关注链表相关操作的时间复杂度。</p></blockquote><h5 id="负下标"><a href="#负下标" class="headerlink" title="负下标"></a>负下标</h5><p>链表元素的位置使用自然数0,1,2,….n-1表示，还可以使用负数-1,-2,…-n来表示，-1表示「倒数第一」，-2表示「倒数第二」，那么-n就表示第一个元素，对应的下标为0。</p><h5 id="队列／堆栈"><a href="#队列／堆栈" class="headerlink" title="队列／堆栈"></a>队列／堆栈</h5><p>链表可以从表头和表尾追加和移除元素，结合使用rpush/rpop/lpush/lpop四条指令，可以将链表作为队列或堆栈使用，左向右向进行都可以<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> rpush queue go <span class="comment">#右进左出</span></span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> rpush queue java python</span></span><br><span class="line">(integer) 3</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> lpop queue</span></span><br><span class="line">"go"</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> lpop queue</span></span><br><span class="line">"java"</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> lpop queue</span></span><br><span class="line">"python"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 左进右出</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> lpush queue go java python</span></span><br><span class="line">(integer) 3</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> rpop queue</span></span><br><span class="line">"go"</span><br><span class="line">...</span><br><span class="line"><span class="meta">#</span><span class="bash"> 右进右出</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> rpush queue go java python</span></span><br><span class="line">(integer) 3</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> rpop queue </span></span><br><span class="line">"python"</span><br><span class="line">...</span><br><span class="line"><span class="meta">#</span><span class="bash"> 左进左出</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> lpush queue go java python</span></span><br><span class="line">(integer) 3</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> lpop queue</span></span><br><span class="line">"python"</span><br></pre></td></tr></table></figure></p><h5 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h5><p>使用llen指令获取链表长度<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> rpush queue go java python</span></span><br><span class="line">(integer) 3</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> llen queue</span></span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure></p><h5 id="随机读"><a href="#随机读" class="headerlink" title="随机读"></a>随机读</h5><p>可以使用lindex指令访问指定位置的元素，使用lrange指令来获取链表子元素列表，提供start和end下标参数<br>使用lrange获取全部元素时，需要提供end_index，如果没有负下标，就需要首先通过llen指令获取长度，才可以得出end_index的值，有了负下标，使用-1代替end_index就可以达到相同的效果。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> rpush queue go java python</span></span><br><span class="line">(integer) 3</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> lindex queue 1</span></span><br><span class="line">"java"</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> lrange queue 0 2</span></span><br><span class="line">1) "go"</span><br><span class="line">2) "java"</span><br><span class="line">3) "python"</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> lrange queue 0 -1  <span class="comment"># -1表示倒数第一</span></span></span><br><span class="line">1) "go"</span><br><span class="line">2) "java"</span><br><span class="line">3) "python"</span><br></pre></td></tr></table></figure></p><h5 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h5><p>使用lset指令在指定位置修改元素<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> rpush queue go java python</span></span><br><span class="line">(integer) 3</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> lset queue 1 javascript</span></span><br><span class="line">OK</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> lrange queue 0 -1</span></span><br><span class="line">1) "go"</span><br><span class="line">2) "javascript"</span><br><span class="line">3) "python"</span><br></pre></td></tr></table></figure></p><h5 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h5><p>使用linsert指令在列表的中间位置插入元素，有经验的程序员都知道在插入元素时，我们经常搞不清楚是在指定位置的前面插入还是后面插入，所以antirez在linsert指令里增加了方向参数before/after来显示指示前置和后置插入。不过让人意想不到的是linsert指令并不是通过指定位置来插入，而是通过指定具体的值。这是因为在分布式环境下，列表的元素总是频繁变动的，意味着上一时刻计算的元素下标在下一时刻可能就不是你所期望的下标了。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> rpush queue go java python</span></span><br><span class="line">(integer) 3</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> linsert queue before java ruby</span></span><br><span class="line">(integer) 4</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> lrange queue 0 -1</span></span><br><span class="line">1) "go"</span><br><span class="line">2) "ruby"</span><br><span class="line">3) "java"</span><br><span class="line">4) "python"</span><br></pre></td></tr></table></figure></p><h5 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h5><p>列表的删除操作也不是通过指定下标来确定元素的，你需要指定删除的最大个数以及元素的值<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> rpush queue go java python</span></span><br><span class="line">(integer) 3</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> lrem queue 1 java</span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> lrange queue 0 -1</span></span><br><span class="line">1) "go"</span><br><span class="line">2) "python"</span><br></pre></td></tr></table></figure></p><h5 id="定长列表"><a href="#定长列表" class="headerlink" title="定长列表"></a>定长列表</h5><p>在实际应用场景中，我们有时候会遇到「定长列表」的需求。比如要以走马灯的形式实时显示中奖用户名列表，因为中奖用户实在太多，能显示的数量一般不超过100条，那么这里就会使用到定长列表。维持定长列表的指令是ltrim，需要提供两个参数start和end，表示需要保留列表的下标范围，范围之外的所有元素都将被移除。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> rpush quene go java python javascript ruby erlang rust cpp</span></span><br><span class="line">(integer) 8</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ltrim quene -3 -1</span></span><br><span class="line">OK</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> lrange quene 0 -1</span></span><br><span class="line">1) "erlang"</span><br><span class="line">2) "rust"</span><br><span class="line">3) "cpp"</span><br></pre></td></tr></table></figure></p><h5 id="快速列表"><a href="#快速列表" class="headerlink" title="快速列表"></a>快速列表</h5><p>如果再深入一点，你会发现Redis底层存储的还不是一个简单的linkedlist，而是称之为快速链表quicklist的一个结构。首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是ziplist，也即是压缩列表。它将所有的元素紧挨着一起存储，分配的是一块连续的内存。当数据量比较多的时候才会改成quicklist。因为普通的链表需要的附加指针空间太大，会比较浪费空间。比如这个列表里存的只是int类型的数据，结构上还需要两个额外的指针prev和next。所以Redis将链表和ziplist结合起来组成了quicklist。也就是将多个ziplist使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。</p><h4 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h4><blockquote><p>哈希等价于Java语言的HashMap或者是Python语言的dict，在实现结构上它使用二维结构，第一维是数组，第二维是链表，hash的内容key和value存放在链表中，数组里存放的是链表的头指针。通过key查找元素时，先计算key的hashcode，然后用hashcode对数组的长度进行取模定位到链表的表头，再对链表进行遍历获取到相应的value值，链表的作用就是用来将产生了「hash碰撞」的元素串起来。Java语言开发者会感到非常熟悉，因为这样的结构和HashMap是没有区别的。哈希的第一维数组的长度也是2^n。</p></blockquote><h5 id="增加元素"><a href="#增加元素" class="headerlink" title="增加元素"></a>增加元素</h5><p>可以使用hset一次增加一个键值对，也可以使用hmset一次增加多个键值对<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> hset sets go fast</span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> hmset sets java fast python slow</span></span><br><span class="line">OK</span><br></pre></td></tr></table></figure></p><h5 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h5><p>可以通过hget定位具体key对应的value，可以通过hmget获取多个key对应的value，可以使用hgetall获取所有的键值对，可以使用hkeys和hvals分别获取所有的key列表和value列表。这些操作和Java语言的Map接口是类似的。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> hmset sets go fast java fast python slow</span></span><br><span class="line">OK</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> hget sets go</span></span><br><span class="line">"fast"</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> hmget sets go python</span></span><br><span class="line">1) "fast"</span><br><span class="line">2) "slow"</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> hgetall sets</span></span><br><span class="line">1) "go"</span><br><span class="line">2) "fast"</span><br><span class="line">3) "java"</span><br><span class="line">4) "fast"</span><br><span class="line">5) "python"</span><br><span class="line">6) "slow"</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> hkeys sets</span></span><br><span class="line">1) "go"</span><br><span class="line">2) "java"</span><br><span class="line">3) "python"</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> hvals sets</span></span><br><span class="line">1) "fast"</span><br><span class="line">2) "fast"</span><br><span class="line">3) "slow"</span><br></pre></td></tr></table></figure></p><h5 id="删除元素-1"><a href="#删除元素-1" class="headerlink" title="删除元素"></a>删除元素</h5><p>可以使用hdel删除指定key，hdel支持同时删除多个key<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> hmset sets go fast java fast python slow</span></span><br><span class="line">OK</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> hdel sets go</span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> hdel sets java python</span></span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure></p><h5 id="判断元素是否存在"><a href="#判断元素是否存在" class="headerlink" title="判断元素是否存在"></a>判断元素是否存在</h5><p>通常我们使用hget获得key对应的value是否为空就直到对应的元素是否存在了，不过如果value的字符串长度特别大，通过这种方式来判断元素存在与否就略显浪费，这时可以使用hexists指令。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> hmset sets go fast java fast python slow</span></span><br><span class="line">OK</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> hexists sets go</span></span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure></p><h5 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h5><p>当hash内部的元素比较拥挤时(hash碰撞比较频繁)，就需要进行扩容。扩容需要申请新的两倍大小的数组，然后将所有的键值对重新分配到新的数组下标对应的链表中(rehash)。如果hash结构很大，比如有上百万个键值对，那么一次完整rehash的过程就会耗时很长。这对于单线程的Redis里来说有点压力山大。所以Redis采用了渐进式rehash的方案。它会同时保留两个新旧hash结构，在后续的定时任务以及hash结构的读写指令中将旧结构的元素逐渐迁移到新的结构中。这样就可以避免因扩容导致的线程卡顿现象。</p><h5 id="缩容"><a href="#缩容" class="headerlink" title="缩容"></a>缩容</h5><p>Redis的hash结构不但有扩容还有缩容，从这一点出发，它要比Java的HashMap要厉害一些，Java的HashMap只有扩容。缩容的原理和扩容是一致的，只不过新的数组大小要比旧数组小一倍。</p><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><blockquote><p>Java程序员都知道HashSet的内部实现使用的是HashMap，只不过所有的value都指向同一个对象。Redis的set结构也是一样，它的内部也使用hash结构，所有的value都指向同一个内部值。</p></blockquote><h5 id="增加元素-1"><a href="#增加元素-1" class="headerlink" title="增加元素"></a>增加元素</h5><p>可以一次增加多个元素<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> sadd keys4sets go java python</span></span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure></p><h5 id="读取元素"><a href="#读取元素" class="headerlink" title="读取元素"></a>读取元素</h5><p>使用smembers列出所有元素，使用scard获取集合长度，使用srandmember获取随机count个元素，如果不提供count参数，默认为1<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> sadd keys4sets go java python</span></span><br><span class="line">(integer) 3</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> smembers keys4sets</span></span><br><span class="line">1) "java"</span><br><span class="line">2) "python"</span><br><span class="line">3) "go"</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> scard keys4sets</span></span><br><span class="line">(integer) 3</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> srandmember keys4sets</span></span><br><span class="line">"java"</span><br></pre></td></tr></table></figure></p><h5 id="删除元素-2"><a href="#删除元素-2" class="headerlink" title="删除元素"></a>删除元素</h5><p>使用srem删除一到多个元素，使用spop删除随机一个元素<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> sadd keys4sets go java python rust erlang</span></span><br><span class="line">(integer) 5</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> srem keys4sets go java</span></span><br><span class="line">(integer) 2</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> spop keys4sets</span></span><br><span class="line">"erlang"</span><br></pre></td></tr></table></figure></p><h5 id="判断元素是否存在-1"><a href="#判断元素是否存在-1" class="headerlink" title="判断元素是否存在"></a>判断元素是否存在</h5><p>使用sismember指令，只能接收单个元素<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> sadd keys4sets go java python rust erlang</span></span><br><span class="line">(integer) 5</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> sismember keys4sets rust</span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> sismember keys4sets javascript</span></span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure></p><h5 id="sortedset"><a href="#sortedset" class="headerlink" title="sortedset"></a>sortedset</h5><p>SortedSet(zset)是Redis提供的一个非常特别的数据结构，一方面它等价于Java的数据结构Map&lt;String, Double&gt;，可以给每一个元素value赋予一个权重score，另一方面它又类似于TreeSet，内部的元素会按照权重score进行排序，可以得到每个元素的名次，还可以通过score的范围来获取元素的列表。<br>zset底层实现使用了两个数据结构，第一个是hash，第二个是跳跃列表，hash的作用就是关联元素value和权重score，保障元素value的唯一性，可以通过元素value找到相应的score值。跳跃列表的目的在于给元素value排序，根据score的范围获取元素列表。</p><h5 id="增加元素-2"><a href="#增加元素-2" class="headerlink" title="增加元素"></a>增加元素</h5><p>通过zadd指令可以增加一到多个value/score对，score放在前面<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> zadd key4Sortedset 4.0 python</span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> zadd key4Sortedset 4.0 java 1.0 go</span></span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure></p><h5 id="长度-1"><a href="#长度-1" class="headerlink" title="长度"></a>长度</h5><p>通过指令zcard可以得到zset的元素个数<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> zcard key4Sortedset</span></span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure></p><h5 id="删除元素-3"><a href="#删除元素-3" class="headerlink" title="删除元素"></a>删除元素</h5><p>通过指令zrem可以删除zset中的元素，可以一次删除多个<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> zrem key4Sortedset go python</span></span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure></p><h5 id="获取排名和分数"><a href="#获取排名和分数" class="headerlink" title="获取排名和分数"></a>获取排名和分数</h5><p>通过zscore指令获取指定元素的权重，通过zrank指令获取指定元素的正向排名，通过zrevrank指令获取指定元素的反向排名[倒数第一名]。正向是由小到大，负向是由大到小。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> zscore key4Sortedset python</span></span><br><span class="line">"5"</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> zrank key4Sortedset go  <span class="comment"># 分数低的排名考前，rank值小</span></span></span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> zrank key4Sortedset java</span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> zrank key4Sortedset python</span></span><br><span class="line">(integer) 2</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> zrevrank key4Sortedset python</span></span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure></p><h5 id="根据排名范围获取元素列表"><a href="#根据排名范围获取元素列表" class="headerlink" title="根据排名范围获取元素列表"></a>根据排名范围获取元素列表</h5><p>通过zrange指令指定排名范围参数获取对应的元素列表，携带withscores参数可以一并获取元素的权重。通过zrevrange指令按负向排名获取元素列表[倒数]。正向是由小到大，负向是由大到小。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> zrange key4Sortedset 0 -1  <span class="comment"># 获取所有元素</span></span></span><br><span class="line">1) "go"</span><br><span class="line">2) "java"</span><br><span class="line">3) "python"</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> zrange key4Sortedset 0 -1 withscores</span></span><br><span class="line">1) "go"</span><br><span class="line">2) "1"</span><br><span class="line">3) "java"</span><br><span class="line">4) "4"</span><br><span class="line">5) "python"</span><br><span class="line">6) "5"</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> zrevrange key4Sortedset 0 -1 withscores</span></span><br><span class="line">1) "python"</span><br><span class="line">2) "5"</span><br><span class="line">3) "java"</span><br><span class="line">4) "4"</span><br><span class="line">5) "go"</span><br><span class="line">6) "1"</span><br></pre></td></tr></table></figure></p><h5 id="根据score范围获取列表"><a href="#根据score范围获取列表" class="headerlink" title="根据score范围获取列表"></a>根据score范围获取列表</h5><p>通过zrangebyscore指令指定score范围获取对应的元素列表。通过zrevrangebyscore指令获取倒排元素列表。正向是由小到大，负向是由大到小。参数-inf表示负无穷，+inf表示正无穷。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> zrangebyscore key4Sortedset 0 5</span></span><br><span class="line">1) "go"</span><br><span class="line">2) "java"</span><br><span class="line">3) "python"</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> zrangebyscore key4Sortedset -inf +inf withscores</span></span><br><span class="line">1) "go"</span><br><span class="line">2) "1"</span><br><span class="line">3) "java"</span><br><span class="line">4) "4"</span><br><span class="line">5) "python"</span><br><span class="line">6) "5"</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> zrevrangebyscore key4Sortedset +inf -inf withscores  <span class="comment"># 注意正负反过来了</span></span></span><br><span class="line">1) "python"</span><br><span class="line">2) "5"</span><br><span class="line">3) "java"</span><br><span class="line">4) "4"</span><br><span class="line">5) "go"</span><br><span class="line">6) "1"</span><br></pre></td></tr></table></figure></p><h5 id="根据范围移除元素列表"><a href="#根据范围移除元素列表" class="headerlink" title="根据范围移除元素列表"></a>根据范围移除元素列表</h5><p>可以通过排名范围，也可以通过score范围来一次性移除多个元素<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> zremrangebyrank key4Sortedset 0 1</span></span><br><span class="line">(integer) 2  # 删掉了2个元素</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> zadd key4Sortedset 4.0 java 1.0 go</span></span><br><span class="line">(integer) 2</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> zremrangebyscore key4Sortedset -inf 4</span></span><br><span class="line">(integer) 2</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> zrange key4Sortedset 0 -1</span></span><br><span class="line">1) "python"</span><br></pre></td></tr></table></figure></p><h5 id="跳跃列表"><a href="#跳跃列表" class="headerlink" title="跳跃列表"></a>跳跃列表</h5><p> zset内部的排序功能是通过「跳跃列表」数据结构来实现的，它的结构非常特殊，也比较复杂。这一块的内容深度读者要有心理准备。<br> 因为zset要支持随机的插入和删除，所以它不好使用数组来表示。我们先看一个普通的链表结构。</p><p><center><img src="/2019/03/15/Redis数据结构/164c5a90442cd51a" alt=""></center><br>我们需要这个链表按照score值进行排序。这意味着当有新元素需要插入时，需要定位到特定位置的插入点，这样才可以继续保证链表是有序的。通常我们会通过二分查找来找到插入点，但是二分查找的对象必须是数组，只有数组才可以支持快速位置定位，链表做不到，那该怎么办？<br>想想一个创业公司，刚开始只有几个人，团队成员之间人人平等，都是联合创始人。随着公司的成长，人数渐渐变多，团队沟通成本随之增加。这时候就会引入组长制，对团队进行划分。每个团队会有一个组长。开会的时候分团队进行，多个组长之间还会有自己的会议安排。公司规模进一步扩展，需要再增加一个层级——部门，每个部门会从组长列表中推选出一个代表来作为部长。部长们之间还会有自己的高层会议安排。<br>跳跃列表就是类似于这种层级制，最下面一层所有的元素都会串起来。然后每隔几个元素挑选出一个代表来，再将这几个代表使用另外一级指针串起来。然后在这些代表里再挑出二级代表，再串起来。最终就形成了金字塔结构。<br>想想你老家在世界地图中的位置：亚洲–&gt;中国-&gt;安徽省-&gt;安庆市-&gt;枞阳县-&gt;汤沟镇-&gt;田间村-&gt;xxxx号，也是这样一个类似的结构。</p><p><center><img src="/2019/03/15/Redis数据结构/164c5bb13c6da230" alt=""></center><br>「跳跃列表」之所以「跳跃」，是因为内部的元素可能「身兼数职」，比如上图中间的这个元素，同时处于L0、L1和L2层，可以快速在不同层次之间进行「跳跃」。<br>定位插入点时，先在顶层进行定位，然后下潜到下一级定位，一直下潜到最底层找到合适的位置，将新元素插进去。你也许会问那新插入的元素如何才有机会「身兼数职」呢？<br>跳跃列表采取一个随机策略来决定新元素可以兼职到第几层，首先L0层肯定是100%了，L1层只有50%的概率，L2层只有25%的概率，L3层只有12.5%的概率，一直随机到最顶层L31层。绝大多数元素都过不了几层，只有极少数元素可以深入到顶层。列表中的元素越多，能够深入的层次就越深，能进入到顶层的概率就会越大。</p>]]></content>
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS 7.0 关闭firewalld防火墙指令 及更换Iptables防火墙</title>
      <link href="/2019/03/14/CentOS%207.0%20%E5%85%B3%E9%97%ADfirewalld%E9%98%B2%E7%81%AB%E5%A2%99%E6%8C%87%E4%BB%A4%20%E5%8F%8A%E6%9B%B4%E6%8D%A2Iptables%E9%98%B2%E7%81%AB%E5%A2%99/"/>
      <url>/2019/03/14/CentOS%207.0%20%E5%85%B3%E9%97%ADfirewalld%E9%98%B2%E7%81%AB%E5%A2%99%E6%8C%87%E4%BB%A4%20%E5%8F%8A%E6%9B%B4%E6%8D%A2Iptables%E9%98%B2%E7%81%AB%E5%A2%99/</url>
      <content type="html"><![CDATA[<h4 id="Disable-Firewalld-Service"><a href="#Disable-Firewalld-Service" class="headerlink" title="Disable Firewalld Service."></a>Disable Firewalld Service.</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl mask firewalld</span><br></pre></td></tr></table></figure><h4 id="Stop-Firewalld-Service"><a href="#Stop-Firewalld-Service" class="headerlink" title="Stop Firewalld Service."></a>Stop Firewalld Service.</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><h4 id="Install-iptables-service-related-packages"><a href="#Install-iptables-service-related-packages" class="headerlink" title="Install iptables service related packages."></a>Install iptables service related packages.</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install iptables-services</span><br></pre></td></tr></table></figure><h4 id="Make-sure-service-starts-at-boot"><a href="#Make-sure-service-starts-at-boot" class="headerlink" title="Make sure service starts at boot:"></a>Make sure service starts at boot:</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable iptables</span><br></pre></td></tr></table></figure><h4 id="Now-Finally-Let’s-start-the-iptables-services"><a href="#Now-Finally-Let’s-start-the-iptables-services" class="headerlink" title="Now, Finally Let’s start the iptables services."></a>Now, Finally Let’s start the iptables services.</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start iptables</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> 防火墙 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mac使用技巧总结</title>
      <link href="/2018/11/01/Mac%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/"/>
      <url>/2018/11/01/Mac%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p><center><img src="/2018/11/01/Mac使用技巧总结/2018-MacBook-Pro-Logic-800x514.jpg" alt=""></center></p><h4 id="显示-隐藏文件夹"><a href="#显示-隐藏文件夹" class="headerlink" title="显示|隐藏文件夹"></a>显示|隐藏文件夹</h4><h5 id="隐藏文件夹-opt"><a href="#隐藏文件夹-opt" class="headerlink" title="隐藏文件夹/opt"></a>隐藏文件夹/opt</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chflags hidden /opt</span><br></pre></td></tr></table></figure><h5 id="显示文件夹-opt"><a href="#显示文件夹-opt" class="headerlink" title="显示文件夹/opt"></a>显示文件夹/opt</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chflags nohidden /opt</span><br></pre></td></tr></table></figure><h4 id="创建软链"><a href="#创建软链" class="headerlink" title="创建软链"></a>创建软链</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alias ll='ls -l'</span><br><span class="line">alias la='ls -al'</span><br></pre></td></tr></table></figure><h4 id="安装软件显示所有来源"><a href="#安装软件显示所有来源" class="headerlink" title="安装软件显示所有来源"></a>安装软件显示所有来源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo spctl --master-disable</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTTP、TCP、UDP、Socket、HTTPS区别</title>
      <link href="/2018/10/11/HTTP%E3%80%81TCP%E3%80%81UDP%E3%80%81Socket%E3%80%81HTTPS%E5%8C%BA%E5%88%AB/"/>
      <url>/2018/10/11/HTTP%E3%80%81TCP%E3%80%81UDP%E3%80%81Socket%E3%80%81HTTPS%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<center><img src="was-ist-http-t.jpg" alt=""></center><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li><code>TCP/IP</code>是个协议组，可分为四个层次：网络接口层、网络层、传输层和应用层，如下图所示<center><img src="/2018/10/11/HTTP、TCP、UDP、Socket、HTTPS区别/20170328194734804.png" alt=""></center></li><li>在网络层有<code>IP协议</code>、<code>ICMP协议</code>、<code>ARP协议</code>、<code>RARP协议</code>和<code>BOOTP协议</code>。</li><li>在传输层中有<code>TCP协议</code>与<code>UDP协议</code>。</li><li>在应用层有<code>HTTP</code>,<code>FTP</code>、<code>TELNET</code>、<code>SMTP</code>、<code>DNS</code>等协议。</li></ul><h3 id="详细介绍"><a href="#详细介绍" class="headerlink" title="详细介绍"></a>详细介绍</h3><h4 id="HTTP-HyperText-Transfer-Protocal"><a href="#HTTP-HyperText-Transfer-Protocal" class="headerlink" title="HTTP(HyperText Transfer Protocal)"></a>HTTP(HyperText Transfer Protocal)</h4><p><code>HTTP</code>(<code>HyperText Transfer Protocal</code>),超文本传输协议，HTTP连接最显著的特点是客户端发送的每次请求都需要服务器回送响应，在请求结束后，会主动释放连接。从建立连接到关闭连接的过程称为”一次连接”。</p><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul><li>基于应用级的接口使用方便</li><li>程序员开发水平要求不高，容错性强</li></ul><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul><li>传输速度慢，数据包大（<code>Http协议中包含辅助应用信息</code>）</li><li>如实时交互，服务器性能压力大。</li><li>数据传输安全性差</li></ul><h5 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h5><p>基于http协议传输方式适合于对传输速度，安全性要求不是很高，且需要快速开发的应用。如公司OA系统，互联网服务等。</p><h4 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h4><p><code>HTTPS</code>(<code>Secure Hypertext Transfer Protocol</code>),安全超文本传输协议，它是一个安全通信通道。<code>HTTPS</code>是<code>HTTP over SSL/TLS</code>，<code>HTTP</code>是应用层协议，<code>TCP</code>是传输层协议，在应用层和传输层之间，增加了一个安全套接层<code>SSL/TLS</code>：</p><blockquote><ul><li><code>SSL</code> (<code>Secure Socket Layer</code>，安全套接字层)</li><li><code>TLS</code> (<code>Transport Layer Security</code>，传输层安全协议)</li><li><code>SSL</code>使用<code>40</code>位关键字作为<code>RC4</code>流加密算法</li></ul></blockquote><h4 id="Https和Http区别"><a href="#Https和Http区别" class="headerlink" title="Https和Http区别"></a>Https和Http区别</h4><ul><li>https协议需要到<code>CA</code>申请证书。</li><li>http是超文本传输协议，信息是明文传输；https 则是具有安全性的ssl加密传输协议。</li><li>http和https使用的是完全不同的连接方式，用的端口也不一样，前者是<code>80</code>，后者是<code>443</code>。</li><li>http的连接很简单，是无状态的；HTTPS协议是由<code>SSL+HTTP</code>协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</li></ul><h4 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h4><p>传送控制协议(<code>Transmission Control Protocol</code>)</p><h4 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h4><p>用户数据报协议 （<code>UDP：User Datagram Protocol</code>） </p><h4 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h4><p>这是为了实现以上的通信过程而建立成来的通信管道，其真实的代表是客户端和服务器端的一个通信进程，双方进程通过socket进行通信，而通信的规则采用指定的协议。<code>socket只是一种连接模式，不是协议</code>，socket是对TCP/IP协议的封装，Socket本身并不是协议，而是一个<code>调用接口（API）</code>，通过Socket，我们才能使用TCP/IP协议。tcp、udp，简单的说（虽然不准确）是两个最基本的协议,很多其它协议都是基于这两个协议如，http就是基于tcp的，用socket可以创建tcp连接，也可以创建udp连接，这意味着，用socket可以创建任何协议的连接，因为其它协议都是基于此的。</p><h5 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h5><ul><li>传输数据为字节级，传输数据可自定义，数据量小（对于手机应用讲：费用低）</li><li>传输数据时间短，性能高</li><li>适合于客户端和服务器端之间信息实时交互</li><li>可以加密,数据安全性强</li></ul><h5 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h5><ul><li>需对传输的数据进行解析，转化成应用级的数据</li><li>对开发人员的开发水平要求高</li><li>相对于Http协议传输，增加了开发量</li></ul><h5 id="适用范围-1"><a href="#适用范围-1" class="headerlink" title="适用范围"></a>适用范围</h5><p>Socket传输方式适合于对传输速度，安全性，实时交互，费用等要求高的应用中，如网络游戏，手机应用，银行内部交互等</p><p><strong>参考资料</strong></p><ul><li><a href="https://blog.csdn.net/WHB20081815/article/details/67640804" target="_blank" rel="noopener">HTTP、TCP、UDP，Socket，HTTPS</a></li></ul>]]></content>
      
      <categories>
          
          <category> http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> tcp </tag>
            
            <tag> udp </tag>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mvn常用命令大全</title>
      <link href="/2018/10/10/mvn%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
      <url>/2018/10/10/mvn%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
      <content type="html"><![CDATA[<p><center><img src="/2018/10/10/mvn常用命令大全/maven-logo.jpg" alt=""></center><br>maven命令除了常用的几个，大部分经常记不住，整理一下，方便查询。<br>maven 命令的格式为 mvn [plugin-name]:[goal-name]，可以接受的参数如下：</p><pre><code>-D 指定参数，如 -Dmaven.test.skip=true 跳过单元测试；-P 指定 Profile 配置，可以用于区分环境；-e 显示maven运行出错的信息；-o 离线执行命令,即不去远程仓库更新包；-X 显示maven允许的debug信息；-U 强制去远程更新snapshot的插件或依赖，默认每天只更新一次。</code></pre><h4 id="项目相关"><a href="#项目相关" class="headerlink" title="项目相关"></a>项目相关</h4><ol><li><p>mvn archetype:create 创建maven项目</p><blockquote><p>创建maven项目：mvn archetype:create<br> 指定 group： -DgroupId=packageName<br> 指定 artifact：-DartifactId=projectName<br> 创建web项目：-DarchetypeArtifactId=maven-archetype-webapp</p></blockquote></li><li>mvn validate<br> 验证项目是否正确</li><li>mvn package<br> maven 打包</li><li>mvn jar:jar<br> 只打jar包</li><li>mvn source:jar<br> 生成源码jar包</li><li>mvn generate-sources<br> 产生应用需要的任何额外的源代码</li><li>mvn compile<br> 编译源代码</li><li>mvn test-compile<br> 译测试代码</li><li>mvn test<br> 运行测试</li><li>mvn verify<br>运行检查</li><li>mvn clean<br>清理maven项目</li><li>mvn eclipse:eclipse<br>生成eclipse项目</li><li>mvn eclipse:clean<br>清理eclipse配置</li><li>mvn idea:idea<br>生成idea项目</li><li>mvn install<br>安装项目到本地仓库</li><li>mvn:deploy<br>发布项目到远程仓库</li><li>mvn integration-test<br>在集成测试可以运行的环境中处理和发布包</li><li>mvn dependency:tree<br>显示maven依赖树</li><li>mvn dependency:list<br>显示maven依赖列表</li><li>mvn dependency:sources<br>下载依赖包的源码</li><li>mvn install:install-file -DgroupId=packageName -DartifactId=projectName -Dversion=version -Dpackaging=jar -Dfile=path<br>安装本地jar到本地仓库</li></ol><h4 id="web相关命令"><a href="#web相关命令" class="headerlink" title="web相关命令"></a>web相关命令</h4><ol><li>mvn tomcat:run<br> 启动tomcat</li><li>mvn jetty:run<br> 启动jetty</li><li>mvn tomcat:deploy<br> 运行打包部署</li><li>mvn tomcat:undeploy<br> 撤销部署</li><li>mvn tomcat:start<br> 启动web应用：</li><li>mvn tomcat:stop<br> 停止web应用</li><li>mvn tomcat:redeploy<br> 重新部署</li><li>mvn war:exploded tomcat:exploded<br> 署展开的war文件</li></ol><p><strong>参考资料</strong></p><ul><li><a href="https://zhuanlan.zhihu.com/p/29208926" target="_blank" rel="noopener">30 个常用 Maven 命令</a></li></ul>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mvn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java开发规范</title>
      <link href="/2018/10/08/Java%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
      <url>/2018/10/08/Java%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<center><img src="/2018/10/08/Java开发规范/images.jpeg" alt=""></center><p>前言</p><p>本文章是将网上PDF版本的<a href="https://github.com/alibaba/p3c/blob/master/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E8%AF%A6%E5%B0%BD%E7%89%88%EF%BC%89.pdf" target="_blank" rel="noopener">Java开发规范</a>转换成的<a href="Java开发规范.md1">Markdown版本</a></p><p>Java 开发手册</p><table><thead><tr><th>版本号</th><th>作者</th><th>日期</th><th>备注</th></tr></thead><tbody><tr><td>1.4.0</td><td>阿里巴巴集团技术团队</td><td>2018. 5. 20</td><td>增加设计规约（详尽版）</td></tr><tr><td>1.4.1</td><td>王俊峰</td><td>2018. 10. 8</td><td>pdf2markdown</td></tr><tr><td>1.4.2</td><td>王俊峰</td><td>2018. 10. 10</td><td>去掉版本历史</td></tr></tbody></table><h2 id="一、编程规约"><a href="#一、编程规约" class="headerlink" title="一、编程规约"></a>一、编程规约</h2><h3 id="一-命名风格"><a href="#一-命名风格" class="headerlink" title="(一) 命名风格"></a>(一) 命名风格</h3><ol><li><p><strong>【强制】</strong>代码中的命名均不能以<strong>下划线或美元符号</strong>开始，也不能以<strong>下划线或美元符号</strong> 结束。</p><p> 反例：<code>_name  __name  $name  name_  name$  name__</code></p></li><li><p><strong>【强制】</strong>代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。</p><blockquote><p>正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用。</p></blockquote><p> 正例：<code>alibaba</code> <code>taobao</code> <code>youku</code> <code>hangzhou</code> 等国际通用的名称，可视同英文。<br> 反例：<code>DaZhePromotion [打折]</code> <code>getPingfenByName() [评分]</code> <code>int 某变量 = 3</code></p></li><li><strong>【强制】</strong>类名使用UpperCamelCase风格，但以下情形例外：DO / BO / DTO / VO / AO / PO / UID等。<br> 正例：<code>MarcoPolo</code> <code>UserDO</code> <code>XmlService</code> <code>TcpUdpDeal</code> <code>TaPromotion</code><br> 反例：<code>macroPolo</code> <code>UserDo</code> <code>XMLService</code> <code>TCPUDPDeal</code> <code>TAPromotion</code></li><li><strong>【强制】</strong>方法名、参数名、成员变量、局部变量都统一使用<code>lowerCamelCase</code>风格，必须遵从<strong>驼峰</strong>形式。<br> 正例：<code>localValue</code> <code>getHttpMessage()</code> <code>inputUserId</code></li><li><strong>【强制】</strong>常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。<br> 正例：<code>MAX_STOCK_COUNT</code><br> 反例：<code>MAX_COUNT</code></li><li><strong>【强制】</strong>抽象类命名使用<code>Abstract</code>或<code>Base</code>开头；异常类命名使用<code>Exception</code>结尾；测试类命名以它要测试的类的名称开始，以<code>Test</code>结尾。</li><li><strong>【强制】</strong>类型与中括号紧挨相连来表示数组。<br> 正例：定义整形数组<code>int[] arrayDemo</code>;<br> 反例：在main参数中，使用<code>String args[]</code>来定义。    </li><li><strong>【强制】</strong><code>POJO</code>类中布尔类型的变量，都不要加is前缀，否则部分框架解析会引起序列化错误。<br> 反例：定义为基本数据类型<code>Boolean isDeleted</code>的属性，它的方法也是<code>isDeleted()</code>，RPC框架在反向解析的时候，”误以为”对应的属性名称是<code>deleted</code>，导致属性获取不到，进而抛出异常。</li><li><strong>【强制】</strong>包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。<br> 正例：应用工具类包名为<code>com.alibaba.ai.util</code>、类名为<code>MessageUtils</code>（此规则参考spring的框架结构）</li><li><strong>【强制】</strong>杜绝完全不规范的缩写，避免望文不知义。<br>反例：<code>AbstractClass</code>“缩写”命名成<code>AbsClass</code>；<code>condition</code>“缩写”命名成 <code>condi</code>，此类随意缩写严重降低了代码的可阅读性。</li><li><strong>【推荐】</strong>为了达到代码自解释的目标，任何自定义编程元素在命名时，使用尽量完整的单词组合来表达其意。<br>正例：在JDK中，表达原子更新的类名为：<code>AtomicReferenceFieldUpdater</code>。<br>反例：变量<code>int a</code>的随意命名方式。</li><li><p><strong>【推荐】</strong>如果模块、接口、类、方法使用了设计模式，在命名时需体现出具体模式。</p><blockquote><p>将设计模式体现在名字中，有利于阅读者快速理解架构设计理念。</p></blockquote><p>正例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderFactory</span></span>;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginProxy</span></span>;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceObserver</span></span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>【推荐】</strong>接口类中的方法和属性不要加任何修饰符号（public 也不要加），保持代码的简洁性，并加上有效的Javadoc注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。<br>正例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口方法签名</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//接口基础常量</span></span><br><span class="line">String COMPANY = <span class="string">"alibaba"</span>;</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口方法定义</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>说明：JDK 8 中接口允许有默认实现，那么这个default方法，是对所有实现类都有价值的默认实现。</p></blockquote></li><li><p>接口和实现类的命名有两套规则：<br>1 ）<strong>【强制】</strong>对于<code>Service</code>和<code>DAO</code>类，基于SOA的理念，暴露出来的服务一定是接口，内部的实现类用Impl的后缀与接口区别。<br>正例：<code>CacheServiceImpl</code>实现<code>CacheService</code>接口。<br>2 ） <strong>【推荐】</strong> 如果是形容能力的接口名称，取对应的形容词为接口名（通常是–able的形式）。<br>正例：<code>AbstractTranslator</code>实现 <code>Translatable</code>接口。</p></li><li><p>【参考】枚举类名建议带上<code>Enum</code>后缀，枚举成员名称需要全大写，单词间用下划线隔开。</p><blockquote><p>说明：枚举其实就是特殊的类，域成员均为常量，且构造方法被默认强制是私有。</p></blockquote><p>正例：枚举名字为<code>ProcessStatusEnum</code>的成员名称：<code>SUCCESS</code>、<code>UNKNOWN_REASON</code>。</p></li><li>【参考】各层命名规约：<br>A) <code>Service</code>/<code>DAO</code>层方法命名规约<pre><code>1 ） 获取单个对象的方法用get做前缀。2 ） 获取多个对象的方法用list做前缀，复数形式结尾如：listObjects。3 ） 获取统计值的方法用count做前缀。4 ） 插入的方法用save/insert做前缀。5 ） 删除的方法用remove/delete做前缀。6 ） 修改的方法用update做前缀。</code></pre>B) 领域模型命名规约<pre><code>1 ） 数据对象：xxxDO，xxx即为数据表名。2 ） 数据传输对象：xxxDTO，xxx为业务领域相关的名称。3 ） 展示对象：xxxVO，xxx一般为网页名称。4 ） POJO是DO/DTO/BO/VO的统称，禁止命名成xxxPOJO。</code></pre></li></ol><h3 id="二-常量定义"><a href="#二-常量定义" class="headerlink" title="(二) 常量定义"></a>(二) 常量定义</h3><ol><li><p><strong>【强制】</strong>不允许任何魔法值（即未经预先定义的常量）直接出现在代码中。<br> 反例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String key = <span class="string">"Id#taobao_"</span> + tradeId;</span><br><span class="line">cache.put(key, value);</span><br></pre></td></tr></table></figure></li><li><p><strong>【强制】</strong>在<code>long</code>或者<code>Long</code>赋值时，数值后使用大写的<strong>L</strong>，不能是小写的<strong>l</strong>，小写容易跟数字<strong>1</strong>混淆，造成误解。<br> 说明：<code>Long a = 2l;</code> 写的是数字的 <code>21</code> ，还是<code>Long</code>型的2?</p></li><li><strong>【推荐】</strong>不要使用一个常量类维护所有常量，要按常量功能进行归类，分开维护。<br> 说明：大而全的常量类，杂乱无章，使用查找功能才能定位到修改的常量，不利于理解和维护。<br> 正例：缓存相关常量放在类<code>CacheConsts</code>下；系统配置相关常量放在类<code>ConfigConsts</code>下。</li><li><p><strong>【推荐】</strong>常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量。<br> 1 ） 跨应用共享常量：放置在二方库中，通常是<code>client.jar</code>中的<code>constant</code>目录下。<br> 2 ） 应用内共享常量：放置在一方库中，通常是子模块中的<code>constant</code>目录下。<br> 反例：易懂变量也要统一定义成应用内共享常量，两位攻城师在两个类中分别定义了表示”是”的变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类A中：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String YES = <span class="string">"yes"</span>;</span><br><span class="line"><span class="comment">//类B中：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String YES = <span class="string">"y"</span>;</span><br><span class="line"><span class="comment">//A.YES.equals(B.YES)，预期是true，但实际返回为false，导致线上问题。</span></span><br></pre></td></tr></table></figure><p> 3 ） 子工程内部共享常量：即在当前子工程的<code>constant</code>目录下。<br> 4 ） 包内共享常量：即在当前包下单独的<code>constant</code>目录下。<br> 5 ） 类内共享常量：直接在类内部<code>private static final</code>定义。</p></li><li><p><strong>【推荐】</strong>如果变量值仅在一个固定范围内变化用<code>enum</code>类型来定义。<br> 说明：如果存在名称之外的延伸属性应使用<code>enum</code>类型，下面正例中的数字就是延伸信息，表示一年中的第几个季节。<br> 正例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SeasonEnum &#123;</span><br><span class="line">SPRING( <span class="number">1</span> ), SUMMER( <span class="number">2</span> ), AUTUMN( <span class="number">3</span> ), WINTER( <span class="number">4</span> );</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> seq;</span><br><span class="line">SeasonEnum(<span class="keyword">int</span> seq)&#123;</span><br><span class="line"><span class="keyword">this</span>.seq = seq;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="三-代码格式"><a href="#三-代码格式" class="headerlink" title="(三) 代码格式"></a>(三) 代码格式</h3><ol><li><strong>【强制】</strong>大括号的使用约定。如果是大括号内为空，则简洁地写成{}即可，不需要换行；如果是非空代码块则：<br> 1 ） 左大括号前不换行。<br> 2 ） 左大括号后换行。<br> 3 ） 右大括号前换行。<br> 4 ） 右大括号后还有<code>else</code>等代码则不换行；表示终止的右大括号后必须换行。</li><li><strong>【强制】</strong>左小括号和字符之间不出现空格；同样，右小括号和字符之间也不出现空格；而左大括号前需要空格。详见第 5 条下方正例提示。<br> 反例：<code>if (空格a == b空格)</code></li><li><strong>【强制】</strong><code>if</code>/<code>for</code>/<code>while</code>/<code>switch</code>/<code>do</code>等保留字与括号之间都必须加<code>空格</code>。</li><li><strong>【强制】</strong>任何二目、三目运算符的左右两边都需要加一个空格。<br> 说明：运算符包括赋值运算符<code>=</code>、逻辑运算符<code>&amp;&amp;</code>、加减乘除符号等。</li><li><p><strong>【强制】</strong>采用 <code>4</code> 个空格缩进，禁止使用<code>tab</code>字符。</p><blockquote><p>说明：如果使用<code>tab</code>缩进，必须设置 <code>1</code> 个tab为 <code>4</code> 个<code>空格</code>。IDEA设置tab为 4 个空格时，请勿勾选Use tab character；而在eclipse中，必须勾选insert spaces for tabs。</p></blockquote><p> 正例： （涉及 1 - 5 点）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 缩进 4 个空格</span></span><br><span class="line">    String say = <span class="string">"hello"</span>;</span><br><span class="line">    <span class="comment">// 运算符的左右必须有一个空格</span></span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 关键词if与括号之间必须有一个空格，括号内的f与左括号， 0 与右括号不需要空格</span></span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(say);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 左大括号前加空格且不换行；左大括号后换行</span></span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">"world"</span>);</span><br><span class="line">    <span class="comment">// 右大括号前换行，右大括号后有else，不用换行</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"ok"</span>);</span><br><span class="line">    <span class="comment">// 在右大括号后直接结束，则必须换行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li><p><strong>【强制】</strong>注释的双斜线与注释内容之间有且仅有一个空格。<br> 正例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是示例注释，请注意在双斜线之后有一个空格</span></span><br><span class="line">String ygb = <span class="keyword">new</span> String();</span><br></pre></td></tr></table></figure></li><li><p><strong>【强制】</strong>单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则：<br> 1 ） 第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。<br> 2 ） 运算符与下文一起换行。<br> 3 ） 方法调用的点符号与下文一起换行。<br> 4 ） 方法调用中的多个参数需要换行时，在逗号后进行。<br> 5 ） 在括号前不要换行，见反例。<br> 正例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="comment">// 超过 120 个字符的情况下，换行缩进 4 个空格，点号和方法名称一起换行</span></span><br><span class="line">sb.append(<span class="string">"zi"</span>).append(<span class="string">"xin"</span>)...</span><br><span class="line">.append(<span class="string">"huang"</span>)...</span><br><span class="line">.append(<span class="string">"huang"</span>)...</span><br><span class="line">.append(<span class="string">"huang"</span>);</span><br></pre></td></tr></table></figure><p> 反例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="comment">// 超过 120 个字符的情况下，不要在括号前换行</span></span><br><span class="line">sb.append(<span class="string">"zi"</span>).append(<span class="string">"xin"</span>)...append</span><br><span class="line">(<span class="string">"huang"</span>);</span><br><span class="line"><span class="comment">// 参数很多的方法调用可能超过 120 个字符，不要在逗号前换行</span></span><br><span class="line">method(args1, args2, args3, ...</span><br><span class="line">, argsX);</span><br></pre></td></tr></table></figure></li><li><p><strong>【强制】</strong>方法参数在定义和传入时，多个参数逗号后边必须加空格。<br> 正例：下例中实参的args1，后边必须要有一个空格。</p><pre><code>method(args1, args2, args3);</code></pre></li><li><strong>【强制】</strong>IDE的<code>text file encoding</code>设置为<code>UTF- 8</code> ; IDE中文件的换行符使用<code>Unix</code>格式，不要使用<code>Windows</code>格式。</li><li><p><strong>【推荐】</strong>单个方法的总行数不超过 <code>80</code> 行。</p><blockquote><p>说明：包括方法签名、结束右大括号、方法内代码、注释、空行、回车及任何不可见字符的总行数不超过 80 行。</p></blockquote><p>正例：代码逻辑分清红花和绿叶，个性和共性，绿叶逻辑单独出来成为额外方法，使主干代码更加清晰；共性逻辑抽取成为共性方法，便于复用和维护。</p></li><li><p><strong>【推荐】</strong>没有必要增加若干空格来使某一行的字符与上一行对应位置的字符对齐。<br>正例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> one = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">long</span> two = <span class="number">2L</span>;</span><br><span class="line"><span class="keyword">float</span> three = <span class="number">3F</span>;</span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br></pre></td></tr></table></figure><blockquote><p>说明：增加sb这个变量，如果需要对齐，则给a、b、c都要增加几个空格，在变量比较多的情况下，是非常累赘的事情。</p></blockquote></li><li><p><strong>【推荐】</strong>不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。</p><blockquote><p>说明：任何情形，没有必要插入多个空行进行隔开。</p></blockquote></li></ol><h3 id="四-OOP规约"><a href="#四-OOP规约" class="headerlink" title="(四) OOP规约"></a>(四) OOP规约</h3><ol><li><strong>【强制】</strong>避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成本，直接用类名来访问即可。</li><li><p><strong>【强制】</strong>所有的覆写方法，必须加<code>@Override</code>注解。</p><blockquote><p>说明：<code>getObject()</code>与<code>get 0 bject()</code>的问题。一个是字母的<code>O</code>，一个是数字的 <code>0</code> ，加<code>@Override</code>可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编译报错。</p></blockquote></li><li><p><strong>【强制】</strong>相同参数类型，相同业务含义，才可以使用<code>Java</code>的可变参数，避免使用<code>Object</code>。</p><blockquote><p>说明：可变参数必须放置在参数列表的最后。（提倡同学们尽量不用可变参数编程）</p></blockquote><p> 正例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">listUsers</span><span class="params">(String type, Long... ids)</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>【强制】</strong>外部正在调用或者二方库依赖的接口，不允许修改方法签名，避免对接口调用方产生影响。接口过时必须加<code>@Deprecated</code>注解，并清晰地说明采用的新接口或者新服务是什么。</p></li><li><p><strong>【强制】</strong>不能使用过时的类或方法。</p><blockquote><p>说明：<code>java.net.URLDecoder</code> 中的方法<code>decode(String encodeStr)</code> 这个方法已经过时，应该使用双参数<code>decode(String source, String encode)</code>。接口提供方既然明确是过时接口，那么有义务同时提供新的接口；作为调用方来说，有义务去考证过时方法的新实现是什么。</p></blockquote></li><li><p><strong>【强制】</strong><code>Object</code>的<code>equals</code>方法容易抛空指针异常，应使用常量或确定有值的对象来调用<code>equals</code>。<br> 正例：<code>&quot;test&quot;.equals(object);</code><br> 反例：<code>object.equals(&quot;test&quot;);</code><br> 说明：推荐使用<code>java.util.Objects#equals（JDK 7 引入的工具类）</code></p></li><li><p><strong>【强制】</strong>所有的相同类型的包装类对象之间值的比较，全部使用<code>equals</code>方法比较。</p><blockquote><p>说明：对于<code>Integer var =?</code> 在<code>-128 至 127</code> 范围内的赋值，<code>Integer</code>对象是在<code>IntegerCache.cache</code>产生，会复用已有对象，这个区间内的<code>Integer</code>值可以直接使用<code>==</code>进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，推荐使用<code>equals</code>方法进行判断。</p></blockquote></li><li><p>关于基本数据类型与包装数据类型的使用标准如下：<br> 1 ）<strong>【强制】</strong>所有的<code>POJO</code>类属性必须使用包装数据类型。<br> 2 ）<strong>【强制】</strong><code>RPC</code>方法的返回值和参数必须使用包装数据类型。<br> 3 ）<strong>【推荐】</strong>所有的局部变量使用基本数据类型。</p><blockquote><p>说明：<code>POJO</code>类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何<code>NPE</code>问题，或者入库检查，都由使用者来保证。</p></blockquote><p> 正例：数据库的查询结果可能是<code>null</code>，因为自动拆箱，用基本数据类型接收有<code>NPE</code>风险。<br> 反例：比如显示成交总额涨跌情况，即正负<code>x%</code>，<code>x</code>为基本数据类型，调用的<code>RPC</code>服务，调用<code>不成功</code>时，返回的是<code>默认值</code>，页面显示为<code>0%</code>，这是不合理的，应该显示成中划线。所以包装数据类型的<code>null</code>值，能够表示额外的信息，如：远程调用失败，异常退出。</p></li><li><p><strong>【强制】</strong>定义<code>DO</code>/<code>DTO</code>/<code>VO</code>等<code>POJO</code>类时，不要设定任何属性默认值。<br> 反例：<code>POJO</code>类的<code>gmtCreate</code>默认值为<code>new Date()</code>，但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。</p></li><li><p><strong>【强制】</strong>序列化类新增属性时，请不要修改<code>serialVersionUID</code>字段，避免反序列失败；如果完全不兼容升级，避免反序列化混乱，那么请修改s<code>erialVersionUID</code>值。</p><blockquote><p>说明：注意<code>serialVersionUID</code>不一致会抛出序列化运行时异常。</p></blockquote></li><li><p><strong>【强制】</strong>构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在<code>init</code>方法中。</p></li><li><p><strong>【强制】</strong><code>POJO</code>类必须写<code>toString</code>方法。使用IDE中的工具：<code>source&gt; generate toString</code>时，如果继承了另一个<code>POJO</code>类，注意在前面加一下<code>super.toString</code>。</p><blockquote><p>说明：在方法执行抛出异常时，可以直接调用<code>POJO</code>的<code>toString()</code>方法打印其属性值，便于排查问题。</p></blockquote></li><li><p><strong>【强制】</strong>禁止在<code>POJO类</code>中，同时存在对应属性<code>xxx</code>的<code>isXxx()</code>和<code>getXxx()</code>方法。</p><blockquote><p>说明：框架在调用属性<code>xxx</code>的提取方法时，并不能确定哪个方法一定是被优先调用到。</p></blockquote></li><li><p><strong>【推荐】</strong>使用索引访问用<code>String</code>的<code>split</code>方法得到的数组时，需做最后一个分隔符后有无内容的检查，否则会有抛<code>IndexOutOfBoundsException</code>的风险。<br>说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"a,b,c,,"</span>;</span><br><span class="line">String[] ary = str.split(<span class="string">","</span>);</span><br><span class="line"><span class="comment">// 预期大于 3 ，结果是 3</span></span><br><span class="line">System.out.println(ary.length);</span><br></pre></td></tr></table></figure></li><li><p><strong>【推荐】</strong>当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读，此条规则优先于第 16 条规则。</p></li><li><p><strong>【推荐】</strong> 类内方法定义的顺序依次是：公有方法或保护方法 &gt; 私有方法 &gt; <code>getter</code>/ <code>setter</code>方法。</p><blockquote><p>说明：公有方法是类的调用者和维护者最关心的方法，首屏展示最好；保护方法虽然只是子类关心，也可能是”模板设计模式”下的核心方法；而私有方法外部一般不需要特别关心，是一个黑盒实现；因为承载的信息价值较低，所有<code>Service</code>和<code>DAO</code>的<code>getter</code>/<code>setter</code>方法放在类体最后。</p></blockquote></li><li><p><strong>【推荐】</strong><code>setter</code>方法中，<code>参数名称与类成员变量名称一致</code>，<code>this.成员名 = 参数名</code>。在<code>getter</code>/<code>setter</code>方法中，不要增加<code>业务逻辑</code>，增加排查问题的难度。<br>反例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.data + <span class="number">100</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.data - <span class="number">100</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>【推荐】</strong>循环体内，字符串的连接方式，使用<code>StringBuilder</code>的<code>append</code>方法进行扩展。</p><blockquote><p>说明：下例中，反编译出的字节码文件显示每次循环都会<code>new</code>出一个<code>StringBuilder</code>对象，然后进行<code>append</code>操作，最后通过<code>toString</code>方法返回<code>String</code>对象，造成内存资源浪费。</p></blockquote><p>反例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"start"</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    str = str + <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>【推荐】</strong><code>final</code>可以声明类、成员变量、方法、以及本地变量，下列情况使用<code>final</code>关键字：<br>1 ）不允许被继承的类，如：<code>String</code>类。<br>2 ）不允许修改引用的域对象。<br>3 ）不允许被重写的方法，如：<code>POJO</code>类的<code>setter</code>方法。<br>4 ）不允许运行过程中重新赋值的局部变量。<br>5 ）避免上下文重复使用一个变量，使用<code>final</code>描述可以强制重新定义一个变量，方便更好<br>地进行重构。</p></li><li><strong>【推荐】</strong>慎用<code>Object</code>的<code>clone</code>方法来拷贝对象。<br>说明：对象的<code>clone</code>方法默认是<code>浅拷贝</code>，若想实现深拷贝需要重写<code>clone</code>方法实现域对象的<code>深度遍历式拷贝</code>。</li><li><p><strong>【推荐】</strong>类成员与方法访问控制从严：<br>1 ）如果不允许外部直接通过<code>new</code>来创建对象，那么构造方法必须是<code>private</code>。<br>2 ）工具类不允许有<code>public</code>或<code>default</code>构造方法。<br>3 ）类非<code>static</code>成员变量并且与子类共享，必须是<code>protected</code>。<br>4 ）类非<code>static</code>成员变量并且仅在本类使用，必须是<code>private</code>。<br>5 ）类<code>static</code>成员变量如果仅在本类使用，必须是<code>private</code>。<br>6 ）若是<code>static</code>成员变量，考虑是否为<code>final</code>。<br>7 ）类成员方法只供类内部调用，必须是<code>private</code>。<br>8 ）类成员方法只对继承类公开，那么限制为<code>protected</code>。</p><blockquote><p>说明：任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。</p></blockquote><blockquote><p>思考：如果是一个<code>private</code>的方法，想删除就删除，可是一个<code>public</code>的<code>service</code>成员方法或成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大，无限制的到处跑，那么你会担心的。</p></blockquote></li></ol><h3 id="五-集合处理"><a href="#五-集合处理" class="headerlink" title="(五) 集合处理"></a>(五) 集合处理</h3><ol><li><p><strong>【强制】</strong>关于<code>hashCode</code>和<code>equals</code>的处理，遵循如下规则：<br> 1 ）只要重写<code>equals</code>，就必须重写<code>hashCode</code>。<br> 2 ）因为<code>Set</code>存储的是不重复的对象，依据<code>hashCode</code>和<code>equals</code>进行判断，所以<code>Set</code>存储的对象必须重写这两个方法。<br> 3 ）如果自定义对象作为<code>Map</code>的键，那么必须重写<code>hashCode</code>和<code>equals</code>。</p><blockquote><p>说明：<code>String</code>重写了<code>hashCode</code>和<code>equals</code>方法，所以我们可以非常愉快地使用<code>String</code>对象作为<code>key</code>来使用。</p></blockquote></li><li><p><strong>【强制】</strong> <code>ArrayList</code>的<code>subList</code>结果不可强转成<code>ArrayList</code>，否则会抛出<code>ClassCastException</code>异常，即<code>java.util.RandomAccessSubList cannot be cast to java.util.ArrayList</code>。</p><blockquote><p>说明：<code>subList</code> 返回的是 <code>ArrayList</code>的内部类 <code>SubList</code>，并不是 <code>ArrayList</code>而是<code>ArrayList</code>的一个视图，对于<code>SubList</code>子列表的所有操作最终会反映到原列表上。</p></blockquote></li><li><p><strong>【强制】</strong>在<code>subList</code>场景中，高度注意对原集合元素的增加或删除，均会导致子列表的遍历、增加、删除产生<code>ConcurrentModificationException</code> 异常。</p></li><li><p><strong>【强制】</strong>使用集合转数组的方法，必须使用集合的<code>toArray(T[] array)</code>，传入的是类型完全一样的数组，大小就是<code>list.size()</code>。</p><blockquote><p>说明：使用<code>toArray</code>带参方法，入参分配的数组空间不够大时，<code>toArray</code>方法内部将重新分配内存空间，并返回新数组地址；如果数组元素个数大于实际所需，下标为<code>[ list.size() ]</code>的数组元素将被置为<code>null</code>，其它数组元素保持原值，因此最好将方法入<code>参数组大小定义</code>与<code>集合元素个数一致</code>。</p></blockquote><p> 正例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="string">"guan"</span>);</span><br><span class="line">list.add(<span class="string">"bao"</span>);</span><br><span class="line">String[] array = <span class="keyword">new</span> String[list.size()];</span><br><span class="line">array = list.toArray(array);</span><br></pre></td></tr></table></figure><p> 反例：直接使用<code>toArray</code>无参方法存在问题，此方法返回值只能是<code>Object[]</code>类，若强转其它类型数组将出现<code>ClassCastException</code>错误。</p></li><li><p><strong>【强制】</strong>使用工具类<code>Arrays.asList()</code>把数组转换成集合时，不能使用其修改集合相关的方法，它的<code>add/remove/clear</code>方法会抛出<code>UnsupportedOperationException</code>异常。</p><blockquote><p>说明：<code>asList</code>的返回对象是一个<code>Arrays</code>内部类，并没有实现集合的修改方法。<code>Arrays.asList</code>体现的是适配器模式，只是转换接口，后台的数据仍是数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String[] str = <span class="keyword">new</span> String[] &#123; <span class="string">"you"</span>, <span class="string">"wu"</span> &#125;;</span><br><span class="line">List list = Arrays.asList(str);</span><br><span class="line"><span class="comment">//第一种情况：</span></span><br><span class="line">list.add(<span class="string">"yangguanbao"</span>); <span class="comment">//运行时异常。</span></span><br><span class="line"><span class="comment">//第二种情况：</span></span><br><span class="line">str[<span class="number">0</span>] = <span class="string">"gujin"</span>; <span class="comment">//那么list.get(0)也会随之修改。</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p><strong>【强制】</strong>泛型通配符<code>&lt;? extends T&gt;</code>来接收返回的数据，此写法的泛型集合不能使用<code>add</code>方法，而<code>&lt;? super T&gt;</code>不能使用<code>get</code>方法，作为接口调用赋值时易出错。</p><blockquote><p>说明：扩展说一下<code>PECS(Producer Extends Consumer Super)</code>原则：第一、频繁往外读取内容的，适合用<code>&lt;? extends T&gt;</code>。第二、经常往里插入的，适合用<code>&lt;? super T&gt;</code>。</p></blockquote></li><li><p><strong>【强制】</strong>不要在<code>foreach</code>循环里进行元素的<code>remove</code>/<code>add</code>操作。<code>remove</code>元素请使用<code>Iterator</code>方式，如果并发操作，需要对<code>Iterator</code>对象加锁。<br> 正例：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"1"</span>);</span><br><span class="line">list.add(<span class="string">"2"</span>);</span><br><span class="line">Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    String item = iterator.next();</span><br><span class="line">    <span class="keyword">if</span> (删除元素的条件) &#123;</span><br><span class="line">        iterator.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (String item : list) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"1"</span>.equals(item)) &#123;</span><br><span class="line">list.remove(item);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>说明：以上代码的执行结果肯定会出乎大家的意料，那么试一下把”1”换成”2”，会是同样的结果吗？</p></blockquote><ol start="8"><li><p><strong>【强制】</strong> 在<code>JDK 7</code> 版本及以上，<code>Comparator</code>实现类要满足如下三个条件，不然<code>Arrays.sort</code>，<code>Collections.sort</code>会报<code>IllegalArgumentException</code>异常。</p><blockquote><p>说明：三个条件如下</p><pre><code>1 ） x，y的比较结果和y，x的比较结果相反。2 ） x&gt;y，y&gt;z，则x&gt;z。3 ） x=y，则x，z比较结果和y，z比较结果相同。</code></pre></blockquote><p> 反例：下例中没有处理相等的情况，实际使用中可能会出现异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> o1.getId() &gt; o2.getId()? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>【推荐】</strong>集合泛型定义时，在<code>JDK7</code>及以上，使用<code>diamond</code>语法或全省略。</p><blockquote><p>说明：菱形泛型，即<code>diamond</code>，直接使用<code>&lt;&gt;</code>来指代前边已经指定的类型。</p></blockquote><p> 正例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//diamond方式</span></span><br><span class="line">HashMap&lt;String, String&gt; userCache = <span class="keyword">new</span> HashMap&lt;String, String&gt;(<span class="number">16</span>);</span><br><span class="line"><span class="comment">//全省略方式</span></span><br><span class="line">ArrayList&lt;User&gt; users = <span class="keyword">new</span> ArrayList(<span class="number">10</span>);</span><br></pre></td></tr></table></figure></li></ol><ol start="10"><li><p><strong>【推荐】</strong>集合初始化时，指定集合<code>初始值大小</code>。</p><blockquote><p>说明：<code>HashMap</code>使用<code>HashMap(int initialCapacity)</code> 初始化。</p></blockquote><p>正例：<code>initialCapacity = (需要存储的元素个数 / 负载因子) + 1</code>。注意<code>负载因子（即loaderfactor）默认为0.75</code>，如果暂时无法确定初始值大小，请设置为 16 （即默认值）。<br>反例：<code>HashMap</code>需要放置 <code>1024</code> 个元素，由于没有设置容量初始大小，随着元素不断增加，容量 <code>7</code> 次被迫扩大，<code>resize</code>需要重建<code>hash表</code>，严重影响<code>性能</code>。</p></li><li><p><strong>【推荐】</strong>使用<code>entrySet</code>遍历<code>Map</code>类集合<code>KV</code>，而不是<code>keySet</code>方式进行遍历。</p><blockquote><p>说明：<code>keySet</code>其实是遍历了 <code>2</code> 次，一次是转为<code>Iterator</code>对象，另一次是从<code>hashMap</code>中取出<code>key</code>所对应的<code>value</code>。而<code>entrySet</code>只是遍历了一次就把<code>key</code>和<code>value</code>都放到了<code>entry</code>中，效率更高。如果是<code>JDK 8</code> ，使用<code>Map.foreach</code>方法。</p></blockquote><p>正例：<code>values()</code>返回的是<code>V值</code>集合，是一个<code>list</code>集合对象；<code>keySet()</code>返回的是<code>K值</code>集合，是一个<code>Set集合</code>对象；<code>entrySet()</code>返回的是<code>K-V值</code>组合集合。</p></li><li><strong>【推荐】</strong>高度注意<code>Map</code>类集合<code>K/V</code>能不能存储<code>null</code>值的情况，如下表格：</li></ol><table><thead><tr><th>集合类</th><th>Key</th><th>Value</th><th>Super</th><th>说明</th></tr></thead><tbody><tr><td>Hashtable</td><td><code>不允许为null</code></td><td><code>不允许为null</code></td><td>Dictionary</td><td><code>线程安全</code></td></tr><tr><td>ConcurrentHashMap</td><td><code>不允许为null</code></td><td><code>不允许为null</code></td><td>AbstractMap</td><td><code>锁分段技术（JDK8:CAS）</code></td></tr><tr><td>TreeMap</td><td><code>不允许为null</code></td><td><code>允许为null</code></td><td>AbstractMap</td><td><code>线程不安全</code></td></tr><tr><td>HashMap</td><td><code>允许为null</code></td><td><code>允许为null</code></td><td>AbstractMap</td><td><code>线程不安全</code></td></tr></tbody></table><p>反例： 由于<code>HashMap</code>的干扰，很多人认为<code>ConcurrentHashMap</code>是可以置入<code>null</code>值，而事实上，存储<code>null</code>值时会抛出<code>NPE异常</code>。</p><ol start="13"><li><p>【参考】合理利用好集合的<code>有序性(sort)</code>和<code>稳定性(order)</code>，避免集合的<code>无序性(unsort)</code>和<code>不稳定性(unorder)</code>带来的负面影响。</p><blockquote><p>说明：有序性是指遍历的结果是按某种比较规则依次排列的。稳定性指集合每次遍历的元素次序是一定的。如：<code>ArrayList</code>是<code>order</code>/<code>unsort</code>；<code>HashMap</code>是<code>unorder</code>/<code>unsort</code>；<code>TreeSet</code>是<code>order</code>/<code>sort</code>。</p></blockquote></li><li><p>【参考】利用<code>Set</code>元素唯一的特性，可以快速对一个集合进行<code>去重</code>操作，避免使用<code>Lis</code>t的<code>contains</code>方法进行遍历、对比、去重操作。</p></li></ol><h3 id="六-并发处理"><a href="#六-并发处理" class="headerlink" title="(六) 并发处理"></a>(六) 并发处理</h3><ol><li><p><strong>【强制】</strong>获取单例对象需要保证线程安全，其中的方法也要保证线程安全。</p><blockquote><p>说明：资源驱动类、工具类、单例工厂类都需要注意。</p></blockquote></li><li><p><strong>【强制】</strong>创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。</p></li></ol><p>正例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerTaskThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TimerTaskThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.setName(<span class="string">"TimerTaskThread"</span>);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="3"><li><p><strong>【强制】</strong>线程资源必须通过<code>线程池</code>提供，<code>不允许在应用中自行显式创建线程</code>。</p><blockquote><p>说明：使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致<code>消耗完内存</code>或者”<code>过度切换</code>“的问题。</p></blockquote></li><li><p><strong>【强制】</strong>线程池不允许使用<code>Executors</code>去创建，而是通过<code>ThreadPoolExecutor</code>的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。</p><blockquote><p>说明：<code>Executors</code>返回的线程池对象的弊端如下：<br> 1 ）<code>FixedThreadPool</code>和<code>SingleThreadPool</code>:<br>允许的请求队列长度为<code>Integer.MAX_VALUE</code>，可能会堆积大量的请求，从而导致<code>OOM</code>。<br>2 ）<code>CachedThreadPool</code>和<code>ScheduledThreadPool</code>:<br>允许的创建线程数量为<code>Integer.MAX_VALUE</code>，可能会创建大量的线程，从而导致<code>OOM</code>。</p></blockquote></li><li><p><strong>【强制】</strong><code>SimpleDateFormat</code> 是<code>线程不安全</code>的类，一般不要定义为<code>static</code>变量，如果定义为 <code>static</code>，必须加锁，或者使用<code>DateUtils</code>工具类。<br> 正例：注意线程安全，使用DateUtils。亦推荐如下处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;DateFormat&gt; df = <span class="keyword">new</span> ThreadLocal&lt;DateFormat&gt;() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">protected</span> DateFormat <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>说明：如果是<code>JDK 8</code> 的应用，可以使用<code>Instant</code>代替<code>Date</code>，<code>LocalDateTime</code>代替<code>Calendar</code>，<code>DateTimeFormatter</code>代替<code>SimpleDateFormat</code>，官方给出的解释：<code>simple beautiful stron immutable thread-safe</code>。</p></blockquote></li><li><p><strong>【强制】</strong>高并发时，同步调用应该去考量<code>锁的性能损耗</code>。能用无锁数据结构，就不要用锁；能锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。</p><blockquote><p>说明：尽可能使加锁的代码块工作量尽可能的小，避免在锁代码块中调用<code>RPC</code>方法。</p></blockquote></li><li><p><strong>【强制】</strong>对多个资源、数据库表、对象同时加锁时，需要保持<code>一致的加锁顺序</code>，否则可能会造成<code>死锁</code>。</p><blockquote><p>说明：线程一需要对表A、B、C依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是A、B、C，否则可能出现死锁。</p></blockquote></li><li><p><strong>【强制】</strong>并发修改同一记录时，避免更新丢失，需要加锁。<code>要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用version作为更新依据</code>。</p><blockquote><p>说明：如果每次访问冲突概率小于<code>20%</code>，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于 <code>3</code> 次。</p></blockquote></li><li><p><strong>【强制】</strong>多线程并行处理定时任务时，<code>Timer</code>运行多个<code>TimeTask</code>时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，使用<code>ScheduledExecutorService</code>则没有这个问题。</p></li><li><strong>【推荐】</strong>使用<code>CountDownLatch</code>进行异步转同步操作，每个线程退出前必须调用<code>countDown</code>方法，线程执行代码注意<code>catch异常</code>，确保<code>countDown</code>方法被执行到，避免主线程无法执行至<code>await方法</code>，直到<code>超时</code>才返回结果。<blockquote><p>说明：注意，子线程抛出异常堆栈，不能在主线程<code>try-catch</code>到。</p></blockquote></li><li><p><strong>【推荐】</strong>避免<code>Random实例</code>被<code>多线程使用</code>，虽然共享该实例是<code>线程安全</code>的，但会因<code>竞争同一seed</code> 导致的<code>性能下降</code>。</p><blockquote><p>说明：<code>Random</code>实例包括<code>java.util.Random</code> 的实例或者 <code>Math.random()</code>的方式。</p></blockquote><p>正例：在<code>JDK 7</code> 之后，可以直接使用<code>API ThreadLocalRandom</code>，而在 <code>JDK 7</code> 之前，需要编码保证<code>每个线程持有一个实例</code>。</p></li><li><strong>【推荐】</strong>在并发场景下，通过<code>双重检查锁（double-checked locking）</code>实现延迟初始化的优化问题隐患(可参考 <code>The &quot;Double-Checked Locking is Broken&quot; Declaration</code>)，推荐解决方案中较为简单一种（<code>适用于JDK 5 及以上版本</code>），将目标属性声明为 <code>volatile</code>型。<br>反例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">LazyInitDemo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Helper helper = <span class="keyword">null</span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Helper <span class="title">getHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (helper == <span class="keyword">null</span>) <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (helper == <span class="keyword">null</span>)</span><br><span class="line">            helper = <span class="keyword">new</span> Helper();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> helper;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// other methods and fields...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="13"><li>【参考】<code>volatile</code>解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。如果是<code>count++</code>操作，使用如下类实现：<code>AtomicInteger count = new AtomicInteger(); count.addAndGet( 1 );</code> 如果是<code>JDK 8</code> ，推荐使用<code>LongAdder</code>对象，比<code>AtomicLong</code>性能更好（减少乐观锁的重试次数）。</li><li>【参考】 <code>HashMap</code>在容量不够进行<code>resize</code>时由于高并发可能出现死链，导致CPU飙升，在开发过程中可以使用其它数据结构或加锁来规避此风险。</li><li>【参考】<code>ThreadLocal</code>无法解决共享对象的更新问题，<code>ThreadLocal</code>对象建议使用<code>static</code>修饰。这个变量是针对一个线程内所有操作共享的，所以设置为静态变量，所有此类实例共享此静态变量 ，也就是说在类第一次被使用时装载，只分配一块存储空间，所有此类的对象(只要是这个线程内定义的)都可以操控这个变量。</li></ol><h3 id="七-控制语句"><a href="#七-控制语句" class="headerlink" title="(七) 控制语句"></a>(七) 控制语句</h3><ol><li><strong>【强制】</strong>在一个<code>switch</code>块内，每个<code>case</code>要么通过<code>break</code>/<code>return</code>等来终止，要么注释说明程序将继续执行到哪一个<code>case</code>为止；在一个<code>switch</code>块内，都必须包含一个<code>default</code>语句并且放在最后，即使空代码。</li><li><strong>【强制】</strong>在<code>if</code>/<code>else</code>/<code>for</code>/<code>while</code>/<code>do</code>语句中必须使用大括号。即使只有一行代码，避免采用单行的编码方式：<code>if (condition) statements;</code></li><li><p><strong>【强制】</strong>在高并发场景中，避免使用<code>&quot;等于&quot;</code>判断作为中断或退出的条件。</p><blockquote><p>说明：如果并发控制没有处理好，容易产生等值判断被”<code>击穿</code>“的情况，使用大于或小于的区间判断条件来代替。</p></blockquote><p> 反例：判断剩余奖品数量等于 0 时，终止发放奖品，但因为并发处理错误导致奖品数量瞬间变成了负数，这样的话，活动无法终止。</p></li><li><p><strong>【推荐】</strong>表达异常的分支时，少用<code>if-else</code>方式，这种方式可以改写成：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明：如果非得使用if()…else if()…else…方式表达逻辑，<strong>【强制】</strong>避免后续代码维护困难，请勿超过 <code>3</code> 层。    </p></blockquote><p>正例：超过 <code>3</code> 层的 <code>if-else</code> 的逻辑判断代码可以使用卫语句、策略模式、状态模式等来实现，其中卫语句示例如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">today</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isBusy()) &#123;</span><br><span class="line">System.out.println(<span class="string">"change time."</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isFree()) &#123;</span><br><span class="line">System.out.println(<span class="string">"go to travel."</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"stay at home to learn Alibaba Java Coding Guidelines."</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="5"><li><p><strong>【推荐】</strong>除常用方法（如<code>getXxx</code>/<code>isXxx</code>）等外，不要在条件判断中执行其它复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。</p><blockquote><p>说明：很多<code>if</code>语句内的逻辑相当复杂，阅读者需要分析条件表达式的最终结果，才能明确什么样的条件执行什么样的语句，那么，如果阅读者分析逻辑表达式错误呢？</p></blockquote><p> 正例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码如下</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> existed = (file.open(fileName, <span class="string">"w"</span>) != <span class="keyword">null</span>) &amp;&amp; (...) || (...);</span><br><span class="line"><span class="keyword">if</span> (existed) &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 反例：</p><pre><code>if ((file.open(fileName, &quot;w&quot;) != null) &amp;&amp; (...) || (...)) {...}</code></pre></li><li><p><strong>【推荐】</strong>循环体中的语句要考量性能，以下操作尽量移至循环体外处理，如定义对象、变量、获取数据库连接，进行不必要的<code>try-catch</code>操作（这个<code>try-catch</code>是否可以移至循环体外）。</p></li><li><p><strong>【推荐】</strong>避免采用取反逻辑运算符。</p><blockquote><p>说明：取反逻辑不利于快速理解，并且取反逻辑写法必然存在对应的正向逻辑写法。</p></blockquote><p> 正例：<code>使用if (x &lt; 628) 来表达 x 小于 628</code> 。<br> 反例：<code>使用if (!(x &gt;= 628)) 来表达 x 小于 628</code> 。</p></li><li><strong>【推荐】</strong>接口入参保护，这种场景常见的是用作批量操作的接口。</li><li>【参考】下列情形，需要进行参数校验：<br> 1 ）调用频次低的方法。<br> 2 ）执行时间开销很大的方法。此情形中，参数校验时间几乎可以忽略不计，但如果因为参数错误导致中间执行回退，或者错误，那得不偿失。<br> 3 ）需要极高稳定性和可用性的方法。<br> 4 ）对外提供的开放接口，不管是<code>RPC</code>/<code>API</code>/<code>HTTP</code>接口。<br> 5 ） 敏感权限入口。</li><li>【参考】下列情形，不需要进行参数校验：<br>1 ）极有可能被循环调用的方法。但在方法说明里必须注明外部参数检查要求。<br>2 ）底层调用频度比较高的方法。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底层才会暴露问题。一般<code>DAO</code>层与<code>Service</code>层都在同一个应用中，部署在同一台服务器中，所以<code>DAO</code>的参数校验，可以省略。<br>3 ）被声明成<code>private</code>只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参数已经做过检查或者肯定不会有问题，此时可以不校验参数。</li></ol><h3 id="八-注释规约"><a href="#八-注释规约" class="headerlink" title="(八) 注释规约"></a>(八) 注释规约</h3><ol><li><p><strong>【强制】</strong>类、类属性、类方法的注释必须使用<a href="https://blog.csdn.net/garfielder007/article/details/54959597" target="_blank" rel="noopener"><code>Javadoc规范</code></a>，使用<code>/**内容*/</code>格式，不得使用<code>// xxx</code>方式。</p><blockquote><p>说明：在IDE编辑窗口中，<code>Javadoc</code>方式会提示相关注释，生成<code>Javadoc</code>可以正确输出相应注释；在IDE中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。</p></blockquote></li><li><p><strong>【强制】</strong>所有的抽象方法（包括接口中的方法）必须要用<code>Javadoc</code>注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。</p><blockquote><p>说明：对子类的实现要求，或者调用注意事项，请一并说明。</p></blockquote></li><li><p><strong>【强制】</strong>所有的类都必须添加<code>创建者</code>和<code>创建日期</code>。</p></li><li><strong>【强制】</strong>方法内部单行注释，在被注释语句上方另起一行，使用<code>//</code>注释。方法内部多行注释使用<code>/* */</code>注释，注意与代码对齐。</li><li><strong>【强制】</strong>所有的枚举类型字段必须要有注释，说明每个数据项的用途。</li><li><strong>【推荐】</strong>与其”半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可。<br> 反例：”<code>TCP</code>连接超时”解释成”传输控制协议连接超时”，理解反而费脑筋。</li><li><p><strong>【推荐】</strong>代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。</p><blockquote><p>说明：代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后，就失去了导航的意义。</p></blockquote></li><li><p>【参考】谨慎注释掉代码。在上方详细说明，而不是简单地注释掉。如果无用，则删除。</p><blockquote><p>说明：代码被注释掉有两种可能性：<br> 1 ）后续会恢复此段代码逻辑。<br> 2 ）永久不用。前者如果没有备注信息，难以知晓注释动机。后者建议直接删掉（代码仓库保存了历史代码）。</p></blockquote></li></ol><ol start="9"><li>【参考】对于注释的要求：第一、<code>能够准确反应设计思想和代码逻辑</code>；第二、<code>能够描述业务含义，使别的程序员能够迅速了解到代码背后的信息</code>。完全没有注释的大段代码对于阅读者形同天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路；注释也是给继任者看的，使其能够快速接替自己的工作。</li><li><p>【参考】好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释是相当大的负担。<br>反例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// put elephant into fridge</span><br><span class="line">put(elephant, fridge);</span><br><span class="line">//方法名put，加上两个有意义的变量名elephant和fridge，已经说明了这是在干什么，语义清晰的代码不需要额外的注释。</span><br></pre></td></tr></table></figure></li><li><p>【参考】特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描，经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。<br>1 ） <code>待办事宜（TODO</code>）:（ 标记人，标记时间，[预计处理时间]）表示需要实现，但目前还未实现的功能。这实际上是一个<code>Javadoc</code>的标签，目前的<code>Javadoc</code>还没有实现，但已经被广泛使用。只能应用于类，接口和方法（因为它是一个Javadoc标签）<br>2 ） 错误，不能工作（<code>FIXME</code>）:（标记人，标记时间，[预计处理时间]）在注释中用<code>FIXME</code>标记某代码是错误的，而且不能工作，需要及时纠正的情况。</p></li></ol><h3 id="九-其它"><a href="#九-其它" class="headerlink" title="(九) 其它"></a>(九) 其它</h3><ol><li><strong>【强制】</strong>在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度。<blockquote><p>说明：不要在方法体内定义：<code>Pattern pattern = Pattern.compile(&quot;规则&quot;);</code></p></blockquote></li><li><p><strong>【强制】</strong><code>velocity</code>调用<code>POJO</code>类的属性时，建议直接使用属性名取值即可，模板引擎会自动按规范调用<code>POJO</code>的<code>getXxx()</code>，如果是<code>boolean</code>基本数据类型变量（<code>boolean命名不需要加is前缀</code>），会自动调用<code>isXxx()</code>方法。</p><blockquote><p>说明：注意如果是<code>Boolean</code>包装类对象，优先调用<code>getXxx()</code>的方法。</p></blockquote></li><li><p><strong>【强制】</strong>后台输送给页面的变量必须加<code>**$!{var}——**</code>中间的感叹号。</p><blockquote><p>说明：如果<code>var</code>等于<code>null</code>或者不存在，那么<code>${var}</code>会直接显示在页面上。</p></blockquote></li><li><p><strong>【强制】</strong>注意 <code>Math.random()</code> 这个方法返回是<code>double</code>类型，注意取值的范围 <code>0≤x&lt;1</code>（能够取到零值，注意除零异常），如果想获取整数类型的随机数，不要将x放大 10 的若干倍然后取整，直接使用<code>Random</code>对象的<code>nextInt</code>或者<code>nextLong</code>方法。</p></li><li><p><strong>【强制】</strong>获取当前毫秒数<code>System.currentTimeMillis();</code> 而不是<code>new Date().getTime();</code></p><blockquote><p>说明：如果想获取更加精确的纳秒级时间值，使用<code>System.nanoTime()</code>的方式。在<code>JDK 8</code>中，针对统计时间等场景，推荐使用<code>Instant</code>类。</p></blockquote></li><li><p><strong>【推荐】</strong>不要在<code>视图模板</code>中加入任何<code>复杂的逻辑</code>。</p><blockquote><p>说明：根据<code>MVC</code>理论，<code>视图的职责是展示</code>，不要抢模型和控制器的活。</p></blockquote></li><li><p><strong>【推荐】</strong>任何数据结构的构造或初始化，都应<code>指定大小</code>，避免数据结构无限增长吃光内存。</p></li><li><p><strong>【推荐】</strong>及时清理不再使用的代码段或配置信息。</p><blockquote><p>说明：对于垃圾代码或过时配置，坚决清理干净，避免程序过度臃肿，代码冗余。</p></blockquote><p> 正例：对于暂时被注释掉，后续可能恢复使用的代码片断，在注释代码上方，统一规定使用三个斜杠<code>(///)</code>来说明注释掉代码的理由。</p></li></ol><h2 id="二、异常日志"><a href="#二、异常日志" class="headerlink" title="二、异常日志"></a>二、异常日志</h2><h3 id="一-异常处理"><a href="#一-异常处理" class="headerlink" title="(一) 异常处理"></a>(一) 异常处理</h3><ol><li><p><strong>【强制】</strong><code>Java</code> 类库中定义的可以通过预检查方式规避的<code>RuntimeException</code>异常不应该通过<code>catch</code>的方式来处理，比如：<code>NullPointerException</code>、<code>IndexOutOfBoundsException</code>等等。</p><blockquote><p>说明：无法通过预检查的异常除外，比如，在解析字符串形式的数字时，不得不通过catch NumberFormatException来实现。</p></blockquote><p> 正例：<code>if (obj != null) {...}</code><br> 反例：<code>try { obj.method(); } catch (NullPointerException e) {...}</code></p></li><li><p><strong>【强制】</strong>异常不要用来做流程控制，条件控制。</p><blockquote><p>说明：异常设计的初衷是解决程序运行中的各种意外情况，且异常的处理效率比条件判断方式要低很多。</p></blockquote></li><li><p><strong>【强制】</strong><code>catch</code>时请分清<code>稳定代码</code>和<code>非稳定代码</code>，稳定代码指的是无论如何不会出错的代码。对于非稳定代码的<code>catch</code>尽可能进行区分异常类型，再做对应的异常处理。</p><blockquote><p>说明：对大段代码进行<code>try-catch</code>，使程序无法根据不同的异常做出正确的应激反应，也不利于定位问题，这是一种不负责任的表现。</p></blockquote><p> 正例：用户注册的场景中，如果用户输入非法字符，或用户名称已存在，或用户输入密码过于简单，在程序上作出分门别类的判断，并提示给用户。</p></li><li><strong>【强制】</strong><code>捕获异常</code>是为了<code>处理</code>它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。</li><li><strong>【强制】</strong>有<code>try</code>块放到了事务代码中，<code>catch</code>异常后，如果需要<code>回滚事务</code>，一定要注意<code>手动回滚事务</code>。</li><li><p><strong>【强制】</strong><code>finally</code>块必须对资源对象、流对象进行关闭，有异常也要做<code>try-catch</code>。</p><blockquote><p>说明：如果<code>JDK 7</code> 及以上，可以使用<code>try-with-resources</code>方式。</p></blockquote></li><li><p><strong>【强制】</strong>不要在<code>finally</code>块中使用<code>return</code>。</p><blockquote><p>说明：<code>finally</code>块中的<code>return</code>返回后方法结束执行，不会再执行<code>try</code>块中的<code>return</code>语句。</p></blockquote></li><li><p><strong>【强制】</strong>捕获异常与抛异常，必须是<code>完全匹配</code>，或者<code>捕获异常是抛异常的父类</code>。</p><blockquote><p>说明：如果预期对方抛的是绣球，实际接到的是铅球，就会产生意外情况。</p></blockquote></li><li><p><strong>【推荐】</strong>方法的返回值可以为<code>null</code>，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回<code>null</code>值。</p><blockquote><p>说明：本手册明确防止<code>NPE</code>是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败、序列化失败、运行时异常等场景返回<code>null</code>的情况。</p></blockquote></li><li><p><strong>【推荐】</strong>防止<code>NPE</code>，是程序员的基本修养，注意<code>NPE</code>产生的场景：<br>1 ）返回类型为基本数据类型，<code>return</code>包装数据类型的对象时，自动拆箱有可能产生<code>NPE</code>。<br>反例：<code>public int f() { return Integer对象}， 如果为null，自动解箱抛NPE。</code><br>2 ） 数据库的查询结果可能为<code>null</code>。<br>3 ） 集合里的元素即使<code>isNotEmpty</code>，取出的数据元素也可能为<code>null</code>。<br>4 ） 远程调用返回对象时，一律要求进行空指针判断，防止<code>NPE</code>。<br>5 ） 对于<code>Session中</code>获取的数据，建议<code>NPE</code>检查，避免<code>空指针</code>。<br>6 ） 级联调用<code>obj.getA().getB().getC()</code>；一连串调用，易产生<code>NPE</code>。<br>正例：使用<code>JDK8</code>的<code>Optional</code>类来防止<code>NPE</code>问题。</p></li><li><strong>【推荐】</strong>定义时区分<code>unchecked</code> / <code>checked</code> 异常，避免直接抛出<code>new RuntimeException()</code>，更不允许抛出<code>Exception</code>或者<code>Throwable</code>，应使用有业务含义的自定义异常。推荐业界已定义过的自定义异常，如：<code>DAOException</code> / <code>ServiceException</code>等。</li><li><p>【参考】对于公司外的<code>http</code>/<code>api</code>开放接口必须使用”<code>错误码</code>“；而应用内部推荐异常抛出；跨应用间<code>RPC</code>调用优先考虑使用<code>Result</code>方式，封装<code>isSuccess()</code>方法、”错误码”、”错误简短信息”。</p><blockquote><p>说明：关于<code>RPC</code>方法返回方式使用<code>Result</code>方式的理由：</p><ul><li>使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。</li><li>如果不加栈信息，只是<code>new</code>自定义异常，加入自己的理解的<code>error message</code>，对于调用端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输的性能损耗也是问题。</li></ul></blockquote></li><li><p>【参考】避免出现重复的代码（<code>Don’t Repeat Yourself</code>），即<code>DRY</code>原则。</p><blockquote><p>说明：随意复制和粘贴代码，必然会导致代码的重复，在以后需要修改时，需要修改所有的副本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是组件化。</p></blockquote><p>正例：一个类中有多个<code>public</code>方法，都需要进行数行相同的参数校验操作，这个时候请抽取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkParam</span><span class="params">(DTO dto)</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="二-日志规约"><a href="#二-日志规约" class="headerlink" title="(二) 日志规约"></a>(二) 日志规约</h3><ol><li><p><strong>【强制】</strong>应用中不可直接使用日志系统（<code>Log4j</code>、<code>Logback</code>）中的<code>API</code>，而应依赖使用日志框架<code>SLF4J</code>中的<code>API</code>，使用<code>门面模式</code>的日志框架，有利于维护和各个类的日志处理方式统一。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(Abc.class);</span><br></pre></td></tr></table></figure></li><li><p><strong>【强制】</strong>日志文件至少保存 <code>15</code> 天，因为有些异常具备以”周”为频次发生的特点。</p></li><li><p><strong>【强制】</strong>应用中的扩展日志（如打点、临时监控、访问日志等）命名方式：<code>appName_logType_logName.log</code>。<br><code>logType</code>:日志类型，如<code>stats</code>/<code>monitor</code>/<code>access</code>等；<code>logName</code>:日志描述。这种命名的好处：通过文件名就可知道日志文件属于什么应用，什么类型，什么目的，也有利于归类查找。<br> 正例：<code>mppserver</code>应用中单独监控时区转换异常，如：<code>ppserver_monitor_timeZoneConvert.log</code></p><blockquote><p>说明：推荐对日志进行分类，如将错误日志和业务日志分开存放，便于开发人员查看，也便于通过日志对系统进行及时监控。</p></blockquote></li><li><p><strong>【强制】</strong>对<code>trace</code>/<code>debug</code>/<code>info</code>级别的日志输出，必须使用条件输出形式或者使用占位符的方式。</p><blockquote><p>说明：<code>logger.debug(&quot;Processing trade with id: &quot; + id + &quot; and symbol: &quot; + symbol);</code>如果日志级别是<code>warn</code>，上述日志不会打印，但是会执行字符串拼接操作，如果<code>symbol</code>是对象，会执行<code>toString()</code>方法，浪费了系统资源，执行了上述操作，最终日志却没有打印。</p></blockquote><p> 正例：（条件）建设采用如下方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Processing trade with id: "</span> + id + <span class="string">" and symbol: "</span> + symbol);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 正例：（占位符）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.debug(<span class="string">"Processing trade with id: &#123;&#125; and symbol : &#123;&#125; "</span>, id, symbol);</span><br></pre></td></tr></table></figure></li><li><p><strong>【强制】</strong>避免重复打印日志，浪费磁盘空间，务必在<code>log4j.xml</code>中设置<code>additivity=false</code>。<br> 正例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.taobao.dubbo.config"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>【强制】</strong>异常信息应该包括两类信息：<code>案发现场信息</code>和<code>异常堆栈信息</code>。如果不处理，那么通过关键字<code>throws</code>往上抛出。<br> 正例：<code>logger.error(各类参数或者对象toString() + &quot;_&quot; + e.getMessage(), e);</code></p></li><li><p><strong>【推荐】</strong>谨慎地记录日志。生产环境禁止输出<code>debug</code>日志；有选择地输出<code>info</code>日志；如果使用<code>warn</code>来记录刚上线时的业务行为信息，一定要注意日志输出量的问题，避免把服务器磁盘撑爆，并记得及时删除这些观察日志。</p><blockquote><p>说明：大量地输出无效日志，不利于系统性能提升，也不利于快速定位错误点。记录日志时请思考：这些日志真的有人看吗？看到这条日志你能做什么？能不能给问题排查带来好处？</p></blockquote></li><li><p><strong>【推荐】</strong>可以使用<code>warn</code>日志级别来记录用户输入参数错误的情况，避免用户投诉时，无所适从。如非必要，请不要在此场景打出<code>error</code>级别，避免频繁报警。</p><blockquote><p>说明：注意日志输出的级别，error级别只记录系统逻辑出错、异常或者重要的错误信息。</p></blockquote></li><li><p><strong>【推荐】</strong>尽量用英文来描述日志错误信息，如果日志中的错误信息用英文描述不清楚的话使用中文描述即可，否则容易产生歧义。国际化团队或海外部署的服务器由于字符集问题，<strong>【强制】</strong>使用全英文来注释和描述日志错误信息。</p></li></ol><h2 id="三、单元测试"><a href="#三、单元测试" class="headerlink" title="三、单元测试"></a>三、单元测试</h2><ol><li><p><strong>【强制】</strong>好的单元测试必须遵守<code>AIR</code>原则。</p><blockquote><p>说明：单元测试在线上运行时，感觉像空气（AIR）一样并不存在，但在测试质量的保障上，却是非常关键的。好的单元测试宏观上来说，具有自动化、独立性、可重复执行的特点。</p><ul><li>A：Automatic（自动化）</li><li>I：Independent（独立性）</li><li>R：Repeatable（可重复）</li></ul></blockquote></li><li><strong>【强制】</strong>单元测试应该是全自动执行的，并且非交互式的。测试用例通常是被定期执行的，执行过程必须完全自动化才有意义。输出结果需要人工检查的测试不是一个好的单元测试。单元测试中不准使用<code>System.out</code>来进行人肉验证，必须使用<code>assert</code>来验证。</li><li><strong>【强制】</strong>保持单元测试的<code>独立性</code>。为了保证单元测试稳定可靠且便于维护，<code>单元测试用例之间决不能互相调用，也不能依赖执行的先后次序</code>。<br> 反例：method2需要依赖method1的执行，将执行结果作为method2的输入。</li><li><strong>【强制】</strong>单元测试是可以重复执行的，不能受到外界环境的影响。<br> 说明：单元测试通常会被放到持续集成中，每次有代码<code>check in</code>时单元测试都会被执行。如果单测对外部环境（网络、服务、中间件等）有依赖，容易导致持续集成机制的不可用。<br> 正例：为了不受外界环境影响，要求设计代码时就把<code>SUT</code>的依赖改成注入，在测试时用<code>spring</code>这样的DI框架注入一个本地（内存）实现或者<code>Mock</code>实现。</li><li><strong>【强制】</strong>对于单元测试，要保证测试粒度足够小，有助于精确定位问题。单测粒度至多是类级别，一般是方法级别。<blockquote><p>说明：只有测试粒度小才能在出错时尽快定位到出错位置。单测不负责检查跨类或者跨系统的交互逻辑，那是集成测试的领域。</p></blockquote></li><li><strong>【强制】</strong>核心业务、核心应用、核心模块的增量代码确保单元测试通过。<blockquote><p>说明：新增代码及时补充单元测试，如果新增代码影响了原有单元测试，请及时修正。</p></blockquote></li><li><strong>【强制】</strong>单元测试代码必须写在如下工程目录：<code>src/test/java</code>，不允许写在业务代码目录下。<blockquote><p>说明：源码构建时会跳过此目录，而单元测试框架默认是扫描此目录。</p></blockquote></li><li><strong>【推荐】</strong>单元测试的基本目标：语句覆盖率达到<code>70%</code>；核心模块的语句覆盖率和分支覆盖率都要达到<code>100%</code><blockquote><p>说明：在工程规约的应用分层中提到的<code>DAO</code>层，<code>Manager</code>层，可重用度高的<code>Service</code>，都应该进行单元测试。</p></blockquote></li><li><p><strong>【推荐】</strong>编写单元测试代码遵守<code>BCDE</code>原则，以保证被测试模块的交付质量。</p><ul><li>B：<code>Border</code>，边界值测试，包括循环边界、特殊取值、特殊时间点、数据顺序等。</li><li>C：<code>Correct</code>，正确的输入，并得到预期的结果。</li><li>D：<code>Design</code>，与设计文档相结合，来编写单元测试。</li><li>E：<code>Error</code>，强制错误信息输入（如：非法数据、异常流程、非业务允许输入等），并得到预期的结果。</li></ul></li><li><p><strong>【推荐】</strong>对于数据库相关的查询，更新，删除等操作，不能假设数据库里的数据是存在的，或者直接操作数据库把数据插入进去，请使用程序插入或者导入数据的方式来准备数据。<br>反例：删除某一行数据的单元测试，在数据库中，先直接手动增加一行作为删除目标，但是这一行新增数据并不符合业务插入规则，导致测试结果异常。</p></li><li><strong>【推荐】</strong>和数据库相关的单元测试，可以设定<code>自动回滚机制</code>，不给数据库造成<code>脏数据</code>。或者对单元测试产生的数据有明确的前后缀标识。<blockquote><p>正例：在<code>RDC</code>内部单元测试中，使用<code>RDC_UNIT_TEST_</code>的前缀标识数据。</p></blockquote></li><li><strong>【推荐】</strong>对于不可测的代码建议做必要的重构，使代码变得可测，避免为了达到测试要求而书写不规范测试代码。</li><li><strong>【推荐】</strong>在设计评审阶段，<code>开发人员</code>需要和<code>测试人员</code>一起<code>确定单元测试范围</code>，单元测试最好覆盖所有测试用例。</li><li><strong>【推荐】</strong>单元测试作为一种质量保障手段，不建议项目发布后补充单元测试用例，建议在项目提测前完成单元测试。</li><li>【参考】为了更方便地进行单元测试，业务代码应避免以下情况：<ul><li>构造方法中做的事情过多。</li><li>存在过多的全局变量和静态方法。</li><li>存在过多的外部依赖。</li><li>存在过多的条件语句。<br>说明：多层条件语句建议使用卫语句、策略模式、状态模式等方式重构。</li></ul></li><li>【参考】不要对单元测试存在如下误解：<ul><li>那是测试同学干的事情。本文是开发手册，凡是本文内容都是与开发同学强相关的。</li><li>单元测试代码是多余的。系统的整体功能与各单元部件的测试正常与否是强相关的。</li><li>单元测试代码不需要维护。一年半载后，那么单元测试几乎处于废弃状态。</li><li>单元测试与线上故障没有辩证关系。好的单元测试能够最大限度地规避线上故障。</li></ul></li></ol><h2 id="四、安全规约"><a href="#四、安全规约" class="headerlink" title="四、安全规约"></a>四、安全规约</h2><ol><li><p><strong>【强制】</strong>隶属于用户个人的页面或者功能必须进行权限控制校验。</p><blockquote><p>说明：防止没有做水平权限校验就可随意访问、修改、删除别人的数据，比如查看他人的私信内容、修改他人的订单。</p></blockquote></li><li><p><strong>【强制】</strong>用户敏感数据禁止直接展示，必须对展示数据进行脱敏。</p><blockquote><p>说明：中国大陆个人手机号码显示为:158<em>**</em>9119，隐藏中间 4 位，防止隐私泄露。</p></blockquote></li><li><strong>【强制】</strong>用户输入的<code>SQL</code>参数严格使用参数绑定或者<code>METADATA</code>字段值限定，防止<code>SQL注入</code>，禁止<code>字符串拼接SQL</code>访问数据库。</li><li><strong>【强制】</strong>用户请求传入的任何参数必须做有效性验证。<blockquote><p>说明：忽略参数校验可能导致：</p><ul><li>page size过大导致内存溢出</li><li>恶意<code>order by</code>导致数据库慢查询</li><li>任意重定向</li><li><code>SQL注入</code></li><li>反序列化注入</li><li>正则输入源串拒绝服务<code>ReDoS</code><br>说明：<code>Java</code>代码用正则来验证客户端的输入，有些正则写法验证普通用户输入没有问题，但是如果攻击人员使用的是特殊构造的字符串来验证，有可能导致死循环的结果。</li></ul></blockquote></li><li><strong>【强制】</strong>禁止向<code>HTML</code>页面输出未经安全过滤或未正确转义的用户数据。</li><li><strong>【强制】</strong>表单、<code>AJAX</code>提交必须执行<code>CSRF</code>安全验证。<blockquote><p>说明：<code>CSRF(Cross-site request forgery)</code>跨站请求伪造是一类常见编程漏洞。对于存在<code>CSRF</code>漏洞的应用/网站，攻击者可以事先构造好<code>URL</code>，只要受害者用户一访问，后台便在用户不知情的情况下对数据库中用户参数进行相应修改。</p></blockquote></li><li><strong>【强制】</strong>在使用平台资源，譬如短信、邮件、电话、下单、支付，必须实现正确的防重放的机制，如数量限制、疲劳度控制、验证码校验，避免被滥刷而导致资损。<blockquote><p>说明：如注册时发送验证码到手机，如果没有限制次数和频率，那么可以利用此功能骚扰到其它用户，并造成短信平台资源浪费。</p></blockquote></li><li><strong>【推荐】</strong>发贴、评论、发送即时消息等用户生成内容的场景必须实现防刷、文本内容违禁词过滤等风控策略。</li></ol><h2 id="五、MySQL数据库"><a href="#五、MySQL数据库" class="headerlink" title="五、MySQL数据库"></a>五、MySQL数据库</h2><h3 id="一-建表规约"><a href="#一-建表规约" class="headerlink" title="(一) 建表规约"></a>(一) 建表规约</h3><ol><li><p><strong>【强制】</strong>表达是与否概念的字段，必须使用<code>is_xxx</code>的方式命名，数据类型是<code>unsigned tinyint（ 1 表示是， 0 表示否）</code>。</p><blockquote><p>说明：任何字段如果为非负数，必须是unsigned。</p></blockquote><p> 注意：<code>POJO</code>类中的任何布尔类型的变量，都不要加<code>is</code>前缀，所以，需要在<code>&lt;resultMap&gt;</code>设置从<code>is_xxx</code>到<code>Xxx</code>的映射关系。数据库表示是与否的值，使用<code>tinyint</code>类型，坚持<code>is_xxx</code>的命名方式是为了明确其取值含义与取值范围。<br> 正例：表达逻辑删除的字段名<code>is_deleted</code>， 1 表示删除， 0 表示未删除。</p></li><li><p><strong>【强制】</strong>表名、字段名必须使用<code>小写字母</code>或<code>数字</code>，<code>禁止出现数字开头</code>，<code>禁止两个下划线中间只出现数字</code>。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。</p><blockquote><p>说明：<code>MySQL</code>在<code>Windows下不区分大小写</code>，但在<code>Linux下默认是区分大小写</code>。因此，数据库名、表名、字段名，都<code>不允许出现任何大写字母</code>，避免节外生枝。</p></blockquote><p> 正例：<code>aliyun_admin</code>，<code>rdc_config</code>，<code>level3_name</code><br> 反例：<code>AliyunAdmin</code>，<code>rdcConfig</code>，<code>level_3_name</code></p></li><li><strong>【强制】</strong>表名不使用复数名词。<blockquote><p>说明：表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于DO类名也是单数形式，符合表达习惯。</p></blockquote></li><li><strong>【强制】</strong>禁用保留字，如<code>desc</code>、<code>range</code>、<code>match</code>、<code>delayed</code>等，请参考MySQL官方保留字。</li><li><strong>【强制】</strong>主键索引名为<code>pk_</code>字段名；唯一索引名为<code>uk_</code>字段名；普通索引名则为<code>idx_</code>字段名。<blockquote><p>说明：<code>pk_</code> 即<code>primary key</code>；<code>uk_</code> 即 <code>unique key</code>；<code>idx_</code> 即<code>index</code>的简称。</p></blockquote></li><li><strong>【强制】</strong>小数类型为<code>decimal</code>，禁止使用<code>float</code>和<code>double</code>。<blockquote><p>说明：<code>float</code>和<code>double</code>在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不正确的结果。如果存储的数据范围超过<code>decimal</code>的范围，建议将数据拆成整数和小数分开存储。</p></blockquote></li><li><strong>【强制】</strong>如果存储的字符串长度几乎相等，使用<code>char</code>定长字符串类型。</li><li><strong>【强制】</strong><code>varchar</code>是可变长字符串，不预先分配存储空间，长度不要超过 <code>5000</code> ，如果存储长度大于此值，定义字段类型为<code>text</code>，独立出来一张表，用主键来对应，避免影响其它字段索引效率。</li><li><strong>【强制】</strong>表必备三字段：<code>id</code>, <code>gmt_create</code>, <code>gmt_modified</code>。<blockquote><p>说明：其中<code>id</code>必为主键，类型为<code>bigint</code> <code>unsigned</code>、<code>单表时自增</code>、步长为 <code>1</code> 。<code>gmt_create</code>,<code>gmt_modifie</code>d的类型均为<code>datetime</code>类型，前者现在时表示主动创建，后者过去分词表示被动更新。</p></blockquote></li><li><strong>【推荐】</strong>表的命名最好是加上”业务名称_表的作用”。<br>正例：<code>alipay_task</code> / <code>force_project</code> / <code>trade_config</code></li><li><strong>【推荐】</strong>库名与应用名称尽量一致。</li><li><strong>【推荐】</strong>如果修改字段含义或对字段表示的状态追加时，需要及时更新字段注释。</li><li><strong>【推荐】</strong>字段允许适当冗余，以提高查询性能，但必须考虑数据一致。冗余字段应遵循：<br>1 ）不是频繁修改的字段。<br>2 ）不是<code>varchar</code>超长字段，更不能是<code>text</code>字段。<br>正例：商品类目名称使用频率高，字段长度短，名称基本一成不变，可在相关联的表中冗余存储类目名称，避免关联查询。</li><li><strong>【推荐】</strong>单表行数超过 <code>500</code> 万行或者单表容量超过 <code>2</code> GB，才推荐进行分库分表。<blockquote><p>说明：如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。</p></blockquote></li><li>【参考】合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检索速度。<br>正例：如下表，其中无符号值可以避免误存负数，且扩大了表示范围。</li></ol><table><thead><tr><th>对象</th><th>年龄区间</th><th>类型</th><th>字节</th><th>表示范围</th></tr></thead><tbody><tr><td>人</td><td>150岁之内</td><td><code>tinyint unsigned</code></td><td>1</td><td>无符号值： 0 到 255</td></tr><tr><td>龟</td><td>数百岁</td><td><code>smallint unsigned</code></td><td>2</td><td>无符号值： 0 到 65535</td></tr><tr><td>恐龙化石</td><td>数千万年</td><td><code>int unsigned</code></td><td>4</td><td>无符号值： 0 到约42.9亿</td></tr><tr><td>太阳</td><td>约 50 亿年</td><td><code>bigint unsigned</code></td><td>8</td><td>无符号值： 0 到约 10 的 19 次方</td></tr></tbody></table><h3 id="二-索引规约"><a href="#二-索引规约" class="headerlink" title="(二) 索引规约"></a>(二) 索引规约</h3><ol><li><p><strong>【强制】</strong>业务上具有唯一特性的字段，即使是多个字段的组合，也必须建成唯一索引。</p><blockquote><p>说明：不要以为唯一索引影响了insert速度，这个速度损耗可以忽略，但提高查找速度是明显的；另外，即使在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必然有脏数据产生。</p></blockquote></li><li><p><strong>【强制】</strong>超过<code>三个表</code>禁止join。需要join的字段，<code>数据类型必须绝对一致</code>；多表关联查询时，保证<code>被关联的字段需要有索引</code>。</p><blockquote><p>说明：即使双表join也要注意表索引、SQL性能。</p></blockquote></li><li><p><strong>【强制】</strong>在<code>varchar</code>字段上建立索引时，必须<code>指定索引长度</code>，没必要对全字段建立索引，根据实际文本区分度决定索引长度即可。</p><blockquote><p>说明：索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为 <code>20</code> 的索引，区分度会高达<code>90%</code>以上，可以使用<code>count(distinct left(列名, 索引长度))/count(*)</code>的区分度来确定。</p></blockquote></li><li><p><strong>【强制】</strong>页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。</p><blockquote><p>说明：索引文件具有<code>B-Tree</code>的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。</p></blockquote></li><li><strong>【推荐】</strong>如果有<code>order by</code>的场景，请注意利用<code>索引的有序性</code>。<code>order by</code> 最后的字段是组合索引的一部分，并且放在索引组合顺序的最后，避免出现<code>file_sort</code>的情况，影响查询性能。<br> 正例：<code>where a=? and b=? order by c;</code> 索引：a_b_c<br> 反例：索引中有范围查找，那么索引有序性无法利用，如：<code>WHERE a&gt;10 ORDER BY b;</code> 索引a_b无法排序。</li><li><p><strong>【推荐】</strong>利用覆盖索引来进行查询操作，避免回表。</p><blockquote><p>说明：如果一本书需要知道第 11 章是什么标题，会翻开第 11 章对应的那一页吗？目录浏览一下就好，这个目录就是起到覆盖索引的作用。</p></blockquote><p> 正例：能够建立索引的种类分为<code>主键索引</code>、<code>唯一索引</code>、<code>普通索引</code>三种，而<code>覆盖索引</code>只是一种查询的一种效果，用<code>explain</code>的结果，<code>extra</code>列会出现：<code>using index</code>。</p></li><li><p><strong>【推荐】</strong>利用<code>延迟关联</code>或者<code>子查询</code>优化超多分页场景。</p><blockquote><p>说明：<code>MySQL</code>并不是跳过<code>offset</code>行，而是取<code>offset+N</code>行，然后返回放弃前<code>offset</code>行，返回<code>N</code>行，那当<code>offset</code>特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过特定阈值的页数进行<code>SQL</code>改写。</p></blockquote><p> 正例：先快速定位需要获取的id段，然后再关联：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.* <span class="keyword">FROM</span> 表<span class="number">1</span> a, (<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">where</span> 条件 <span class="keyword">LIMIT</span> <span class="number">100000</span>,<span class="number">20</span> ) b <span class="keyword">where</span> a.id=b.id</span><br></pre></td></tr></table></figure></li><li><p><strong>【推荐】</strong> SQL性能优化的目标：至少要达到 <code>range</code> 级别，要求是<code>ref</code>级别，如果可以是<code>consts</code>最好。</p><blockquote><p>说明：<br> 1 ）<code>consts</code> 单表中最多只有一个匹配行（主键或者唯一索引），在优化阶段即可读取到数据。<br> 2 ）<code>ref</code> 指的是使用普通的索引（<code>normal index</code>）。<br> 3 ）<code>range</code> 对索引进行范围检索。</p></blockquote><p> 反例：<code>explain</code>表的结果，<code>type=index</code>，索引物理文件全扫描，速度非常慢，这个<code>index</code>级别比较<code>range</code>还低，与全表扫描是小巫见大巫。</p></li><li><strong>【推荐】</strong>建组合索引的时候，区分度最高的在最左边。<br> 正例：如果<code>where a=? and b=?</code> ，如果a列的几乎接近于唯一值，那么只需要单建idx_a索引即可。<blockquote><p>说明：存在非等号和等号混合时，在建索引时，请把等号条件的列前置。如：<code>where c&gt;? and d=?</code> 那么即使c的区分度更高，也必须把d放在索引的最前列，即索引<code>idx_d_c</code>。</p></blockquote></li><li><strong>【推荐】</strong>防止因字段类型不同造成的隐式转换，导致索引失效。</li><li>【参考】创建索引时避免有如下极端误解：<br>1 ）宁滥勿缺。认为一个查询就需要建一个索引。<br>2 ）宁缺勿滥。认为索引会消耗空间、严重拖慢更新和新增速度。<br>3 ）抵制惟一索引。认为业务的惟一性一律需要在应用层通过”先查后插”方式解决。</li></ol><h3 id="三-SQL语句"><a href="#三-SQL语句" class="headerlink" title="(三) SQL语句"></a>(三) SQL语句</h3><ol><li><strong>【强制】</strong>不要使用<code>count(列名)</code>或<code>count(常量)</code>来替代<code>count(*)</code>，<code>count(*)</code>是<code>SQL 92</code> 定义的标准统计行数的语法，跟数据库无关，跟<code>NULL</code>和<code>非NULL</code>无关。<blockquote><p>说明：<code>count(*)</code>会统计值<code>为NULL的行</code>，而<code>count(列名)</code>不会统计此列<code>为NULL值的行</code>。</p></blockquote></li><li><strong>【强制】</strong><code>count(distinct col)</code> 计算该列<code>除NULL</code>之外的不重复行数，注意 <code>count(distinct col1, col 2 )</code> 如果其中<code>一列全为NULL</code>，那么即使另一列有不同的值，也返回为 <code>0</code> 。</li><li><strong>【强制】</strong>当某一列的值全是<code>NULL</code>时，<code>count(col)</code>的返回结果为 0 ，但<code>sum(col)</code>的返回结果为<code>NULL</code>，因此使用<code>sum()</code>时需注意NPE问题。<br> 正例：可以使用如下方式来避免<code>sum</code>的<code>NPE</code>问题：<code>SELECT IF(ISNULL(SUM(g)),0,SUM(g)) FROM table;</code></li><li><strong>【强制】</strong>使用<code>ISNULL()</code>来判断是否为<code>NULL</code>值。<blockquote><p>说明：NULL与任何值的直接比较都为<code>NULL</code>。<br> 1 ） <code>NULL&lt;&gt;NULL</code>的返回结果是<code>NULL</code>，而不是<code>false</code>。<br> 2 ） <code>NULL=NULL</code>的返回结果是<code>NULL</code>，而不是<code>true</code>。<br> 3 ） <code>NULL&lt;&gt;1</code>的返回结果是<code>NULL</code>，而不是<code>true</code>。</p></blockquote></li><li><strong>【强制】</strong> 在代码中写分页查询逻辑时，若<code>count</code>为 <code>0</code> 应直接返回，避免执行后面的分页语句。</li><li><strong>【强制】</strong>不得使用外键与级联，<code>一切外键概念</code>必须在<code>应用层</code>解决。<blockquote><p>说明：以学生和成绩的关系为例，学生表中的<code>student_id</code>是主键，那么成绩表中的<code>student_id</code>则为外键。如果更新学生表中的<code>student_id</code>，同时触发成绩表中的<code>student_id</code>更新，即为<code>级联更新</code>。外键与级联更新适用于单机低并发，不适合分布式、高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。</p></blockquote></li><li><strong>【强制】</strong><code>禁止使用存储过程</code>，存储过程难以调试和扩展，更没有移植性。</li><li><strong>【强制】</strong>数据订正（特别是删除、修改记录操作）时，要先<code>select</code>，避免出现误删除，确认无误才能执行更新语句。</li><li><strong>【推荐】</strong><code>in</code>操作能避免则避免，若实在避免不了，需要仔细评估<code>in</code>后边的集合元素数量，控制在 <code>1000</code> 个之内。</li></ol><ol start="10"><li>【参考】如果有国际化需要，所有的字符存储与表示，均以<code>utf-8</code> 编码，注意字符统计函数的区别。<blockquote><p>说明：</p><pre><code>SELECT LENGTH(&quot;轻松工作&quot;)； 返回为 12SELECT CHARACTER_LENGTH(&quot;轻松工作&quot;)； 返回为 4</code></pre><p>如果需要存储表情，那么选择<code>utf8mb4</code>来进行存储，注意它与<code>utf-8</code>编码的区别。</p></blockquote></li><li>【参考】<code>TRUNCATE TABLE</code> 比 <code>DELETE</code> 速度快，且使用的系统和事务日志资源少，但<code>TRUNCATE</code>无事务且不触发<code>trigger</code>，有可能造成事故，故不建议在开发代码中使用此语句。<blockquote><p>说明：<code>TRUNCATE TABLE</code> 在功能上与不带 <code>WHERE</code> 子句的 <code>DELETE</code> 语句相同。</p></blockquote></li></ol><h3 id="四-ORM映射"><a href="#四-ORM映射" class="headerlink" title="(四) ORM映射"></a>(四) ORM映射</h3><ol><li><p><strong>【强制】</strong>在表查询中，一律不要使用 <code>*</code> 作为查询的字段列表，需要哪些字段必须明确写明。</p><blockquote><p>说明：<br> 1 ）增加查询分析器解析成本。<br> 2 ）增减字段容易与<code>resultMap</code>配置不一致。<br> 3 ）无用字段增加网络消耗，尤其是<code>text</code>类型的字段。</p></blockquote></li><li><strong>【强制】</strong><code>POJO</code>类的布尔属性不能加<code>is</code>，而数据库字段必须加<code>is_</code>，要求在<code>resultMap</code>中进行字段与属性之间的映射。<blockquote><p>说明：参见定义<code>POJO</code>类以及数据库字段定义规定，在<code>&lt;resultMap&gt;</code>中增加映射，是必须的。在<code>MyBatis Generator</code>生成的代码中，需要进行对应的修改。</p></blockquote></li><li><strong>【强制】</strong>不要用<code>resultClass</code>当返回参数，即使所有类属性名与数据库字段一一对应，也需要定义；反过来，每一个表也必然有一个<code>POJO</code>类与之对应。<blockquote><p>说明：配置映射关系，使字段与<code>DO</code>类解耦，方便维护。</p></blockquote></li><li><strong>【强制】</strong><code>sql.xml</code>配置参数使用：<code>#{}</code>，<code>#param#</code> 不要使用<code>${}</code> 此种方式容易出现<code>SQL注入</code>。</li><li><p><strong>【强制】</strong><code>iBATIS</code>自带的<code>queryForList(String statementName,int start,int size)</code>不推荐使用。</p><blockquote><p>说明：其实现方式是在数据库取到<code>statementName</code>对应的<code>SQL</code>语句的所有记录，再通过<code>subList</code>取<code>start</code>,<code>size</code>的子集合。</p></blockquote><p> 正例：</p><pre><code class="java">Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();map.put(<span class="string">"start"</span>, start);map.put(<span class="string">"size"</span>, size);</code></pre></li><li><strong>【强制】</strong>不允许直接拿<code>HashMap</code>与<code>Hashtable</code>作为查询结果集的输出。<blockquote><p>说明：<code>resultClass=&quot;Hashtable&quot;</code>，会置入字段名和属性值，但是值的类型不可控。</p></blockquote></li><li><p><strong>【强制】</strong>更新数据表记录时，必须同时更新记录对应<code>的gmt_modified</code>字段值为当前时间段，都进行<code>update table set c1=value1,c2=value2,c3=value3;</code> 这是不对的。执行<code>SQL</code>时，不要更新无改动的字段，一是<code>易出错</code>；二是<code>效率低</code>；三是增加<code>binlog</code>存储。</p></li><li><p>【参考】<code>@Transactional</code>事务不要滥用。事务会影响数据库的<code>QPS</code>，另外使用事务的地方需要考虑各方面的回滚方案，包括<code>缓存回滚</code>、<code>搜索引擎回滚</code>、<code>消息补偿</code>、<code>统计修正</code>等。</p></li><li>【参考】<code>&lt;isEqual&gt;</code>中的<code>compareValue</code>是与属性值对比的常量，一般是<code>数字</code>，表示相等时带上此条件；<code>&lt;isNotEmpty&gt;</code>表示<code>不为空且不为null</code>时执行；<code>&lt;isNotNull&gt;</code>表示<code>不为null值</code>时执行。</li></ol><h2 id="六、工程结构"><a href="#六、工程结构" class="headerlink" title="六、工程结构"></a>六、工程结构</h2><h3 id="一-应用分层"><a href="#一-应用分层" class="headerlink" title="(一) 应用分层"></a>(一) 应用分层</h3><p><center><img src="/2018/10/08/Java开发规范/1539094731060.jpg" alt=""></center></p><ol><li><strong>【推荐】</strong>图中默认上层依赖于下层，箭头关系表示可直接依赖，如：<code>开放接口</code>层可以依赖于<code>Web</code>层，也可以直接依赖于<code>Service</code>层，依此类推：</li></ol><ul><li>开放接口层：可直接封装<code>Service</code>方法暴露成<code>RPC</code>接口；通过<code>Web</code>封装成<code>http</code>接口；进行网关安全控制、流量控制等。</li><li>终端显示层：各个端的模板渲染并执行显示的层。当前主要是<code>velocity</code>渲染，<code>JS</code>渲染，<code>JSP</code>渲染，移动端展示等。</li><li>Web层：主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。</li><li>Service层：相对具体的业务逻辑服务层。</li><li>Manager层：通用业务处理层，它有如下特征：<br>  1 ） 对第三方平台封装的层，预处理返回结果及转化异常信息；<br>  2 ） 对<code>Service</code>层通用能力的下沉，如缓存方案、中间件通用处理；<br>  3 ） 与<code>DAO</code>层交互，对多个<code>DAO</code>的组合复用。</li><li>DAO层：数据访问层，与底层<code>MySQL</code>、<code>Oracle</code>、<code>Hbase</code>等进行数据交互。</li><li>外部接口或第三方平台：包括其它部门<code>RPC</code>开放接口，基础平台，其它公司的<code>HTTP</code>接口。</li></ul><ol start="2"><li><p>【参考】（分层异常处理规约）在<code>DAO</code>层，产生的异常类型有很多，无法用细粒度的异常进行<code>catch</code>，使用c<code>atch(Exception e)</code>方式，并<code>throw new DAOException(e)</code>，不需要打印日志，因为日志在<code>Manager</code>/<code>Service</code>层一定需要捕获并打印到日志文件中去，如果同台服务器再打日志，浪费性能和存储。在<code>Service</code>层出现异常时，必须记录出错日志到磁盘，尽可能带上参数信息，相当于保护<code>案发现场</code>。如果<code>Manager</code>层与<code>Service</code>同机部署，日志方式与<code>DAO</code>层处理一致，如果是单独部署，则采用与<code>Service</code>一致的处理方式。<code>Web</code>层绝不应该继续往上抛异常，因为已经处于顶层，如果意识到这个异常将导致页面无法正常渲染，那么就应该直接跳转到友好错误页面，加上用户容易理解的错误提示信息。开放接口层要将异常处理成错误码和错误信息方式返回。</p></li><li><p>【参考】分层领域模型规约：</p></li></ol><ul><li><code>DO（Data Object）</code>：此对象与数据库表结构一一对应，通过<code>DAO</code>层向上传输数据源对象。</li><li><code>DTO（Data Transfer Object）</code>：数据传输对象，<code>Service</code>或<code>Manager</code>向外传输的对象。</li><li><code>BO（Business Object</code>）：业务对象，由<code>Service</code>层输出的封装业务逻辑的对象。</li><li><code>AO（Application Object）</code>：应用对象，在<code>Web</code>层与<code>Service</code>层之间抽象的复用对象模型，极为贴近展示层，复用度不高。</li><li><code>VO（View Object）</code>：显示层对象，通常是<code>Web</code>向模板渲染引擎层传输的对象。</li><li>Query：数据查询对象，各层接收上层的查询请求。注意超过 <code>2</code> 个参数的查询封装，禁止使用<code>Map</code>类来传输。</li></ul><h3 id="二-二方库依赖"><a href="#二-二方库依赖" class="headerlink" title="(二) 二方库依赖"></a>(二) 二方库依赖</h3><ol><li><p><strong>【强制】</strong>定义GAV遵从以下规则：<br> 1 ） GroupID格式：com.{公司/BU }.业务线 [.子业务线]，最多 4 级。</p><blockquote><p>说明：{公司/BU} 例如：<code>alibaba</code>/<code>taobao</code>/<code>tmall</code>/<code>aliexpress</code>等<code>BU</code>一级；子业务线可选。</p></blockquote><p> 正例：<code>com.taobao.jstorm</code> 或 <code>com.alibaba.dubbo.register</code><br> 2 ） <code>ArtifactID</code>格式：产品线名-模块名。语义不重复不遗漏，先到中央仓库去查证一下。<br> 正例：<code>dubbo-client</code> / <code>fastjson-api</code> / <code>jstorm-tool</code>    3 ） <code>Version</code>：详细规定参考下方。</p></li><li><p><strong>【强制】</strong>二方库版本号命名方式：<code>主版本号</code>.<code>次版本号</code>.<code>修订号</code><br> 1 ） 主版本号：产品方向改变，或者大规模<code>API</code>不兼容，或者架构不兼容升级。<br>  2 ） 次版本号：保持相对兼容性，增加主要功能特性，影响范围极小的<code>API</code>不兼容修改。<br> 3 ） 修订号：保持完全兼容性，修复<code>BUG</code>、新增次要功能特性等。</p><blockquote><p>说明：注意起始版本号必须为：<code>1.0.0</code>，而不是<code>0.0.1</code> 正式发布的类库必须先去中央仓库进行查证，使版本号有延续性，正式版本号不允许覆盖升级。如当前版本：<code>1.3.3</code>，那么下一个合理的版本号：<code>1.3.4</code> 或 <code>1.4.0</code> 或 <code>2.0.0</code></p></blockquote></li><li><strong>【强制】</strong>线上应用不要依赖<code>SNAPSHOT</code>版本（安全包除外）。<blockquote><p>说明：不依赖<code>SNAPSHOT</code>版本是保证应用发布的幂等性。另外，也可以加快编译时的打包构建。</p></blockquote></li><li><strong>【强制】</strong>二方库的新增或升级，保持除功能点之外的其它<code>jar</code>包仲裁结果不变。如果有改变，必须明确评估和验证，建议进行<code>dependency:resolve</code>前后信息比对，如果仲裁结果完全不一致，那么通过<code>dependency:tree</code>命令，找出差异点，进行<code>&lt;excludes&gt;</code>排除<code>jar</code>包。</li><li><p><strong>【强制】</strong>二方库里可以定义<code>枚举类型</code>，参数可以使用<code>枚举类型</code>，但是接口返回值不允许使用<code>枚举类型</code>或者包含<code>枚举类型</code>的<code>POJO</code>对象。</p></li><li><p><strong>【强制】</strong>依赖于一个二方库群时，必须定义一个统一的版本变量，避免版本号不一致。</p><blockquote><p>说明：依赖<code>springframework-core,-context,-beans</code>，它们都是同一个版本，可以定义一个变量来保存版本：<code>${spring.version}</code>，定义依赖的时候，引用该版本。</p></blockquote></li><li><strong>【强制】</strong>禁止在子项目的<code>pom</code>依赖中出现相同的<code>GroupId</code>，相同的<code>ArtifactId</code>，但是不同的<code>Version</code>。<blockquote><p>说明：在本地调试时会使用各子项目指定的版本号，但是合并成一个<code>war</code>，只能有一个版本号出现在最后的<code>lib</code>目录中。可能出现<code>线下调试是正确的</code>，发布到<code>线上却出故障</code>的问题。</p></blockquote></li><li><strong>【推荐】</strong>所有<code>pom</code>文件中的依赖声明放在<code>&lt;dependencies&gt;</code>语句块中，所有版本仲裁放在<code>&lt;dependencyManagement&gt;</code>语句块中。<blockquote><p>说明：<code>&lt;dependencyManagement&gt;</code>里只是声明版本，并不实现引入，因此子项目需要显式的声明依赖，<code>version</code>和<code>scope</code>都读取自父<code>pom</code>。而<code>&lt;dependencies&gt;</code>所有声明在主<code>pom</code>的<code>&lt;dependencies&gt;</code>里的依赖都会自动引入，并默认被所有的子项目继承。</p></blockquote></li><li><strong>【推荐】</strong>二方库不要有配置项，最低限度不要再增加配置项。</li><li>【参考】为避免应用二方库的依赖冲突问题，二方库发布者应当遵循以下原则：<br>1 ）精简可控原则。移除一切不必要的<code>API</code>和依赖，只包含 <code>Service API</code>、必要的领域模型对象、<code>Utils</code>类、常量、枚举等。如果依赖其它二方库，尽量是<code>provided</code>引入，让二方库使用者去依赖具体版本号；无<code>log</code>具体实现，只依赖日志框架。<br>2 ）稳定可追溯原则。每个版本的变化应该被记录，二方库由谁维护，源码在哪里，都需要能方便查到。除非用户主动升级版本，否则公共二方库的行为不应该发生变化。</li></ol><h3 id="三-服务器"><a href="#三-服务器" class="headerlink" title="(三) 服务器"></a>(三) 服务器</h3><ol><li><p><strong>【推荐】</strong>高并发服务器建议调小<code>TCP</code>协议的<code>time_wait</code>超时时间。</p><blockquote><p>说明：操作系统默认 <code>240</code> 秒后，才会关闭处于<code>time_wait</code>状态的连接，在高并发访问下，服务器端会因为处于<code>time_wait</code>的连接数太多，可能无法建立新的连接，所以需要在服务器上调小此等待值。</p></blockquote><p> 正例：在<code>linu</code>x服务器上请通过变更<code>/etc/sysctl.conf</code>文件去修改该缺省值（秒）：<br> <code>net.ipv4.tcp_fin_timeout = 30</code></p></li><li><p><strong>【推荐】</strong>调大服务器所支持的<code>最大文件句柄数</code>（<code>File Descriptor</code>，简写为<code>fd</code>）。</p><blockquote><p>说明：主流操作系统的设计是将<code>TCP</code>/<code>UDP</code>连接采用与文件一样的方式去管理，即一个连接对应于一个<code>fd</code>。主流的<code>linux</code>服务器默认所支持最大<code>fd</code>数量为 <code>1024</code> ，当并发连接数很大时很容易因为<code>fd</code>不足而出现”<code>open too many files</code>“错误，导致新的连接无法建立。 建议将<code>linux</code>服务器所支持的最大句柄数调高数倍（<code>与服务器的内存数量相关</code>）。</p></blockquote></li><li><p><strong>【推荐】</strong>给JVM环境参数设置<code>-XX:+HeapDumpOnOutOfMemoryError</code>参数，让<code>JVM</code>碰到<code>OOM</code>场景时输出<code>dump</code>信息。</p><blockquote><p>说明：<code>OOM</code>的发生是有概率的，甚至相隔数月才出现一例，出错时的堆内信息对解决问题非常有帮助。</p></blockquote></li><li><strong>【推荐】</strong>在线上生产环境，<code>JVM</code>的<code>Xms</code>和<code>Xmx</code>设置一样大小的内存容量，避免在<code>GC</code> 后调整堆大小带来的压力。</li><li>【参考】服务器内部重定向使用<code>forward</code>；外部重定向地址使用<code>URL</code>拼装工具类来生成，否则会带来<code>URL</code>维护不一致的问题和潜在的安全风险。</li></ol><h2 id="七、设计规约"><a href="#七、设计规约" class="headerlink" title="七、设计规约"></a>七、设计规约</h2><ol><li><p><strong>【强制】</strong>存储方案和底层数据结构的设计获得评审一致通过，并沉淀成为文档。</p><blockquote><p>说明：有缺陷的底层数据结构容易导致系统风险上升，可扩展性下降，重构成本也会因历史数据迁移和系统平滑过渡而陡然增加，所以，存储方案和数据结构需要认真地进行设计和评审，生产环境提交执行后，需要进行<code>double check</code>。</p></blockquote><p> 正例：评审内容包括存储介质选型、表结构设计能否满足技术方案、存取性能和存储空间能否满足业务发展、表或字段之间的辩证关系、字段名称、字段类型、索引等；数据结构变更（如在原有表中新增字段）也需要进行评审通过后上线。</p></li><li><p><strong>【强制】</strong>在需求分析阶段，如果与系统交互的<code>User</code>超过一类并且相关的<code>User Case</code>超过 <code>5</code> 个，使用用<code>例图</code>来表达更加清晰的结构化需求。</p></li><li><p><strong>【强制】</strong>如果某个业务对象的状态超过 <code>3</code> 个，使用<code>状态图</code>来表达并且明确状态变化的各个触发条件。</p><blockquote><p>说明：<code>状态图</code>的核心是对象状态，首先明确对象有多少种状态，然后明确两两状态之间是否存在直接转换关系，再明确触发状态转换的条件是什么。</p></blockquote><p> 正例：淘宝订单状态有已下单、待付款、已付款、待发货、已发货、已收货等。比如已下单与已收货这两种状态之间是不可能有直接转换关系的。</p></li><li><strong>【强制】</strong>如果系统中某个功能的调用链路上的涉及对象超过 <code>3</code> 个，使用<code>时序图</code>来表达并且明确各调用环节的输入与输出。<blockquote><p>说明：<code>时序图</code>反映了一系列对象间的交互与协作关系，清晰立体地反映系统的调用纵深链路。</p></blockquote></li><li><strong>【强制】</strong>如果系统中模型类超过 <code>5</code> 个，并且存在复杂的依赖关系，使用<code>类图</code>来表达并且明确类之间的关系。<blockquote><p>说明：<code>类图</code>像建筑领域的施工图，如果搭平房，可能不需要，但如果建造蚂蚁Z空间大楼，肯定需要详细的施工图。</p></blockquote></li><li><strong>【强制】</strong>如果系统中超过 <code>2</code> 个对象之间存在协作关系，并且需要表示复杂的处理流程，使用<code>活动图</code>来表示。<blockquote><p>说明：活动图是流程图的扩展，增加了能够体现协作关系的对象泳道，支持表示并发等。</p></blockquote></li><li><strong>【推荐】</strong>需求分析与系统设计在考虑主干功能的同时，需要充分评估<code>异常流程</code>与<code>业务边界</code>。<br> 反例：用户在淘宝付款过程中，银行扣款成功，发送给用户扣款成功短信，但是支付宝入款时由于断网演练产生异常，淘宝订单页面依然显示未付款，导致用户投诉。</li><li><strong>【推荐】</strong>类在设计与实现时要符合单一原则。<blockquote><p>说明：单一原则最易理解却是最难实现的一条规则，随着系统演进，很多时候，忘记了类设计的初衷。</p></blockquote></li><li><p><strong>【推荐】</strong>谨慎使用继承的方式来进行扩展，优先使用<code>聚合</code>/<code>组合</code>的方式来实现。</p><blockquote><p>说明：不得已使用继承的话，必须符合<code>里氏代换</code>原则，此原则说父类能够出现的地方子类一定能够出现，比如，”把钱交出来”，钱的子类美元、欧元、人民币等都可以出现。</p></blockquote></li><li><p><strong>【推荐】</strong>系统设计时，根据<code>依赖倒置</code>原则，尽量依赖抽象类与接口，有利于扩展与维护。</p><blockquote><p>说明：低层次模块依赖于高层次模块的抽象，方便系统间的解耦。</p></blockquote></li><li><strong>【推荐】</strong>系统设计时，注意<code>对扩展开放</code>，对<code>修改闭合</code>。<blockquote><p>说明：极端情况下，交付的代码都是不可修改的，同一业务域内的需求变化，通过模块或类的扩展来实现。</p></blockquote></li><li><strong>【推荐】</strong>系统设计阶段，共性业务或公共行为抽取出来公共模块、公共配置、公共类、公共方法等，避免出现重复代码或重复配置的情况。<blockquote><p>说明：随着代码的重复次数不断增加，维护成本指数级上升。</p></blockquote></li><li><p><strong>【推荐】</strong>避免如下误解：<code>敏捷开发 = 讲故事 + 编码 + 发布</code>。</p><blockquote><p>说明：敏捷开发是快速交付迭代可用的系统，省略多余的设计方案，摒弃传统的审批流程，但核心关键点上的必要设计和文档沉淀是需要的。</p></blockquote><p>反例：某团队为了业务快速发展，敏捷成了产品经理催进度的借口，系统中均是勉强能运行但像面条一样的代码，可维护性和可扩展性极差，一年之后，不得不进行大规模重构，得不偿失。</p></li><li><strong>【参考】</strong>系统设计主要目的是<code>明确需求</code>、<code>理顺逻辑</code>、<code>后期维护</code>，次要目的用于指导编码。<blockquote><p>说明：避免为了设计而设计，系统<code>设计文档</code>有助于后期的系统维护，所以设计结果需要进行分类归档保存。</p></blockquote></li><li><strong>【参考】</strong>设计的本质就是<code>识别和表达系统难点</code>，找到系统的变化点，并隔离变化点。<blockquote><p>说明：世间众多设计模式目的是相同的，即隔离系统变化点。</p></blockquote></li><li><p>【参考】系统架构设计的目的：</p><ul><li><p>确定<code>系统边界</code>。确定系统在技术层面上的做与不做。</p></li><li><p>确定<code>系统内模块之间的关系</code>。确定模块之间的依赖关系及模块的宏观输入与输出。</p></li><li><p>确定<code>指导后续设计与演化的原则</code>。使后续的子系统或模块设计在规定的框架内继续演化。</p></li><li><p>确定<code>非功能性需求</code>。非功能性需求是指安全性、可用性、可扩展性等。</p></li></ul></li></ol><h2 id="八、附录"><a href="#八、附录" class="headerlink" title="八、附录"></a>八、附录</h2><h3 id="专有名词解释"><a href="#专有名词解释" class="headerlink" title="专有名词解释"></a>专有名词解释</h3><ol><li><code>POJO（Plain Ordinary Java Object）</code>: 在本手册中，<code>POJO</code>专指只有<code>setter</code> / <code>getter</code> / <code>toString</code>的简单类，包括<code>DO</code>/<code>DTO</code>/<code>BO</code>/<code>VO</code>等。</li><li><code>GAV（GroupId、ArtifactctId、Version</code>）: <code>Maven</code>坐标，是用来唯一标识<code>jar</code>包。</li><li><code>OOP（Object Oriented Programming）</code>: 本手册泛指类、对象的编程处理方式。</li><li><code>ORM（Object Relation Mapping）</code>: 对象关系映射，对象领域模型与底层数据之间的转换，本文泛指<code>iBATIS</code>, <code>mybatis</code>等框架。</li><li><code>NPE（java.lang.NullPointerException）</code>: 空指针异常。</li><li><code>SOA（Service-Oriented Architecture）</code>: 面向服务架构，它可以根据需求通过网络对松散以耦以的粗粒度应用组件进行分布式部署、组合和使用，有利于提升组件可重用性，可维护性。</li><li><code>IDE（Integrated Development Environment）</code>: 用于提供程序开发环境的应用程序，一般包括代码编辑器、编译器、调试器和图形用户界面等工具，本《手册》泛指<code>IntelliJ IDEA</code>和<code>eclipse</code>。</li><li><code>OOM（Out Of Memory）</code>: 源于<code>java.lang.OutOfMemoryError</code>，当<code>JVM</code>没有足够的内存来为对象分配空间并且垃圾回收器也无法回收空间时，系统出现的严重状况。</li><li>一方库: 本工程内部子项目模块依赖的库（<code>jar</code>包）。</li><li>二方库: 公司内部发布到中央仓库，可供公司内部其它应用依赖的库（<code>jar</code>包）。</li><li>三方库: 公司之外的开源库（<code>jar</code>包）。</li></ol>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>缓存那些事（四）</title>
      <link href="/2018/10/08/%E7%BC%93%E5%AD%98%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2018/10/08/%E7%BC%93%E5%AD%98%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><strong>缓存那些事（四）- Redis优化建议</strong></p><p><center><img src="/2018/10/08/缓存那些事（四）/20160502211355.png" alt=""></center></p><p><center>图1</center><br>图1是默认安装的redis在启动时给出的几条warning信息，已经告诉程序猿一些优化建议。</p><h3 id="基本优化建议"><a href="#基本优化建议" class="headerlink" title="基本优化建议"></a>基本优化建议</h3><h4 id="尽量使用短的key"><a href="#尽量使用短的key" class="headerlink" title="尽量使用短的key"></a>尽量使用短的key</h4><p>当然在精简的同时，不要忘了key的“见名知意”。对于value有些也可精简，比如性别使用0、1</p><h4 id="避免使用keys"><a href="#避免使用keys" class="headerlink" title="避免使用keys *"></a>避免使用<code>keys *</code></h4><p><code>keys *</code>这个命令是<code>阻塞的</code>，即操作执行期间，其它任何命令在你的实例中都无法执行。当redis中key数据量小时到无所谓，数据量大就很糟糕了。所以我们应该避免去使用这个命令。可以去使用<code>SCAN</code>来代替。</p><h4 id="在存到Redis之前先把你的数据压缩下"><a href="#在存到Redis之前先把你的数据压缩下" class="headerlink" title="在存到Redis之前先把你的数据压缩下"></a>在存到Redis之前先把你的数据压缩下</h4><p>redis为每种数据类型都提供了两种内部编码方式，在不同的情况下redis会自动调整合适的编码方式</p><h4 id="设置-key-有效期"><a href="#设置-key-有效期" class="headerlink" title="设置 key 有效期"></a>设置 key 有效期</h4><p>我们应该尽可能的利用key有效期。比如一些临时数据（短信校验码），过了有效期Redis就会自动为你清除</p><h4 id="选择回收策略-maxmemory-policy"><a href="#选择回收策略-maxmemory-policy" class="headerlink" title="选择回收策略(maxmemory-policy)"></a>选择回收策略(maxmemory-policy)</h4><p>当Redis的<code>实例空间</code>被<code>填满</code>了之后，将会尝试<code>回收一部分key</code>。根据你的使用方式，强烈建议使用<code>volatile-lru</code>（默认）策略——前提是你<code>对key已经设置了超时时间</code>。但如果你运行的是一些类似于<code>cache</code>的东西，并且没有对 key 设置超时机制，可以考虑使用<code>allkeys-lru</code>回收机制，<a href="https://redis.io/topics/lru-cache#eviction-policies" target="_blank" rel="noopener">具体讲解查看</a> ,<code>maxmemory-samples 3</code>是说每次进行淘汰的时候 会随机抽取<code>3</code>个key 从里面淘汰最不经常使用的（默认选项）</p><blockquote><p>maxmemory-policy 六种方式 :<br>volatile-lru：只对设置了过期时间的key进行LRU（默认值）<br>allkeys-lru ： 是从所有key里 删除 不经常使用的key<br>volatile-random：随机删除即将过期key<br>allkeys-random：随机删除<br>volatile-ttl ： 删除即将过期的<br>noeviction ： 永不过期，返回错误</p></blockquote><h4 id="使用bit位级别操作和byte字节级别操作来减少不必要的内存使用"><a href="#使用bit位级别操作和byte字节级别操作来减少不必要的内存使用" class="headerlink" title="使用bit位级别操作和byte字节级别操作来减少不必要的内存使用"></a>使用<code>bit</code>位级别操作和<code>byte</code>字节级别操作来减少不必要的内存使用</h4><pre><code>&gt; bit位级别操作：`GETRANGE`, `SETRANGE`, `GETBIT` and `SETBIT`byte字节级别操作：`GETRANGE` and `SETRANGE`</code></pre><h4 id="尽可能地使用hashes哈希存储"><a href="#尽可能地使用hashes哈希存储" class="headerlink" title="尽可能地使用hashes哈希存储"></a>尽可能地使用hashes哈希存储</h4><h4 id="当业务场景不需要数据持久化时，关闭所有的持久化方式可以获得最佳的性能"><a href="#当业务场景不需要数据持久化时，关闭所有的持久化方式可以获得最佳的性能" class="headerlink" title="当业务场景不需要数据持久化时，关闭所有的持久化方式可以获得最佳的性能"></a>当业务场景不需要数据持久化时，关闭所有的持久化方式可以获得最佳的性能</h4><h4 id="想要一次添加多条数据的时候可以使用管道"><a href="#想要一次添加多条数据的时候可以使用管道" class="headerlink" title="想要一次添加多条数据的时候可以使用管道"></a>想要一次添加多条数据的时候可以使用管道</h4><h4 id="限制redis的内存大小"><a href="#限制redis的内存大小" class="headerlink" title="限制redis的内存大小"></a>限制redis的内存大小</h4><pre><code>&gt; 64位系统不限制内存，32位系统默认最多使用3GB内存。数据量不可预估，并且内存也有限的话，尽量限制下redis使用的内存大小，这样可以避免redis使用`swap分区`或者出现`OOM`错误。（使用`swap分区`，性能较低，如果限制了内存，当到达指定内存之后就不能添加数据了，否则会报`OOM`错误。可以设置`maxmemory-policy`，内存不足时删除数据。）</code></pre><ul><li>SLOWLOG [get/reset/len]<blockquote><p><code>slowlog-log-slower-than</code> 它决定要对执行时间大于多少微秒(<code>microsecond，1秒 = 1,000,000 微秒</code>)的命令进行记录。<br><code>slowlog-max-len</code>它决定 <code>slowlog</code> 最多能保存多少条日志，当发现redis性能下降的时候可以查看下是哪些命令导致的。</p></blockquote></li></ul><h3 id="优化实例分析"><a href="#优化实例分析" class="headerlink" title="优化实例分析"></a>优化实例分析</h3><h4 id="管道（Pipeline）的使用"><a href="#管道（Pipeline）的使用" class="headerlink" title="管道（Pipeline）的使用"></a>管道（<code>Pipeline</code>）的使用</h4><p><center><img src="/2018/10/08/缓存那些事（四）/20160427172349.png" alt="管道"></center></p><p><center>图2</center><br>图2展示了多条数据时用和不用管到在连接方便的消耗对比。<br>redis的管道功能在命令行中没有，但是redis是支持管道的，在java的客户端(<code>jedis</code>)中是可以使用的。<br><strong>示例代码</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 不使用管道初始化1W条数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">NOTUsePipeline</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Jedis jedis = JedisUtil.getJedis();</span><br><span class="line">    <span class="keyword">long</span> start_time = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">        jedis.set(<span class="string">"aa_"</span>+i, i+<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(System.currentTimeMillis()-start_time);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用管道初始化1W条数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">usePipeline</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Jedis jedis = JedisUtil.getJedis();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> start_time = System.currentTimeMillis();</span><br><span class="line">    Pipeline pipelined = jedis.pipelined();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">        pipelined.set(<span class="string">"cc_"</span>+i, i+<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    pipelined.sync();<span class="comment">//执行管道中的命令</span></span><br><span class="line">    System.out.println(System.currentTimeMillis()-start_time);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Hash的使用"><a href="#Hash的使用" class="headerlink" title="Hash的使用"></a>Hash的使用</h4><p>例如要存储一个用户信息对象数据，包含以下信息：<br>key为用户ID，value为用户对象（姓名，年龄，性别，生日等）如果用普通的key/value结构来存储，一般有以下2种存储方式:</p><ul><li>将用户ID作为查找key,把其他信息封装成一个对象以<code>序列化</code>的方式存储<br>缺点：增加了<code>序列化</code>/<code>反序列化</code>的开销，引入复杂适应系统（<code>Complex adaptive system</code>，简称<code>CAS</code>）修改其中一项信息时，需要把整个对象取回，并且修改操作需要对并发进行保护。</li><li>用户信息对象有多少成员就存成多少个key-value对<br>虽然省去了序列化开销和并发问题，但是用户ID为重复存储。</li></ul><p>Redis提供的<code>Hash</code>很好的解决了这个问题，提供了直接存取这个Map成员的接口;Key仍然是用户ID, value是一个Map，这个Map的key是成员的属性名，value是属性值。( 内部实现：<code>Redis Hashd</code>的<code>Value</code>内部有2种不同实现，Hash的成员比较少时Redis为了节省内存会采用类似<code>一维数组</code>的方式来<code>紧凑存储</code>，而不会采用真正的<code>HashMap</code>结构，对应的<code>value redisObject</code>的<code>encoding</code>为<code>zipmap</code>,当成员数量增大时会自动转成真正的<code>HashMap</code>,此时<code>encoding</code>为<code>ht</code> )。</p><h4 id="宿主服务器优化"><a href="#宿主服务器优化" class="headerlink" title="宿主服务器优化"></a>宿主服务器优化</h4><p>本文开头的图1显示在启动时出现了三个warning，对于这三个warning可以采取redis宿主优化的方式解决</p><ul><li>修改linux中<code>TCP</code>监听的<code>最大容纳</code>数量<br>在高并发环境下你需要一个高<code>backlog</code>值来避免慢客户端连接问题。注意Linux内核默默地将这个值减小到<code>/proc/sys/net/core/somaxconn</code>的值，所以需要确认增大<code>somaxconn</code>和<code>tcp_max_syn_backlog</code>两个值来达到想要的效果。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 511 &gt; /proc/sys/net/core/somaxconn</span><br></pre></td></tr></table></figure></li></ul><p><strong>注意</strong>：这个参数并不是限制redis的最大链接数。如果想限制redis的最大连接数需要修改<code>maxclients</code></p><ul><li>修改linux内核<code>内存分配策略</code><br>redis在备份数据的时候，会<code>fork</code>出一个<code>子进程</code>，理论上child进程所占用的内存和parent是一样的，比如parent占用的内存为8G，这个时候也要同样分配8G的内存给child,如果内存无法负担，往往会造成redis服务器的down机或者<code>IO</code>负载过高，效率下降;所以内存分配策略应该设置为 1（表示内核允许分配所有的物理内存，而不管当前的内存状态如何）;内存分配策略有三种(可选值：0、1、2)<ul><li>0 表示内核将检查是否有足够的可用内存供应用进程使用；如果有足够的可用内存，内存申请允许；否则，内存申请失败，并把错误返回给应用进程</li><li>1 不管需要多少内存，都允许申请</li><li>2 只允许分配物理内存和交换内存的大小(交换内存一般是物理内存的一半)</li></ul></li><li>关闭<code>Transparent Huge Pages</code>(<code>THP</code>)<br>THP会造成内存锁影响redis性能，建议关闭</li></ul><blockquote><p>Transparent HugePages:用来提高内存管理的性能,Transparent Huge Pages在32位的RHEL 6中是不支持的,执行命令 <code>echo never &gt; /sys/kernel/mm/ransparent_hugepage/enabled</code>,把这条命令添加到这个文件中<code>/etc/rc.local</code>。</p></blockquote><p><strong>参考资料</strong></p><ul><li><a href="https://blog.xiaoxiaomo.com/2016/05/02/Redis-%E4%BC%98%E5%8C%96%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener">Redis–优化详解</a></li><li><a href="http://www.redis.cn/" target="_blank" rel="noopener">redis.cn</a></li></ul>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 缓存 </tag>
            
            <tag> 缓存穿透 </tag>
            
            <tag> 缓存并发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>缓存那些事（三）</title>
      <link href="/2018/10/08/%E7%BC%93%E5%AD%98%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2018/10/08/%E7%BC%93%E5%AD%98%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>本文主要介绍在MacOS及centos7.x上如何安装及配置Redis</p><h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><h4 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install redis</span><br></pre></td></tr></table></figure><h4 id="修改配置信息"><a href="#修改配置信息" class="headerlink" title="修改配置信息"></a>修改配置信息</h4><p>mac上redis的配置文件是/usr/local/etc/redis.conf，通过修改该文件你可以配置redis的对外服务端口号、监听IP及密码等。</p><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew services start redis # 启动redis</span><br><span class="line">brew services stop redis # 停止redis</span><br><span class="line">brew services restart redis # 重启redis</span><br></pre></td></tr></table></figure><h3 id="centos7-x"><a href="#centos7-x" class="headerlink" title="centos7.x"></a>centos7.x</h3><h4 id="安装redis-1"><a href="#安装redis-1" class="headerlink" title="安装redis"></a>安装redis</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install redis</span><br></pre></td></tr></table></figure><h4 id="修改配置信息-1"><a href="#修改配置信息-1" class="headerlink" title="修改配置信息"></a>修改配置信息</h4><p>centos上redis的配置文件是/etc/redis.conf，通过修改该文件你可以配置redis的对外服务端口号、监听IP及密码等。</p><h4 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start redis.service #启动</span><br><span class="line">systemctl stop redis.service # 停止</span><br><span class="line">systemctl restart redis.service # 重启</span><br><span class="line">systemctl enable redis.service # 设置成开机自启</span><br></pre></td></tr></table></figure><p><strong>参考资料</strong></p><ul><li><a href="https://blog.csdn.net/pingpangbing0902/article/details/47104545" target="_blank" rel="noopener">mac上通过Homebrew安装redis</a></li><li><a href="Centos 7下使用yum安装redis">Centos 7下使用yum安装redis</a></li><li><a href="https://blog.csdn.net/zyz511919766/article/details/42268219" target="_blank" rel="noopener">redis配置认证密码</a></li><li><a href="https://www.jianshu.com/p/b8ea66af3bfd" target="_blank" rel="noopener">redis配置文件详解</a></li></ul>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>缓存那些事（二）</title>
      <link href="/2018/10/08/%E7%BC%93%E5%AD%98%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2018/10/08/%E7%BC%93%E5%AD%98%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<center><div style="width:180px;height:180px"><img src="/2018/10/08/缓存那些事（二）/redis.svg" alt="redis"></div></center><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Redis(REmote DIctionary Server)作为目前最流行的键值对存储数据库，是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库，并提供多种语言的API。它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Map), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。<br>从2015年6月开始，Redis的开发由Redis Labs赞助，而2013年5月至2015年6月期间，其开发由Pivotal赞助。在2013年5月之前，其开发由VMware赞助。</p><h4 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h4><p>Redis的外围由一个键、值映射的字典构成。与其他非关系型数据库主要不同在于：Redis中值的类型不仅限于字符串，还支持如下抽象数据类型：</p><ul><li>字符串列表</li><li>无序不重复的字符串集合</li><li>有序不重复的字符串集合</li><li>键、值都为字符串的哈希表</li></ul><p>值的类型决定了值本身支持的操作。Redis支持不同无序、有序的列表，无序、有序的集合间的交集、并集等高级服务器端原子操作。</p><h4 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h4><p>Redis通常将全部的数据存储在内存中。2.4版本后可配置为使用虚拟内存，[9]一部分数据集存储在硬盘上，但这个特性废弃了。<br>目前通过两种方式实现持久化：</p><ul><li>使用快照，一种半持久耐用模式。不时的将数据集以异步方式从内存以RDB格式写入硬盘。</li><li>1.1版本开始使用更安全的AOF格式替代，一种只能追加的日志类型。将数据集修改操作记录起来。Redis能够在后台对只可追加的记录作修改来避免无限增长的日志。</li></ul><h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><p>Redis支持主从同步。数据可以从主服务器向任意数量的从服务器上同步，从服务器可以是关联其它从服务器的主服务器。这使得Redis可以执行单层树复制。从盘可以有意无意的对数据进行写操作。由于完全实现了发布/订阅的机制，是的从数据库在任何地方同步树时，可订阅一个频道并接收主服务器完整的消息发布记录。同步对读取操作的可扩展性和数据冗余很有帮助。</p><h4 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h4><p>当数据依赖不再需要，Redis这种基于内存的性质，与在执行一个事务时将每个变化都写入硬盘的数据库系统相比就显得执行效率非常高。写与读操作速度没有明显差别。</p><p><strong>参考资料</strong></p><ul><li><a href="https://zh.wikipedia.org/wiki/Redis" target="_blank" rel="noopener">维基百科</a></li><li><a href="https://redis.io/" target="_blank" rel="noopener">官方</a></li></ul>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>缓存那些事（一）</title>
      <link href="/2018/09/29/%E7%BC%93%E5%AD%98%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2018/09/29/%E7%BC%93%E5%AD%98%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>在日常的开发工作中程序猿会用到各种各样的缓存软件，不管是Redis还是Memcached抑或是其它类型的缓存软件，都会遇到<strong>缓存穿透</strong>、<strong>缓存并发</strong>、<strong>缓存失效</strong>三类问题</p><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><p><center><img src="/2018/09/29/缓存那些事（一）/缓存1.png" alt="缓存"></center><br>上图是大家使用缓存组件最常见的一个场景，那么它会有什么潜在的风险呢？<br>在项目中使用缓存时通常都是先检查缓存中是否存在，如果存在直接返回缓存内容，如果不存在就直接查询数据库然后再缓存查询结果返回。这个时候如果我们查询的某一个数据在缓存中一直不存在，就会造成每一次请求都查询DB，这样缓存就失去了意义，在流量大时，可能DB就挂掉了。<br>那么该如何解决这个问题呢？要是有人利用不存在的key频繁攻击我们的应用，这就是我们程序的漏洞。<br>一种处理方法是将这个不存在的key预先设定一个值，比如(“key” , “&amp;&amp;”)，在返回这个”&amp;&amp;”值的时候，我们的应用就可以认为这是不存在的key，那我们的应用就可以决定是否继续等待继续访问，还是放弃掉这次操作。如果继续等待访问，过一个时间轮询点后，再次请求这个key，如果取到的值不再是&amp;&amp;，则可以认为这时候key有值了，从而避免了透传到数据库，从而把大量的类似请求挡在了缓存之中。<br>还有一种处理办法是将系统中所有的key及对应的数据预先缓存起来，在系统中数据发生变更的时候，将单个变更的数据同步至缓存中，这样也可以避免出现缓存传统的情况发生，当然这种处理办法只适用于特定的业务场景。</p><h4 id="缓存并发"><a href="#缓存并发" class="headerlink" title="缓存并发"></a>缓存并发</h4><p>某些情况如果网站并发访问很高，某一个热点的缓存如果在此时失效，可能出现多个进程同时查询DB且同时设置缓存的情况，如果并发确实很大，这也可能造成DB压力过大，还有缓存频繁更新的问题。我们可以对缓存查询加锁，如果KEY不存在，就加锁，然后查DB入缓存，然后解锁；其他进程如果发现有锁就等待，然后等解锁后返回数据或者进入DB查询。这种处理方法和上述说的预先设定值问题有些类似，只不过利用锁的方式，但是会造成部分请求等待。</p><h4 id="缓存失效"><a href="#缓存失效" class="headerlink" title="缓存失效"></a>缓存失效</h4><p>平时我们都会设定一个缓存的过期时间，有一些会设置1分钟、5分钟等等;在高并发的时候可能会出在某一个时间同时生成了很多的缓存，并且过期时间都一样，当过期时间到后，这些缓存同时失效，请求会全部转发到DB，DB可能会压力过重。<br>那么该如何解决这个问题呢？最简单的处理方式是将缓存失效时间分散开，比如我们可以在原有的失效时间基础上增加一个随机值（1-5分钟随机），这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p><p><strong>参考资料</strong></p><ul><li><a href="http://blog.didispace.com/chengchao-huancun-zuijiazhaoshi/" target="_blank" rel="noopener">程序猿DD</a></li><li><a href="https://item.jd.com/12276070.html?jd_pop=71fe8a90-8a79-414c-9e6b-8bf328f74494&amp;abt=3" target="_blank" rel="noopener">深入分布式缓存：从原理到实践</a></li></ul>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 缓存 </tag>
            
            <tag> 缓存穿透 </tag>
            
            <tag> 缓存并发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JVM内存溢出分类及说明</title>
      <link href="/2018/09/27/JVM%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%88%86%E7%B1%BB%E5%8F%8A%E8%AF%B4%E6%98%8E/"/>
      <url>/2018/09/27/JVM%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%88%86%E7%B1%BB%E5%8F%8A%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<center><img src="/2018/09/27/JVM内存溢出分类及说明/images.png" alt=""></center><p>Java程序猿在日常的开发工作中会遇到各种各样的内存溢出问题，本文中摘录了几种内存溢出的场景及其说明，即便于排查具体内存溢出的原因，也可以在技术面试中为自己增加筹码</p><h4 id="堆（Heap）溢出"><a href="#堆（Heap）溢出" class="headerlink" title="堆（Heap）溢出"></a>堆（Heap）溢出</h4><p><center><strong>java.lang.OutOfMemoryError Java heap space</strong></center><br>java堆用于存储对象的实例，只要不断的创建对象，并且保证GC Roots到对象之间有可达路径来避免垃圾回收机制清除这些对象，那么在对象数量达到最大堆的容量限制之后机会产生内存溢出异常。<br>当出现java堆内存溢出时，异常堆栈信息“java.lang.OutOfMemoryError”会跟着进一步提示“Java heap space”。<br>要解决这个区域的异常 ，一般会先通过内存映像分析工具对Dump出来的对转存储快照进行分析，重点是确认内存中的对象是否是必要的，若果内存中的对象确实都还必须活着，那就应当检查虚拟机的堆参数（-Xmx和Xms）,与机器物理内存对比是否还可以调大，从代码上检查是否存在某些对象生命周期过长，持有状态时间过长的情况，尝试减少程序运行期的内存消耗。</p><h4 id="栈（Stacks）溢出"><a href="#栈（Stacks）溢出" class="headerlink" title="栈（Stacks）溢出"></a>栈（Stacks）溢出</h4><p><center><strong>StackOverflowError</strong></center><br>如果线程请求的栈深度大于虚拟机所允许的最大深度，将会抛出StackOverflowError。如果虚拟机在扩展栈时无法申请到足够的内存空间则抛出OutOfMemoryError。<br>以上两种异常情况其实是对同一件事情的两种描述：当栈空间无法继续分配时，到底是栈内存太小，还是已经使用的栈空间太大。<br>试验表明：在单个线程下，无论是由于栈帧太大还是虚拟机栈容量太小，当内存无法分配的时候，虚拟机抛出的StackOverflowError异常。如果不限于单线程，通过不断的建立线程的方式到可以产生内存溢出异常，但是这样产生的内存溢出异常与栈空间是否足够大并不存在任何联系，或者更准确的说，在这种情况下，为每一个线程的栈分配的内存越大，反而越容易产生内存溢出异常。<br>如果是通过建立过多线程的方式到导致的内存溢出，在不能减少线程或者更换64位虚拟机的情况下，就只能通过减少最大堆和减少栈帧容量来换取跟多的线程。<br>原因很简单：操作系统分配给每一个进程的内存是有限制的，比如每个对进程的限制为2GB，虚拟机提供了参数来控制java堆和方法区的这两部分内存的最大值。则剩余的内存为：2GB（操作系统限制的大小）-Xmx（最大堆容量）-MaxPermSize（最大方法区容量）。程序计数器消耗的内存很小基本可以忽略。如果虚拟机进程本身消耗的内存不计算在内，那么剩下的内存就由虚拟机的虚拟机栈和本地方法栈“瓜分”了。每个线程分配到的内存容量越大，可以建立的线程数量自然就越少，建立线程时就越容易将剩下的内存耗尽。</p><h4 id="方法区和运行时常量池溢出"><a href="#方法区和运行时常量池溢出" class="headerlink" title="方法区和运行时常量池溢出"></a>方法区和运行时常量池溢出</h4><p><center><strong>OutOfMemoryError PermGen space</strong></center><br>若是运行时常量池溢出，在OutOfMemoryError后面跟随的提示信息是“PermGen space”，说明运行时常量池属于方法区（永久代）的一部分。<br>方法区用于存放Class的相关信息，如类名，访问修饰符，常量池，字段描述，方法描述。若运行时产生大量的类去填满方法区，直达溢出。比如Spring 对类进行增强时（创建代理类），都会使用到cglib这类字节码技术，增强的类越多，就需要越大的方法区来保证动态生成的Class可以加载到内存。再比如大量JSP或动态产生JSP文件应用（JSP第一次运行时需要编译为java类）等。</p><h4 id="本机直接内存溢出"><a href="#本机直接内存溢出" class="headerlink" title="本机直接内存溢出"></a>本机直接内存溢出</h4><p>DirectMenory容量可通过-XX：MaxDirectMemorySize指定，如果不指定，则默认与java堆的容量最大值一样。<br>在使用NIO方式使用Native函数库直接分配堆外内存，存储在Java堆中的DirectByteBuffer对象在进行分配内存是时候会抛出内存溢出异常。但是它抛出异常时并没有真正向操作系统申请分配内存，而是通过计算得知内存无法分配，于是手动抛出异常。</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
            <tag> 内存溢出 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JVM内存结构</title>
      <link href="/2018/09/27/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/"/>
      <url>/2018/09/27/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<center><img src="/2018/09/27/JVM内存结构/jvm_binary_code_3x2_1200x800-100758585-large.jpg" alt=""></center><p>Java程序猿在日常的开发工作中会遇到各种各样的内存溢出问题，在弄清楚到底是什么引起的内存溢出之前，需要先熟悉下JVM的内存结构，这样既便于排查内存溢出的具体原因，也可以对JVM进行调优，更可以在技术面试中为自己增加筹码</p><h3 id="内存结构简介"><a href="#内存结构简介" class="headerlink" title="内存结构简介"></a>内存结构简介</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><center><img src="/2018/09/27/JVM内存结构/JVM内存结构.png" alt="JVM内存结构"></center><p>由上图可以很清晰的看出JVM的内存结构主要由三大块构成：</p><ul><li><strong>堆内存</strong></li><li><strong>方法区</strong></li><li><strong>栈</strong><h5 id="堆内存"><a href="#堆内存" class="headerlink" title="堆内存"></a>堆内存</h5>堆内存是JVM中最大的一块，由<strong>年轻代</strong>和<strong>老年代</strong>组成，而年轻代内存又被分成<strong>Eden空间</strong>、<strong>From Survivor空间</strong>、<strong>To Survivor空间</strong>三部分组成，默认情况下这三个空间的内存是按照<strong>8:1:1</strong>的比例来分配的<h5 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h5>方法区存储类信息、常量、静态变量等数据，是<strong>线程共享</strong>的区域，为了与堆内存区分，方法区还有一个别名叫<strong>Non-Heap（非堆）</strong><h5 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h5>栈又分为<strong>Java虚拟机栈</strong>和<strong>本地方法栈</strong>，主要用于方法的执行<h4 id="如何控制各内存区域的内存大小"><a href="#如何控制各内存区域的内存大小" class="headerlink" title="如何控制各内存区域的内存大小"></a>如何控制各内存区域的内存大小</h4><center><img src="/2018/09/27/JVM内存结构/参数控制各内存区域大小.png" alt="参数控制各内存区域大小"></center><br>由上图可以看出可以通过参数来控制各区域内存的大小</li><li>-Xms设置堆的最小空间大小</li><li>-Xmx设置堆的最大空间大小</li><li>-XX:NewSize设置新生代最小空间大小</li><li>-XX:MaxNewSize设置新生代最大空间大小</li><li>-XX:PermSize设置永久代最小空间大小</li><li>-XX:MaxPermSize设置永久代最大空间大小</li><li>-Xss设置每个线程的堆栈大小</li><li><strong>目前还没有直接设置老年代内存大小的参数</strong>，但是可以通过设置堆空间、新生代空间大小的方法来间接设置（<strong>老年代空间大小=堆空间大小-年轻代空间大小</strong>）</li></ul><h4 id="JVM和系统调用之间的关系"><a href="#JVM和系统调用之间的关系" class="headerlink" title="JVM和系统调用之间的关系"></a>JVM和系统调用之间的关系</h4><p><center><img src="/2018/09/27/JVM内存结构/JVM和系统调用之间的关系.png" alt="JVM和系统调用之间的关系"></center><br><strong>方法区和对是所有线程共享的内存区域；而java栈、本地方法栈和程序员计数器是运行是线程私有的内存区域。</strong></p><h3 id="详细介绍"><a href="#详细介绍" class="headerlink" title="详细介绍"></a>详细介绍</h3><h4 id="Java堆（Heap）"><a href="#Java堆（Heap）" class="headerlink" title="Java堆（Heap）"></a>Java堆（Heap）</h4><p>对于大多数应用来说，Java堆（Java Heap）是Java虚拟机所管理的内存中<strong>最大</strong>的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放<strong>对象实例</strong>，<strong>几乎所有的对象实例都在这里分配内存</strong>。<br>Java堆是垃圾收集器管理的主要区域，因此很多时候也被称做<strong>“GC堆”</strong>。如果从内存回收的角度看，由于现在收集器基本都是采用的分代收集算法，所以Java堆中还可以细分为：<strong>新生代</strong>和<strong>老年代</strong>；再细致一点的有<strong>Eden空间</strong>、<strong>From Survivor空间</strong>、<strong>To Survivor空间</strong>等。<br>根据Java虚拟机规范的规定，Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘空间一样。在实现时，既可以实现成固定大小的，也可以是可扩展的，不过当前主流的虚拟机都是按照可扩展来实现的（<strong>通过-Xmx和-Xms控制</strong>）。<br>如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出<strong>OutOfMemoryError</strong>异常。</p><h4 id="方法区（Method-Area）"><a href="#方法区（Method-Area）" class="headerlink" title="方法区（Method Area）"></a>方法区（Method Area）</h4><p>方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的<em>类信息、常量、静态变量、即时编译器编译后的代码</em>等数据。虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目的应该是与Java堆区分开来。<br>对于习惯在HotSpot虚拟机上开发和部署程序的开发者来说，很多人愿意把方法区称为“永久代”（Permanent Generation），本质上两者并不等价，仅仅是因为HotSpot虚拟机的设计团队选择把GC分代收集扩展至方法区，或者说使用永久代来实现方法区而已。<br>Java虚拟机规范对这个区域的限制非常宽松，除了和Java堆一样不需要连续的内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入了方法区就如永久代的名字一样“永久”存在了。这个区域的内存回收目标主要是针对常量池的回收和对类型的卸载，一般来说这个区域的回收“成绩”比较难以令人满意，尤其是类型的卸载，条件相当苛刻，但是这部分区域的回收确实是有必要的。<br>根据Java虚拟机规范的规定，当方法区无法满足内存分配需求时，将抛出<strong>OutOfMemoryError</strong>异常。 </p><h4 id="程序计数器（Program-Counter-Register）"><a href="#程序计数器（Program-Counter-Register）" class="headerlink" title="程序计数器（Program Counter Register）"></a>程序计数器（Program Counter Register）</h4><p>程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。<br>由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间的计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。<br>如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Natvie方法，这个计数器值则为空（Undefined）。<br><strong>此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域</strong>。</p><h4 id="JVM栈（JVM-Stacks）"><a href="#JVM栈（JVM-Stacks）" class="headerlink" title="JVM栈（JVM Stacks）"></a>JVM栈（JVM Stacks）</h4><p>与程序计数器一样，Java虚拟机栈（Java Virtual Machine Stacks）也是<strong>线程私有</strong>的，它的<strong>生命周期与线程相同</strong>。虚拟机栈描述的是Java方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧（Stack Frame）用于存储局部变量表、操作栈、动态链接、方法出口等信息。<strong>每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程</strong>。<br>局部变量表存放了编译期可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference类型，它不等同于对象本身，根据不同的虚拟机实现，它可能是一个指向对象起始地址的引用指针，也可能指向一个代表对象的句柄或者其他与此对象相关的位置）和returnAddress类型（指向了一条字节码指令的地址）。<br>其中64位长度的long和double类型的数据会占用2个局部变量空间（Slot），其余的数据类型只占用1个。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。<br>在Java虚拟机规范中，对这个区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出<strong>StackOverflowError</strong>异常；如果虚拟机栈可以动态扩展（当前大部分的Java虚拟机都可动态扩展，只不过Java虚拟机规范中也允许固定长度的虚拟机栈），当扩展时无法申请到足够的内存时会抛出<strong>OutOfMemoryError</strong>异常。</p><h4 id="本地方法栈（Native-Method-Stacks）"><a href="#本地方法栈（Native-Method-Stacks）" class="headerlink" title="本地方法栈（Native Method Stacks）"></a>本地方法栈（Native Method Stacks）</h4><p>本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而<strong>本地方法栈则是为虚拟机使用到的Native方法服务</strong>。虚拟机规范中对本地方法栈中的方法使用的语言、使用方式与数据结构并没有强制规定，因此具体的虚拟机可以自由实现它。甚至有的虚拟机（譬如Sun HotSpot虚拟机）直接就把本地方法栈和虚拟机栈合二为一。与虚拟机栈一样，本地方法栈区域也会抛出<strong>StackOverflowError</strong>和<strong>OutOfMemoryError异常</strong>。</p><p><strong>参考：</strong></p><ul><li><a href="http://www.cnblogs.com/ityouknow/p/5610232.html#3629661" target="_blank" rel="noopener">纯洁的微笑-JVM内存结构</a></li><li><a href="http://download.csdn.net/detail/ityouknow/9557109" target="_blank" rel="noopener">深入理解Java虚拟机：JVM高级特性与最佳实践_周志明.高清扫描版.pdf</a></li><li><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/index.html" target="_blank" rel="noopener">Java虚拟机规范英文版</a></li><li><a href="https://github.com/waylau/java-virtual-machine-specification" target="_blank" rel="noopener">Java虚拟机规范中文版</a></li></ul>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>springboot定时器</title>
      <link href="/2018/09/18/springboot%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
      <url>/2018/09/18/springboot%E5%AE%9A%E6%97%B6%E5%99%A8/</url>
      <content type="html"><![CDATA[<p><center><img src="/2018/09/18/springboot定时器/schedule-web-orig_orig.png" alt=""></center></p><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>在日常的项目开发过程中会遇到各种使用定时任务的需求，实现定时任务需求的方式也是多种多样。</p><ul><li>Quartz<br>Quartz的使用相当广泛，它是一个功能强大的调度器，但是使用起来会非常繁琐</li><li>Timer<br>java.util包里的Timer，它同样也可以实现定时任务，但是功能过于单一</li><li>Schedule<br>Schedule是spring自带的定时任务组件,可以把它看成一个轻量级、简化版的Quartz</li></ul><h4 id="实现定时任务"><a href="#实现定时任务" class="headerlink" title="实现定时任务"></a>实现定时任务</h4><h5 id="开启定时任务"><a href="#开启定时任务" class="headerlink" title="开启定时任务"></a>开启定时任务</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangjunfeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-09-13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(TimerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.kiwi.timer.util.DateTimeUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j2;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单线程定时器demo</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangjunfeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-09-13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Log</span>4j2</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> ONE_Minute = <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedDelay = ONE_Minute)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fixedDelayJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(DateTimeUtil.toDateTimeStr(<span class="keyword">new</span> Date()) + <span class="string">" &gt;&gt;fixedDelay执行...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedRate = ONE_Minute)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fixedRateJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(DateTimeUtil.toDateTimeStr(<span class="keyword">new</span> Date()) + <span class="string">" &gt;&gt;fixedRate执行...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0/5 * * * * ?"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cronJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"----"</span> + DateTimeUtil.toDateTimeStr(<span class="keyword">new</span> Date()) + <span class="string">" &gt;&gt;cron执行...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s.a.ScheduledAnnotationBeanPostProcessor : No TaskScheduler/ScheduledExecutorService bean found for scheduled processing</span><br><span class="line">2018-09-18 16:25:47.279  INFO 23151 --- [pool-1-thread-1] com.kiwi.timer.single.SingleDemo         : 2018-09-18 16:25:47 &gt;&gt;fixedRate执行....</span><br><span class="line">2018-09-18 16:25:47.280  INFO 23151 --- [pool-1-thread-1] com.kiwi.timer.single.SingleDemo         : 2018-09-18 16:25:47 &gt;&gt;fixedDelay执行....</span><br><span class="line">2018-09-18 16:25:47.324  INFO 23151 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &apos;&apos;</span><br><span class="line">2018-09-18 16:25:47.331  INFO 23151 --- [           main] com.kiwi.timer.TimerApplication          : Started TimerApplication in 3.646 seconds (JVM running for 4.643)</span><br><span class="line">2018-09-18 16:25:50.006  INFO 23151 --- [pool-1-thread-1] com.kiwi.timer.single.SingleDemo         : ----2018-09-18 16:25:50 &gt;&gt;cron执行....</span><br></pre></td></tr></table></figure><p>从上述控制台日志可以看出所有的定时任务都是由同一个线程来处理的，当定时任务过多的时候会造成任务队列的堆积</p><h5 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j2;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.interceptor.SimpleAsyncUncaughtExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.TaskScheduler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.AsyncConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableAsync;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.SchedulingConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.config.ScheduledTaskRegistrar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@Log</span>4j2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiConfig</span> <span class="keyword">implements</span> <span class="title">SchedulingConfigurer</span>, <span class="title">AsyncConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureTasks</span><span class="params">(ScheduledTaskRegistrar scheduledTaskRegistrar)</span> </span>&#123;</span><br><span class="line">        TaskScheduler taskScheduler = taskScheduler();</span><br><span class="line">        scheduledTaskRegistrar.setTaskScheduler(taskScheduler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(destroyMethod = <span class="string">"shutdown"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolTaskScheduler <span class="title">taskScheduler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskScheduler scheduler = <span class="keyword">new</span> ThreadPoolTaskScheduler();</span><br><span class="line">        scheduler.setPoolSize(<span class="number">20</span>);</span><br><span class="line">        <span class="comment">// 设置线程名前缀</span></span><br><span class="line">        scheduler.setThreadNamePrefix(<span class="string">"multiTask-"</span>);</span><br><span class="line">        <span class="comment">// 线程内容执行完后60秒停在</span></span><br><span class="line">        scheduler.setAwaitTerminationSeconds(<span class="number">60</span>);</span><br><span class="line">        <span class="comment">// 等待所有线程执行完</span></span><br><span class="line">        scheduler.setWaitForTasksToCompleteOnShutdown(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> scheduler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">getAsyncExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Executor executor = taskScheduler();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AsyncUncaughtExceptionHandler <span class="title">getAsyncUncaughtExceptionHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAsyncUncaughtExceptionHandler();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2018-09-18 16:33:15.219  INFO 23197 --- [    multiTask-1] com.kiwi.timer.single.SingleDemo         : 2018-09-18 16:33:15 &gt;&gt;fixedRate执行....</span><br><span class="line">2018-09-18 16:33:15.219  INFO 23197 --- [    multiTask-2] com.kiwi.timer.single.SingleDemo         : 2018-09-18 16:33:15 &gt;&gt;fixedDelay执行....</span><br><span class="line">2018-09-18 16:33:15.247  INFO 23197 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &apos;&apos;</span><br><span class="line">2018-09-18 16:33:15.251  INFO 23197 --- [           main] com.kiwi.timer.TimerApplication          : Started TimerApplication in 2.313 seconds (JVM running for 3.046)</span><br><span class="line">2018-09-18 16:33:20.001  INFO 23197 --- [    multiTask-3] com.kiwi.timer.single.SingleDemo         : ----2018-09-18 16:33:20 &gt;&gt;cron执行....</span><br><span class="line">2018-09-18 16:33:25.001  INFO 23197 --- [    multiTask-2] com.kiwi.timer.single.SingleDemo         : ----2018-09-18 16:33:25 &gt;&gt;cron执行....</span><br></pre></td></tr></table></figure><p>从上述日志可以看出已有线程池中的多个线程来实现定时任务</p><p>参考资料</p><ul><li><a href="https://github.com/junfengwang11/timer" target="_blank" rel="noopener">github示例代码</a></li><li><a href="https://www.jianshu.com/p/f03b1497122a" target="_blank" rel="noopener">Cron表达式详解</a></li><li><a href="https://blog.csdn.net/qq_28988969/article/details/78250357" target="_blank" rel="noopener">SpringBoot定时器#Schedule</a></li></ul>]]></content>
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> springboot </tag>
            
            <tag> 定时器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>centos安装node.js&amp;更换默认软件源</title>
      <link href="/2018/09/18/centos%E5%AE%89%E8%A3%85node-js-%E6%9B%B4%E6%8D%A2%E9%BB%98%E8%AE%A4%E8%BD%AF%E4%BB%B6%E6%BA%90/"/>
      <url>/2018/09/18/centos%E5%AE%89%E8%A3%85node-js-%E6%9B%B4%E6%8D%A2%E9%BB%98%E8%AE%A4%E8%BD%AF%E4%BB%B6%E6%BA%90/</url>
      <content type="html"><![CDATA[<p><center><img src="/2018/09/18/centos安装node-js-更换默认软件源/generate-pdf-using-nodejs-thumbnail.png" alt=""></center></p><h3 id="安装EPEL库"><a href="#安装EPEL库" class="headerlink" title="安装EPEL库"></a>安装EPEL库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install epel-release</span><br></pre></td></tr></table></figure><h3 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install nodejs</span><br></pre></td></tr></table></figure><h3 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install npm</span><br></pre></td></tr></table></figure><h3 id="校验安装"><a href="#校验安装" class="headerlink" title="校验安装"></a>校验安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node --version</span><br><span class="line">npm --version</span><br></pre></td></tr></table></figure><h3 id="更换软件源"><a href="#更换软件源" class="headerlink" title="更换软件源"></a>更换软件源</h3><h4 id="创建文件-npmrc"><a href="#创建文件-npmrc" class="headerlink" title="创建文件.npmrc"></a>创建文件.npmrc</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.npmrc</span><br></pre></td></tr></table></figure><h4 id="添加以下内容并保存"><a href="#添加以下内容并保存" class="headerlink" title="添加以下内容并保存"></a>添加以下内容并保存</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">registry = https://registry.npm.taobao.org/                                                                                                                 </span><br><span class="line">disturl = https://npm.taobao.org/dist                                                                                                                       </span><br><span class="line">sass_binary_site = https://npm.taobao.org/mirrors/node-sass                                                                                                 </span><br><span class="line">electron_mirror = https://npm.taobao.org/mirrors/electron/                                                                                                  </span><br><span class="line">puppeteer_download_host = https://npm.taobao.org/mirrors                                                                                                    </span><br><span class="line">chromedriver_cdnurl = https://npm.taobao.org/mirrors/chromedriver                                                                                           </span><br><span class="line">operadriver_cdnurl = https://npm.taobao.org/mirrors/operadriver                                                                                             </span><br><span class="line">phantomjs_cdnurl = https://npm.taobao.org/mirrors/phantomjs                                                                                                 </span><br><span class="line">selenium_cdnurl = http://npm.taobao.org/mirrors/selenium                                                                                                    </span><br><span class="line">node_inspector_cdnurl = https://npm.taobao.org/mirrors/node-inspector</span><br></pre></td></tr></table></figure><p>参考资料</p><ul><li><a href="https://blog.csdn.net/lu_embedded/article/details/79138650" target="_blank" rel="noopener">如何在 CentOS 安装 node.js</a></li><li><a href="https://gist.github.com/52cik/c1de8926e20971f415dd" target="_blank" rel="noopener">npm淘宝镜像</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Homebrew更换软件源</title>
      <link href="/2018/09/17/Homebrew%E6%9B%B4%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90/"/>
      <url>/2018/09/17/Homebrew%E6%9B%B4%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90/</url>
      <content type="html"><![CDATA[<p><center><img src="/2018/09/17/Homebrew更换软件源/1*Xjef3Zcg4T1x-tJIYHWFbg.png" alt=""></center><br>homebrew主要分两部分：git repo（位于GitHub）和二进制bottles（位于bintray），因为一些众所周知的原因，这两者在国内访问都不太顺畅；为了可以使用brew流畅的安装各种软件，你可以将其默认的软件源修改为访问国内的源镜像，以下以清华大学提供的源为例，演示如何更换本地的brew软件源为清华的brew源。</p><h4 id="替换现有上游"><a href="#替换现有上游" class="headerlink" title="替换现有上游"></a>替换现有上游</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span><br><span class="line">brew update</span><br></pre></td></tr></table></figure><h4 id="使用homebrew-science或者homebrew-python"><a href="#使用homebrew-science或者homebrew-python" class="headerlink" title="使用homebrew-science或者homebrew-python"></a>使用homebrew-science或者homebrew-python</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-science"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-science.git</span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-python"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-python.git</span><br><span class="line">brew update</span><br></pre></td></tr></table></figure><p><strong>参考资料</strong></p><ul><li><a href="https://mirror.tuna.tsinghua.edu.cn/help/homebrew/" target="_blank" rel="noopener">清华大学开源软件镜像站</a></li><li><a href="https://brew.sh/index_zh-cn" target="_blank" rel="noopener">brew安装</a></li></ul>]]></content>
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> homebrew </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>centos6.x 安装python3.6&amp;pip3</title>
      <link href="/2018/09/17/centos6-x-%E5%AE%89%E8%A3%85python3-6-pip3/"/>
      <url>/2018/09/17/centos6-x-%E5%AE%89%E8%A3%85python3-6-pip3/</url>
      <content type="html"><![CDATA[<p><center><img src="/2018/09/17/centos6-x-安装python3-6-pip3/images-3.jpeg" alt=""></center></p><h3 id="安装环境准备"><a href="#安装环境准备" class="headerlink" title="安装环境准备"></a>安装环境准备</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y groupinstall <span class="string">'Development Tools'</span></span><br><span class="line">yum install -y zlib-devel bzip2-devel  openssl-devel ncurses-devel</span><br></pre></td></tr></table></figure><h3 id="下载并解压python3-6-1"><a href="#下载并解压python3-6-1" class="headerlink" title="下载并解压python3.6.1"></a>下载并解压python3.6.1</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.6.1/Python-3.6.1.tgz</span><br><span class="line">tar zxvf  Python-3.6.1.tgz</span><br></pre></td></tr></table></figure><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Python-3.6.1</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/python3</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH=$PATH:/usr/local/python3/bin'</span> &gt;&gt; /etc/profile</span><br></pre></td></tr></table></figure><h3 id="刷下环境变量"><a href="#刷下环境变量" class="headerlink" title="刷下环境变量"></a>刷下环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="验证是否安装成功"><a href="#验证是否安装成功" class="headerlink" title="验证是否安装成功"></a>验证是否安装成功</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 -V</span><br><span class="line">pip3 -V</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> python3.6 </tag>
            
            <tag> pip3 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MYSQL数据库设计规范与原则</title>
      <link href="/2018/09/13/MYSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%E4%B8%8E%E5%8E%9F%E5%88%99/"/>
      <url>/2018/09/13/MYSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%E4%B8%8E%E5%8E%9F%E5%88%99/</url>
      <content type="html"><![CDATA[<center><img src="/2018/09/13/MYSQL数据库设计规范与原则/includes-mysql.png" alt=""></center><h3 id="mysql数据库设计规范"><a href="#mysql数据库设计规范" class="headerlink" title="mysql数据库设计规范"></a>mysql数据库设计规范</h3><h4 id="数据库命名规范"><a href="#数据库命名规范" class="headerlink" title="数据库命名规范"></a>数据库命名规范</h4><ul><li>采用26个英文字母(区分大小写)和0-9的自然数(经常不需要)加上下划线’_’组成;  </li><li>命名简洁明确(长度不能超过30个字符);<br>例如：user, stat, log, 也可以wifi_user, wifi_stat, wifi_log给数据库加个前缀;  </li><li>除非是备份数据库可以加0-9的自然数：user_db_20151210;  </li></ul><h4 id="数据库表名命名规范"><a href="#数据库表名命名规范" class="headerlink" title="数据库表名命名规范"></a>数据库表名命名规范</h4><ul><li>采用26个英文字母(区分大小写)和0-9的自然数(经常不需要)加上下划线’_’组成;  </li><li>命名简洁明确,多个单词用下划线’_’分隔;<br>例如：user_login, user_profile, user_detail, user_role, user_role_relation,user_role_right,user_role_right_relation,表前缀’user_’可以有效的把相同关系的表显示在一起;  </li></ul><h4 id="数据库表字段名命名规范"><a href="#数据库表字段名命名规范" class="headerlink" title="数据库表字段名命名规范"></a>数据库表字段名命名规范</h4><ul><li>采用26个英文字母(区分大小写)和0-9的自然数(经常不需要)加上下划线’_’组成;  </li><li>命名简洁明确,多个单词用下划线’_’分隔;<br>例如：user_login表字段 user_id, user_name, pass_word, eamil, tickit, status, mobile, add_time;  </li><li>每个表中必须有自增主键,add_time(默认系统时间)  </li><li>表与表之间的相关联字段名称要求尽可能的相同;  </li></ul><h4 id="数据库表字段类型规范"><a href="#数据库表字段类型规范" class="headerlink" title="数据库表字段类型规范"></a>数据库表字段类型规范</h4><ul><li>用尽量少的存储空间来存数一个字段的数据;<br>例如：能使用int就不要使用varchar、char,能用varchar(16)就不要使用varchar(256);<br>IP地址最好使用int类型;<br>固定长度的类型最好使用char,例如：邮编;<br>能使用tinyint就不要使用smallint,int;<br>最好给每个字段一个默认值,最好不能为null;  </li></ul><h4 id="数据库表索引规范"><a href="#数据库表索引规范" class="headerlink" title="数据库表索引规范"></a>数据库表索引规范</h4><ul><li>命名简洁明确,例如：user_login表user_name字段的索引应为user_name_index唯一索引;  </li><li>为每个表创建一个主键索引;  </li><li>为每个表创建合理的索引;  </li><li>建立复合索引请慎重;  </li></ul><h4 id="简单熟悉数据库范式"><a href="#简单熟悉数据库范式" class="headerlink" title="简单熟悉数据库范式"></a>简单熟悉数据库范式</h4><ul><li>第一范式(1NF)：字段值具有原子性,不能再分(所有关系型数据库系统都满足第一范式);<br>例如：姓名字段,其中姓和名是一个整体,如果区分姓和名那么必须设立两个独立字段;            </li><li>第二范式(2NF)：一个表必须有主键,即每行数据都能被唯一的区分;<br>备注：必须先满足第一范式;            </li><li>第三范式(3NF)：一个表中不能包涵其他相关表中非关键字段的信息,即数据表不能有沉余字段;<br>备注：必须先满足第二范式;<br>备注：往往我们在设计表中不能遵守第三范式,因为合理的沉余字段将会给我们减少join的查询;<br>例如：相册表中会添加图片的点击数字段,在相册图片表中也会添加图片的点击数字段;  </li></ul><h3 id="MYSQL数据库设计原则"><a href="#MYSQL数据库设计原则" class="headerlink" title="MYSQL数据库设计原则"></a>MYSQL数据库设计原则</h3><h4 id="核心原则"><a href="#核心原则" class="headerlink" title="核心原则"></a>核心原则</h4><ul><li>不在数据库做运算;  </li><li>cpu计算务必移至业务层;  </li><li>控制列数量(字段少而精,字段数建议在20以内);  </li><li>平衡范式与冗余(效率优先；往往牺牲范式)  </li><li>拒绝3B(拒绝大sql语句：big sql、拒绝大事物：big transaction、拒绝大批量：big batch);    <h4 id="字段类原则"><a href="#字段类原则" class="headerlink" title="字段类原则"></a>字段类原则</h4></li><li>用好数值类型(用合适的字段类型节约空间);  </li><li>字符转化为数字(能转化的最好转化,同样节约空间、提高查询性能);  </li><li>避免使用NULL字段(NULL字段很难查询优化、NULL字段的索引需要额外空间、NULL字段的复合索引无效);  </li><li>少用text类型(尽量使用varchar代替text字段);  </li></ul><h4 id="索引类原则"><a href="#索引类原则" class="headerlink" title="索引类原则"></a>索引类原则</h4><ul><li>合理使用索引(改善查询,减慢更新,索引一定不是越多越好);  </li><li>字符字段必须建前缀索引;  </li><li>不在索引做列运算;  </li><li>innodb主键推荐使用自增列(主键建立聚簇索引,主键不应该被修改,字符串不应该做主键)(理解Innodb的索引保存结构就知道了);<br>*不用外键(由程序保证约束);  </li></ul><h4 id="sql类原则"><a href="#sql类原则" class="headerlink" title="sql类原则"></a>sql类原则</h4><ul><li>sql语句尽可能简单(一条sql只能在一个cpu运算,大语句拆小语句,减少锁时间,一条大sql可以堵死整个库);  </li><li>简单的事务;  </li><li>避免使用trig/func(触发器、函数不用客户端程序取而代之);  </li><li>不用select *(消耗cpu,io,内存,带宽,这种程序不具有扩展性);  </li><li>OR改写为IN(or的效率是n级别);  </li><li><p>OR改写为UNION(mysql的索引合并很弱智); </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> phone = <span class="string">'159'</span> <span class="keyword">or</span> <span class="keyword">name</span> = ‘john’;  </span><br><span class="line">=&gt;  </span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> phone=<span class="string">'159'</span></span><br><span class="line"><span class="keyword">union</span>  </span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'jonh'</span></span><br></pre></td></tr></table></figure></li><li><p>避免负向%;  </p></li><li>慎用count(*);  </li><li>limit高效分页(limit越大，效率越低);  </li><li>使用union all替代union(union有去重开销);  </li><li>少用连接join;  </li><li>使用group by;  </li><li>请使用同类型比较;  </li><li>打散批量更新;  </li></ul><h3 id="性能分析工具"><a href="#性能分析工具" class="headerlink" title="性能分析工具"></a>性能分析工具</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> profile;  </span><br><span class="line">mysqlsla;  </span><br><span class="line">mysqldumpslow;  </span><br><span class="line"><span class="keyword">explain</span>;  </span><br><span class="line"><span class="keyword">show</span> slow <span class="keyword">log</span>;  </span><br><span class="line"><span class="keyword">show</span> <span class="keyword">processlist</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RESTful API 设计指南</title>
      <link href="/2018/09/10/RESTful-API-%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97/"/>
      <url>/2018/09/10/RESTful-API-%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<center><img src="/2018/09/10/RESTful-API-设计指南/bg2014052201.png" alt=""></center><h4 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h4><p>API与客户端的通信协议，建议使用HTTPS协议</p><h4 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h4><p>应该尽量将API部署在专用域名之下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.example.com</span><br></pre></td></tr></table></figure><p>如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://example.org/api/</span><br></pre></td></tr></table></figure><h4 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h4><p>应该将API的版本号放入URL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.example.com/v1/</span><br></pre></td></tr></table></figure><p>另一种做法是将版本号放在HTTP头信息中，但不如放入URL方便和直观。Github采用这种做法。</p><h4 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h4><p>路径又称”终点”（endpoint），表示API的具体网址。在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的”集合”（collection），所以API中的名词也应该使用复数。举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://api.example.com/v1/zoos</span><br><span class="line">https://api.example.com/v1/animals</span><br><span class="line">https://api.example.com/v1/employees</span><br></pre></td></tr></table></figure><h4 id="HTTP动词"><a href="#HTTP动词" class="headerlink" title="HTTP动词"></a>HTTP动词</h4><p>对于资源的具体操作类型，由HTTP动词表示。<br>常用的HTTP动词有下面五个（括号里是对应的SQL命令）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET（SELECT）：从服务器取出资源（一项或多项）。</span><br><span class="line">POST（CREATE）：在服务器新建一个资源。</span><br><span class="line">PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</span><br><span class="line">PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。</span><br><span class="line">DELETE（DELETE）：从服务器删除资源。</span><br></pre></td></tr></table></figure><p>还有两个不常用的HTTP动词。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HEAD：获取资源的元数据。</span><br><span class="line">OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。</span><br></pre></td></tr></table></figure><p>下面是一些例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /star：列出所有明星信息</span><br><span class="line">POST /star：新增一个明星信息</span><br><span class="line">GET /star/ID：获取指定ID的明星信息</span><br><span class="line">PUT /star/ID：更新指定ID的明星信息（提供该明星的全部信息）</span><br><span class="line">PATCH /star/ID：更新指定ID的明星的信息（提供该明星的部分信息）</span><br><span class="line">DELETE /star/ID：删除指定ID的明星</span><br></pre></td></tr></table></figure><h4 id="过滤信息"><a href="#过滤信息" class="headerlink" title="过滤信息"></a>过滤信息</h4><p>如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。<br>下面是一些常见的参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">?limit=10：指定返回记录的数量</span><br><span class="line">?offset=10：指定返回记录的开始位置。</span><br><span class="line">?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</span><br><span class="line">?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</span><br><span class="line">?animal_type_id=1：指定筛选条件</span><br><span class="line">参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复。比如，GET /zoo/ID/animals 与 GET /animals?zoo_id=ID 的含义是相同的。</span><br></pre></td></tr></table></figure><h4 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h4><p>服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</span><br><span class="line">201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</span><br><span class="line">202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</span><br><span class="line">204 NO CONTENT - [DELETE]：用户删除数据成功。</span><br><span class="line">400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</span><br><span class="line">401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</span><br><span class="line">403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</span><br><span class="line">404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</span><br><span class="line">406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</span><br><span class="line">410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</span><br><span class="line">422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</span><br><span class="line">500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</span><br></pre></td></tr></table></figure><h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p>如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    error: &quot;Invalid API key&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h4><p>针对不同操作，服务器向用户返回的结果应该符合以下规范。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /collection：返回资源对象的列表（数组）</span><br><span class="line">GET /collection/resource：返回单个资源对象</span><br><span class="line">POST /collection：返回新生成的资源对象</span><br><span class="line">PUT /collection/resource：返回完整的资源对象</span><br><span class="line">PATCH /collection/resource：返回完整的资源对象</span><br><span class="line">DELETE /collection/resource：返回一个空文档</span><br></pre></td></tr></table></figure><h4 id="Hypermedia-API"><a href="#Hypermedia-API" class="headerlink" title="Hypermedia API"></a>Hypermedia API</h4><p>RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。<br>比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"link"</span>: &#123;</span><br><span class="line">  <span class="attr">"rel"</span>:   <span class="string">"collection https://www.example.com/zoos"</span>,</span><br><span class="line">  <span class="attr">"href"</span>:  <span class="string">"https://api.example.com/zoos"</span>,</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"List of zoos"</span>,</span><br><span class="line">  <span class="attr">"type"</span>:  <span class="string">"application/vnd.yourformat+json"</span></span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><p>上面代码表示，文档中有一个link属性，用户读取这个属性就知道下一步该调用什么API了。rel表示这个API与当前网址的关系（collection关系，并给出该collection的网址），href表示API的路径，title表示API的标题，type表示返回类型。<br>Hypermedia API的设计被称为HATEOAS。Github的API就是这种设计，访问api.github.com会得到一个所有可用API的网址列表。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"current_user_url"</span>: <span class="string">"https://api.github.com/user"</span>,</span><br><span class="line">  <span class="attr">"authorizations_url"</span>: <span class="string">"https://api.github.com/authorizations"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面可以看到，如果想获取当前用户的信息，应该去访问api.github.com/user，然后就得到了下面结果。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"message"</span>: <span class="string">"Requires authentication"</span>,</span><br><span class="line">  <span class="attr">"documentation_url"</span>: <span class="string">"https://developer.github.com/v3"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码表示，服务器给出了提示信息，以及文档的网址。</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html" target="_blank" rel="noopener">HTTPS协议</a><br><a href="https://developer.github.com/v3/media/#request-specific-version" target="_blank" rel="noopener">GitHub</a></p>]]></content>
      
      <categories>
          
          <category> http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> RESTful </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RESTful架构</title>
      <link href="/2018/09/10/RESTful%E6%9E%B6%E6%9E%84/"/>
      <url>/2018/09/10/RESTful%E6%9E%B6%E6%9E%84/</url>
      <content type="html"><![CDATA[<center><img src="/2018/09/10/RESTful架构/restful.gif" alt=""></center><h4 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h4><p>REST这个词，是<a href="https://en.wikipedia.org/wiki/Roy_Fielding" target="_blank" rel="noopener">Roy Thomas Fielding</a>在他2000年的<a href="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm" target="_blank" rel="noopener">博士论文</a>中提出的。Fielding是一个非常牛气的大神，他是HTTP协议（1.0版和1.1版）的主要设计者、Apache服务器软件的作者之一、Apache基金会的第一任主席。Fielding介绍博士论文的写作目的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;本文研究计算机科学两大前沿----软件和网络----的交叉点。长期以来，软件研究主要关注软件设计的分类、设计方法的演化，很少客观地评估不同的设计选择对系统行为的影响。而相反地，网络研究主要关注系统之间通信行为的细节、如何改进特定通信机制的表现，常常忽视了一个事实，那就是改变应用程序的互动风格比改变互动协议，对整体表现有更大的影响。我这篇文章的写作目的，就是想在符合架构原理的前提下，理解和评估以网络为基础的应用软件的架构设计，得到一个功能强、性能好、适宜通信的架构。&quot;</span><br><span class="line">(This dissertation explores a junction on the frontiers of two research disciplines in computer science: software and networking. Software research has long been concerned with the categorization of software designs and the development of design methodologies, but has rarely been able to objectively evaluate the impact of various design choices on system behavior. Networking research, in contrast, is focused on the details of generic communication behavior between systems and improving the performance of particular communication techniques, often ignoring the fact that changing the interaction style of an application can have more impact on performance than the communication protocols used for that interaction. My work is motivated by the desire to understand and evaluate the architectural design of network-based application software through principled use of architectural constraints, thereby obtaining the functional, performance, and social properties desired of an architecture. )</span><br></pre></td></tr></table></figure><h4 id="名称"><a href="#名称" class="headerlink" title="名称"></a>名称</h4><p>Fielding将他的互联网软件的架构原则，定名为REST，即Representational State Transfer（表现层状态转化）的缩写；如果一个架构符合REST原则，就可以将该架构称为REST架构。</p><h4 id="资源（Resources）"><a href="#资源（Resources）" class="headerlink" title="资源（Resources）"></a>资源（Resources）</h4><p>REST的名称”表现层状态转化”中，省略了主语。”表现层”其实指的是”资源”（Resources）的”表现层”。“资源”就是网络上的一个实体。它既可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的实在。你可以用一个URI（统一资源定位符）指向它，每种资源对应一个特定的URI。要获取这个资源，访问它的URI就可以，因此URI就成了每一个资源的地址或独一无二的识别符。“上网”其实就是通过资源的URI与网络上一系列资源的互动。</p><h4 id="表现层（Representation）"><a href="#表现层（Representation）" class="headerlink" title="表现层（Representation）"></a>表现层（Representation）</h4><p>“资源”是一种信息实体，它可以有多种外在表现形式。我们把”资源”具体呈现出来的形式，叫做它的”表现层”（Representation）。比如，文本可以用txt格式表现，也可以用HTML格式、XML格式、JSON格式表现，甚至可以采用二进制格式；图片可以用JPG格式表现，也可以用PNG格式表现。URI只代表资源的实体，不代表它的形式。严格地说，有些网址最后的”.html”后缀名是不必要的，因为这个后缀名表示格式，属于”表现层”范畴，而URI应该只代表”资源”的位置。它的具体表现形式，应该在HTTP请求的头信息中用Accept和Content-Type字段指定，这两个字段才是对”表现层”的描述。</p><h4 id="状态转化（State-Transfer）"><a href="#状态转化（State-Transfer）" class="headerlink" title="状态转化（State Transfer）"></a>状态转化（State Transfer）</h4><p>访问一个网站，就代表了客户端和服务器的一个互动过程。在这个过程中，势必涉及到数据和状态的变化。互联网通信协议HTTP协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生”状态转化”（State Transfer）。而这种转化是建立在表现层之上的，所以就是”表现层状态转化”。客户端用到的手段，只能是HTTP协议。具体来说，就是HTTP协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。它们分别对应四种基本操作：GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源。</p><h4 id="什么是Restfull-API"><a href="#什么是Restfull-API" class="headerlink" title="什么是Restfull-API"></a>什么是Restfull-API</h4><p>综上所属，总结一下什么是RESTful架构：</p><ul><li>每一个URI代表一种资源；</li><li>客户端和服务器之间，传递这种资源的某种表现层；</li><li>客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”。　　<h4 id="误区"><a href="#误区" class="headerlink" title="误区"></a>误区</h4>RESTful架构有一些典型的设计误区。最常见的一种设计错误，就是URI包含动词。因为”资源”表示一种实体，所以应该是名词，URI不应该有动词，动词应该放在HTTP协议中。举例来说，某个URI是/posts/show/1，其中show是动词，这个URI就设计错了，正确的写法应该是/posts/1，然后用GET方法表示show。<br>如果某些动作是HTTP动词表示不了的，你就应该把动作做成一种资源。比如网上汇款，从账户1向账户2汇款500元，错误的URI是：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　POST /accounts/1/transfer/500/to/2</span><br></pre></td></tr></table></figure><p>正确的写法是把动词transfer改成名词transaction，资源不能是动词，但是可以是一种服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　　POST /transaction HTTP/1.1</span><br><span class="line">　　Host: 127.0.0.1　　</span><br><span class="line">　　from=1&amp;to=2&amp;amount=500.00</span><br></pre></td></tr></table></figure><p>　　</p><p>参考资料</p><ul><li><a href="https://zh.wikipedia.org/wiki/表现层状态转换" target="_blank" rel="noopener">表现层状态转移</a></li><li><a href="https://blog.csdn.net/u010622769/article/details/54341363" target="_blank" rel="noopener">RESTful api接口规范</a></li></ul>]]></content>
      
      <categories>
          
          <category> http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> RESTful </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>什么是RESTful API</title>
      <link href="/2018/09/10/%E4%BB%80%E4%B9%88%E6%98%AFRESTful-API/"/>
      <url>/2018/09/10/%E4%BB%80%E4%B9%88%E6%98%AFRESTful-API/</url>
      <content type="html"><![CDATA[<center><img src="/2018/09/10/什么是RESTful-API/restful.gif" alt=""></center><p>在弄清楚什么是RESTful API之前，首先要弄清楚什么是REST。REST –  Representational State Transfer，英文直译过来的意思是“表现层状态转移”。RESTful即<strong>URL定位资源，用HTTP动词（GET,POST,PUT,DELETE)描述操作</strong></p><ul><li>Resource：资源，即数据。</li><li>Representational：某种表现形式，比如用JSON，XML，JPEG等；</li><li>State Transfer：状态变化。通过HTTP动词实现。</li></ul><p>所谓RESTful API就是REST风格的API。 那么在什么场景下使用RESTful API呢？在当今的互联网应用的前端展示媒介很丰富。有手机、有平板电脑还有PC以及其他的展示媒介。那么这些前端接收到的用户请求统一由一个后台来处理并返回给不同的前端肯定是最科学和最经济的方式，RESTful API就是一套协议来规范多种形式的前端和同一个后台的交互方式。<br>RESTful API由后台也就是服务端来提供前端来调用。前端调用API向后台发起HTTP请求，后台响应请求将处理结果反馈给前端。也就是说RESTful 是典型的基于HTTP的协议。</p><h3 id="RESTful-API的设计规则与规范"><a href="#RESTful-API的设计规则与规范" class="headerlink" title="RESTful API的设计规则与规范"></a>RESTful API的设计规则与规范</h3><h4 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h4><p>资源就是网络上的一个实体，一段文本，一张图片或者一首歌曲。资源总是要通过一种载体来反应它的内容。文本可以用TXT，也可以用HTML或者XML、图片可以用JPG格式或者PNG格式，JSON是现在最常用的资源表现形式。</p><h4 id="统一接口"><a href="#统一接口" class="headerlink" title="统一接口"></a>统一接口</h4><p>RESTful风格的数据元操CRUD（create,read,update,delete）分别对应HTTP方法：GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源，这样就统一了数据操作的接口。</p><h4 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h4><p>可以用一个URI（统一资源定位符）指向资源，即每个URI都对应一个特定的资源。要获取这个资源访问它的URI就可以，因此URI就成了每一个资源的地址或识别符。一般的，每个资源至少有一个URI与之对应，最典型的URI就是URL。</p><h4 id="无状态"><a href="#无状态" class="headerlink" title="无状态"></a>无状态</h4><p>所谓无状态即所有的资源都可以URI定位，而且这个定位与其他资源无关，也不会因为其他资源的变化而变化。有状态和无状态的区别，举个例子说明一下，例如要查询员工工资的步骤为第一步：登录系统。第二步：进入查询工资的页面。第三步：搜索该员工。第四步：点击姓名查看工资。这样的操作流程就是有状态的，查询工资的每一个步骤都依赖于前一个步骤，只要前置操作不成功，后续操作就无法执行。如果输入一个URL就可以得到指定员工的工资，则这种情况就是无状态的，因为获取工资不依赖于其他资源或状态，且这种情况下，员工工资是一个资源，由一个URL与之对应可以通过HTTP中的GET方法得到资源，这就是典型的RESTful风格。</p><h4 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h4><ul><li>应该将API的版本号放入URL。GET:<a href="http://www.xxx.com/v1/friend/123" target="_blank" rel="noopener">http://www.xxx.com/v1/friend/123</a></li><li>URL中只能有名词而不能有动词，操作的表达是使用HTTP的动词GET,POST,PUT,DELETEL。URL只标识资源的地址，既然是资源那就是名词了</li><li>如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。?limit=10：指定返回记录的数量、?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</li></ul><p>参考资料</p><ul><li><a href="https://zh.wikipedia.org/wiki/表现层状态转换" target="_blank" rel="noopener">表现层状态转移</a></li><li><a href="https://blog.csdn.net/u010622769/article/details/54341363" target="_blank" rel="noopener">RESTful api接口规范</a></li></ul>]]></content>
      
      <categories>
          
          <category> http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> RESTful </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>http状态码详解</title>
      <link href="/2018/09/07/http%E7%8A%B6%E6%80%81%E7%A0%81%E8%AF%A6%E8%A7%A3/"/>
      <url>/2018/09/07/http%E7%8A%B6%E6%80%81%E7%A0%81%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<center><img src="/2018/09/07/http状态码详解/status-code.png" alt=""></center><table><thead><tr><th>状态码</th><th>详解</th></tr></thead><tbody><tr><td>100</td><td>客户端应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。</td></tr><tr><td>101</td><td>服务器已经理解了客户端的请求，并将通过Upgrade 消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade 消息头中定义的那些协议。只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的HTTP 版本比旧版本更有优势，或者切换到一个实时且同步的协议以传送利用此类特性的资源。</td></tr><tr><td>102</td><td>由WebDAV（RFC 2518）扩展的状态码，代表处理将被继续执行。</td></tr><tr><td>200</td><td>请求已成功，请求所希望的响应头或数据体将随此响应返回。</td></tr><tr><td>201</td><td>请求已经被实现，而且有一个新的资源已经依据请求的需要而建立，且其 URI 已经随Location 头信息返回。假如需要的资源无法及时建立的话，应当返回 ‘202 Accepted’。</td></tr><tr><td>202</td><td>服务器已接受请求，但尚未处理。正如它可能被拒绝一样，最终该请求可能会也可能不会被执行。在异步操作的场合下，没有比发送这个状态码更方便的做法了。返回202状态码的响应的目的是允许服务器接受其他过程的请求（例如某个每天只执行一次的基于批处理的操作），而不必让客户端一直保持与服务器的连接直到批处理操作全部完成。在接受请求处理并返回202状态码的响应应当在返回的实体中包含一些指示处理当前状态的信息，以及指向处理状态监视器或状态预测的指针，以便用户能够估计操作是否已经完成。</td></tr><tr><td>203</td><td>服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超集。例如，包含资源的元数据可能导致原始服务器知道元信息的超级。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回200 OK的情况下才是合适的。</td></tr><tr><td>204</td><td>服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。响应可能通过实体头部的形式，返回新的或更新后的元信息。如果存在这些头部信息，则应当与所请求的变量相呼应。如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。 　　由于204响应被禁止包含任何消息体，因此它始终以消息头后的第一个空行结尾。</td></tr><tr><td>205</td><td>服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。与204响应一样，该响应也被禁止包含任何消息体，且以消息头后的第一个空行结束。</td></tr><tr><td>206</td><td>服务器已经成功处理了部分 GET 请求。类似于 FlashGet 或者迅雷这类的 HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。该请求必须包含 Range 头信息来指示客户端希望得到的内容范围，并且可能包含 If-Range 来作为请求条件。响应必须包含如下的头部域：Content-Range 用以指示本次响应中返回的内容的范围；如果是 Content-Type 为 multipart/byteranges 的多段下载，则每一 multipart 段中都应包含 Content-Range 域用以指示本段的内容范围。假如响应中包含 Content-Length，那么它的数值必须匹配它返回的内容范围的真实字节数。Date ETag 和/或 Content-Location，假如同样的请求本应该返回200响应。Expires, Cache-Control，和/或 Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。假如本响应请求使用了 If-Range 强缓存验证，那么本次响应不应该包含其他实体头；假如本响应的请求使用了 If-Range 弱缓存验证，那么本次响应禁止包含其他实体头；这避免了缓存的实体内容和更新了的实体头信息之间的不一致。否则，本响应就应当包含所有本应该返回200响应中应当返回的所有实体头部域。假如 ETag 或 Last-Modified 头部不能精确匹配的话，则客户端缓存应禁止将206响应返回的内容与之前任何缓存过的内容组合在一起。任何不支持 Range 以及 Content-Range 头的缓存都禁止缓存206响应返回的内容。</td></tr><tr><td>207</td><td>由WebDAV(RFC 2518)扩展的状态码，代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。</td></tr><tr><td>300</td><td>被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。除非这是一个 HEAD 请求，否则该响应应当包括一个资源特性及地址的列表的实体，以便用户或浏览器从中选择最合适的重定向地址。这个实体的格式由 Content-Type 定义的格式所决定。浏览器可能根据响应的格式以及浏览器自身能力，自动作出最合适的选择。当然，RFC 2616规范并没有规定这样的自动选择该如何进行。如果服务器本身已经有了首选的回馈选择，那么在 Location 中应当指明这个回馈的 URI；浏览器可能会将这个 Location 值作为自动重定向的地址。此外，除非额外指定，否则这个响应也是可缓存的。</td></tr><tr><td>301</td><td>被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个 URI 之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。新的永久性的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。如果这不是一个 GET 或者 HEAD 请求，因此浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。注意：对于某些使用 HTTP/1.0 协议的浏览器，当它们发送的 POST 请求得到了一个301响应的话，接下来的重定向请求将会变成 GET 方式。</td></tr><tr><td>302</td><td>请求的资源现在临时从不同的 URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。新的临时性的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。如果这不是一个 GET 或者 HEAD 请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用 GET 方式访问在 Location 中规定的 URI，而无视原先请求的方法。状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。</td></tr><tr><td>303</td><td>对应当前请求的响应可以在另一个 URI 上被找到，而且客户端应当采用 GET 的方式访问那个资源。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的 URI 不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。 　　新的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。注意：许多 HTTP/1.1 版以前的 浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。</td></tr><tr><td>304</td><td>果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。 　　该响应必须包含以下的头信息：Date，除非这个服务器没有时钟。假如没有时钟的服务器也遵守这些规则，那么代理服务器以及客户端可以自行将 Date 字段添加到接收到的响应头中去（正如RFC 2068中规定的一样），缓存机制将会正常工作。ETag 和/或 Content-Location，假如同样的请求本应返回200响应。 　　Expires, Cache-Control，和/或Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。假如本响应请求使用了强缓存验证，那么本次响应不应该包含其他实体头；否则（例如，某个带条件的 GET 请求使用了弱缓存验证），本次响应禁止包含其他实体头；这避免了缓存了的实体内容和更新了的实体头信息之间的不一致。假如某个304响应指明了当前某个实体没有缓存，那么缓存系统必须忽视这个响应，并且重复发送不包含限制条件的请求。假如接收到一个要求更新某个缓存条目的304响应，那么缓存系统必须更新整个条目以反映所有在响应中被更新的字段的值。</td></tr><tr><td>305</td><td>被请求的资源必须通过指定的代理才能被访问。Location 域中将给出指定的代理所在的 URI 信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能建立305响应。注意：RFC 2068中没有明确305响应是为了重定向一个单独的请求，而且只能被原始服务器建立。忽视这些限制可能导致严重的安全后果。</td></tr><tr><td>306</td><td>在最新版的规范中，306状态码已经不再被使用。</td></tr><tr><td>307</td><td>请求的资源现在临时从不同的URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。新的临时性的URI 应当在响应的 Location 域中返回。除非这是一个HEAD 请求，否则响应的实体中应当包含指向新的URI 的超链接及简短说明。因为部分浏览器不能识别307响应，因此需要添加上述必要信息以便用户能够理解并向新的 URI 发出访问请求。 　　如果这不是一个GET 或者 HEAD 请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。</td></tr><tr><td>400</td><td>1、语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求。2、请求参数有误。</td></tr><tr><td>401</td><td>当前请求需要用户验证。该响应必须包含一个适用于被请求资源的 WWW-Authenticate 信息头用以询问用户信息。客户端可以重复提交一个包含恰当的 Authorization 头信息的请求。如果当前请求已经包含了Authorization 证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。参见RFC 2617。</td></tr><tr><td>402</td><td>该状态码是为了将来可能的需求而预留的。</td></tr><tr><td>403</td><td>服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个 HEAD 请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。</td></tr><tr><td>404</td><td>请求失败，请求所希望得到的资源未被在服务器上发现。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。</td></tr><tr><td>405</td><td>请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow 头信息用以表示出当前资源能够接受的请求方法的列表。鉴于 PUT，DELETE 方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。</td></tr><tr><td>406</td><td>请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体。除非这是一个 HEAD 请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址列表的实体。实体的格式由 Content-Type 头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准。</td></tr><tr><td>407</td><td>与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个 Proxy-Authenticate 用以进行身份询问。客户端可以返回一个 Proxy-Authorization 信息头用以验证。参见RFC 2617。</td></tr><tr><td>408</td><td>请求超时。客户端没有在服务器预备等待的时间内完成一个请求的发送。客户端可以随时再次提交这一请求而无需进行任何更改。</td></tr><tr><td>409</td><td>由于和被请求的资源的当前状态之间存在冲突，请求无法完成。这个代码只允许用在这样的情况下才能被使用：用户被认为能够解决冲突，并且会重新提交新的请求。该响应应当包含足够的信息以便用户发现冲突的源头。冲突通常发生于对 PUT 请求的处理中。例如，在采用版本检查的环境下，某次 PUT 提交的对特定资源的修改请求所附带的版本信息与之前的某个（第三方）请求向冲突，那么此时服务器就应该返回一个409错误，告知用户请求无法完成。此时，响应实体中很可能会包含两个冲突版本之间的差异比较，以便用户重新提交归并以后的新版本。</td></tr><tr><td>410</td><td>被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址。这样的状况应当被认为是永久性的。如果可能，拥有链接编辑功能的客户端应当在获得用户许可后删除所有指向这个地址的引用。如果服务器不知道或者无法确定这个状况是否是永久的，那么就应该使用404状态码。除非额外说明，否则这个响应是可缓存的。410响应的目的主要是帮助网站管理员维护网站，通知用户该资源已经不再可用，并且服务器拥有者希望所有指向这个资源的远端连接也被删除。这类事件在限时、增值服务中很普遍。同样，410响应也被用于通知客户端在当前服务器站点上，原本属于某个个人的资源已经不再可用。当然，是否需要把所有永久不可用的资源标记为’410 Gone’，以及是否需要保持此标记多长时间，完全取决于服务器拥有者。</td></tr><tr><td>411</td><td>服务器拒绝在没有定义 Content-Length 头的情况下接受请求。在添加了表明请求消息体长度的有效 Content-Length 头之后，客户端可以再次提交该请求。</td></tr><tr><td>412</td><td>服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。</td></tr><tr><td>413</td><td>服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。如果这个状况是临时的，服务器应当返回一个 Retry-After 的响应头，以告知客户端可以在多少时间以后重新尝试。</td></tr><tr><td>414</td><td>请求的URI 长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。这比较少见，通常的情况包括：本应使用POST方法的表单提交变成了GET方法，导致查询字符串（Query String）过长。重定向URI “黑洞”，例如每次重定向把旧的 URI 作为新的 URI 的一部分，导致在若干次重定向后 URI 超长。客户端正在尝试利用某些服务器中存在的安全漏洞攻击服务器。这类服务器使用固定长度的缓冲读取或操作请求的 URI，当 GET 后的参数超过某个数值后，可能会产生缓冲区溢出，导致任意代码被执行[1]。没有此类漏洞的服务器，应当返回414状态码。</td></tr><tr><td>415</td><td>对于当前请求的方法和所请求的资源，请求中提交的实体并不是服务器中所支持的格式，因此请求被拒绝。</td></tr><tr><td>416</td><td>如果请求中包含了 Range 请求头，并且 Range 中指定的任何数据范围都与当前资源的可用范围不重合，同时请求中又没有定义 If-Range 请求头，那么服务器就应当返回416状态码。假如 Range 使用的是字节范围，那么这种情况就是指请求指定的所有数据范围的首字节位置都超过了当前资源的长度。服务器也应当在返回416状态码的同时，包含一个 Content-Range 实体头，用以指明当前资源的长度。这个响应也被禁止使用 multipart/byteranges 作为其 Content-Type。</td></tr><tr><td>417</td><td>在请求头 Expect 中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服务器，它有明显的证据证明在当前路由的下一个节点上，Expect 的内容无法被满足。</td></tr><tr><td>421</td><td>从当前客户端所在的IP地址到服务器的连接数超过了服务器许可的最大范围。通常，这里的IP地址指的是从服务器上看到的客户端地址（比如用户的网关或者代理服务器地址）。在这种情况下，连接数的计算可能涉及到不止一个终端用户。</td></tr><tr><td>422</td><td>从当前客户端所在的IP地址到服务器的连接数超过了服务器许可的最大范围。通常，这里的IP地址指的是从服务器上看到的客户端地址（比如用户的网关或者代理服务器地址）。在这种情况下，连接数的计算可能涉及到不止一个终端用户。</td></tr><tr><td>423</td><td>请求格式正确，但是由于含有语义错误，无法响应。（RFC 4918 WebDAV）423 Locked 当前资源被锁定。（RFC 4918 WebDAV）</td></tr><tr><td>424</td><td>由于之前的某个请求发生的错误，导致当前请求失败，例如 PROPPATCH。（RFC 4918 WebDAV）</td></tr><tr><td>425</td><td>在WebDav Advanced Collections 草案中定义，但是未出现在《WebDAV 顺序集协议》（RFC 3658）中。</td></tr><tr><td>426</td><td>客户端应当切换到TLS/1.0。（RFC 2817）</td></tr><tr><td>449</td><td>由微软扩展，代表请求应当在执行完适当的操作后进行重试。</td></tr><tr><td>500</td><td>服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器的程序码出错时出现。</td></tr><tr><td>501</td><td>服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。</td></tr><tr><td>502</td><td>作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。</td></tr><tr><td>503</td><td>由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是临时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个 Retry-After 头用以标明这个延迟时间。如果没有给出这个 Retry-After 信息，那么客户端应当以处理500响应的方式处理它。注意：503状态码的存在并不意味着服务器在过载的时候必须使用它。某些服务器只不过是希望拒绝客户端的连接。</td></tr><tr><td>504</td><td>作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。注意：某些代理服务器在DNS查询超时时会返回400或者500错误</td></tr><tr><td>505</td><td>服务器不支持，或者拒绝支持在请求中使用的 HTTP 版本。这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体。</td></tr><tr><td>506</td><td>由《透明内容协商协议》（RFC 2295）扩展，代表服务器存在内部配置错误：被请求的协商变元资源被配置为在透明内容协商中使用自己，因此在一个协商处理中不是一个合适的重点。</td></tr><tr><td>507</td><td>服务器无法存储完成请求所必须的内容。这个状况被认为是临时的。WebDAV (RFC 4918)</td></tr><tr><td>509</td><td>服务器达到带宽限制。这不是一个官方的状态码，但是仍被广泛使用。  </td></tr><tr><td>510</td><td>获取资源所需要的策略并没有没满足。（RFC 2774）</td></tr></tbody></table><p>参考资料</p><ul><li><a href="http://tool.oschina.net/commons?type=5" target="_blank" rel="noopener">HTTP状态码详解</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%9F%BA%E4%BA%8EWeb%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%96%E5%86%99%E5%92%8C%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6" target="_blank" rel="noopener">WebDAV</a></li><li><a href="https://zh.wikipedia.org/wiki/HTTP状态码" target="_blank" rel="noopener">HTTP状态码</a></li></ul>]]></content>
      
      <categories>
          
          <category> http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> WebDAV </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>centos安装git2.3</title>
      <link href="/2018/09/06/centos%E5%AE%89%E8%A3%85git2-3/"/>
      <url>/2018/09/06/centos%E5%AE%89%E8%A3%85git2-3/</url>
      <content type="html"><![CDATA[<center><img src="/2018/09/06/centos安装git2-3/Git-Logo-2Color.png" alt=""></center><h5 id="安装依赖的包"><a href="#安装依赖的包" class="headerlink" title="安装依赖的包"></a>安装依赖的包</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y update</span><br><span class="line">sudo yum install -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker</span><br></pre></td></tr></table></figure><h5 id="下载git源码并解压缩"><a href="#下载git源码并解压缩" class="headerlink" title="下载git源码并解压缩"></a>下载git源码并解压缩</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.kernel.org/pub/software/scm/git/git-2.3.0.tar.gz</span><br><span class="line">tar -zxvf git-2.3.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> git-2.3.0</span><br></pre></td></tr></table></figure><h5 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make prefix=/usr/<span class="built_in">local</span>/git all</span><br><span class="line">sudo make prefix=/usr/<span class="built_in">local</span>/git install</span><br></pre></td></tr></table></figure><h5 id="将git安装路径添加到PATH变量"><a href="#将git安装路径添加到PATH变量" class="headerlink" title="将git安装路径添加到PATH变量"></a>将git安装路径添加到PATH变量</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">## 在最后一行添加</span></span><br><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/git/bin:<span class="variable">$PATH</span> 保存退出</span><br></pre></td></tr></table></figure><h5 id="验证是否安装成功"><a href="#验证是否安装成功" class="headerlink" title="验证是否安装成功"></a>验证是否安装成功</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Neo4j企业版下载地址</title>
      <link href="/2018/08/28/Neo4j%E4%BC%81%E4%B8%9A%E7%89%88%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80/"/>
      <url>/2018/08/28/Neo4j%E4%BC%81%E4%B8%9A%E7%89%88%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80/</url>
      <content type="html"><![CDATA[<center><img src="/2018/08/28/Neo4j企业版下载地址/neo4j_notag_whitebg.png" alt=""></center><table><thead><tr><th>版本</th><th>企业</th><th>社区</th></tr></thead><tbody><tr><td>2.3.1</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-2.3.1-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-2.3.1-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-2.3.1-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-2.3.1-unix.tar.gz</a></td></tr><tr><td>2.3.0</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-2.3.0-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-2.3.0-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-2.3.0-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-2.3.0-unix.tar.gz</a></td></tr><tr><td>2.3.10</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-2.3.10-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-2.3.10-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-2.3.10-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-2.3.10-unix.tar.gz</a></td></tr><tr><td>2.3.11</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-2.3.11-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-2.3.11-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-2.3.11-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-2.3.11-unix.tar.gz</a></td></tr><tr><td>2.3.12</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-2.3.12-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-2.3.12-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-2.3.12-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-2.3.12-unix.tar.gz</a></td></tr><tr><td>2.3.2</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-2.3.2-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-2.3.2-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-2.3.2-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-2.3.2-unix.tar.gz</a></td></tr><tr><td>2.3.3</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-2.3.3-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-2.3.3-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-2.3.3-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-2.3.3-unix.tar.gz</a></td></tr><tr><td>2.3.4</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-2.3.4-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-2.3.4-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-2.3.4-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-2.3.4-unix.tar.gz</a></td></tr><tr><td>2.3.5</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-2.3.5-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-2.3.5-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-2.3.5-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-2.3.5-unix.tar.gz</a></td></tr><tr><td>2.3.6</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-2.3.6-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-2.3.6-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-2.3.6-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-2.3.6-unix.tar.gz</a></td></tr><tr><td>2.3.7</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-2.3.7-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-2.3.7-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-2.3.7-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-2.3.7-unix.tar.gz</a></td></tr><tr><td>2.3.8</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-2.3.8-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-2.3.8-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-2.3.8-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-2.3.8-unix.tar.gz</a></td></tr><tr><td>2.3.9</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-2.3.9-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-2.3.9-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-2.3.9-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-2.3.9-unix.tar.gz</a></td></tr><tr><td>3.0.12</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.0.12-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.0.12-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.0.12-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.0.12-unix.tar.gz</a></td></tr><tr><td>3.0.0</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.0.0-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.0.0-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.0.0-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.0.0-unix.tar.gz</a></td></tr><tr><td>3.0.1</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.0.1-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.0.1-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.0.1-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.0.1-unix.tar.gz</a></td></tr><tr><td>3.0.10</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.0.10-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.0.10-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.0.10-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.0.10-unix.tar.gz</a></td></tr><tr><td>3.0.11</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.0.11-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.0.11-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.0.11-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.0.11-unix.tar.gz</a></td></tr><tr><td>3.0.12</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.0.12-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.0.12-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.0.12-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.0.12-unix.tar.gz</a></td></tr><tr><td>3.0.2</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.0.2-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.0.2-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.0.2-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.0.2-unix.tar.gz</a></td></tr><tr><td>3.0.3</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.0.3-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.0.3-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.0.3-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.0.3-unix.tar.gz</a></td></tr><tr><td>3.0.4</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.0.4-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.0.4-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.0.4-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.0.4-unix.tar.gz</a></td></tr><tr><td>3.0.5</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.0.5-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.0.5-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.0.5-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.0.5-unix.tar.gz</a></td></tr><tr><td>3.0.6</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.0.6-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.0.6-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.0.6-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.0.6-unix.tar.gz</a></td></tr><tr><td>3.0.7</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.0.7-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.0.7-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.0.7-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.0.7-unix.tar.gz</a></td></tr><tr><td>3.0.8</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.0.8-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.0.8-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.0.8-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.0.8-unix.tar.gz</a></td></tr><tr><td>3.0.9</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.0.9-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.0.9-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.0.9-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.0.9-unix.tar.gz</a></td></tr><tr><td>3.1.0</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.1.0-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.1.0-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.1.0-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.1.0-unix.tar.gz</a></td></tr><tr><td>3.1.9</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.1.9-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.1.9-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.1.9-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.1.9-unix.tar.gz</a></td></tr><tr><td>3.1.1</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.1.1-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.1.1-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.1.1-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.1.1-unix.tar.gz</a></td></tr><tr><td>3.1.2</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.1.2-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.1.2-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.1.2-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.1.2-unix.tar.gz</a></td></tr><tr><td>3.1.3</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.1.3-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.1.3-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.1.3-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.1.3-unix.tar.gz</a></td></tr><tr><td>3.1.4</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.1.4-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.1.4-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.1.4-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.1.4-unix.tar.gz</a></td></tr><tr><td>3.1.5</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.1.5-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.1.5-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.1.5-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.1.5-unix.tar.gz</a></td></tr><tr><td>3.1.6</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.1.6-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.1.6-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.1.6-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.1.6-unix.tar.gz</a></td></tr><tr><td>3.1.7</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.1.7-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.1.7-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.1.7-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.1.7-unix.tar.gz</a></td></tr><tr><td>3.1.8</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.1.8-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.1.8-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.1.8-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.1.8-unix.tar.gz</a></td></tr><tr><td>3.1.9</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.1.9-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.1.9-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.1.9-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.1.9-unix.tar.gz</a></td></tr><tr><td>3.2.12</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.2.12-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.2.12-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.2.12-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.2.12-unix.tar.gz</a></td></tr><tr><td>3.2.0</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.2.0-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.2.0-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.2.0-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.2.0-unix.tar.gz</a></td></tr><tr><td>3.2.1</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.2.1-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.2.1-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.2.1-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.2.1-unix.tar.gz</a></td></tr><tr><td>3.2.10</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.2.10-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.2.10-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.2.10-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.2.10-unix.tar.gz</a></td></tr><tr><td>3.2.11</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.2.11-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.2.11-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.2.11-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.2.11-unix.tar.gz</a></td></tr><tr><td>3.2.12</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.2.12-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.2.12-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.2.12-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.2.12-unix.tar.gz</a></td></tr><tr><td>3.2.2</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.2.2-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.2.2-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.2.2-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.2.2-unix.tar.gz</a></td></tr><tr><td>3.2.3</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.2.3-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.2.3-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.2.3-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.2.3-unix.tar.gz</a></td></tr><tr><td>3.2.5</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.2.5-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.2.5-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.2.5-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.2.5-unix.tar.gz</a></td></tr><tr><td>3.2.6</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.2.6-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.2.6-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.2.6-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.2.6-unix.tar.gz</a></td></tr><tr><td>3.2.7</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.2.7-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.2.7-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.2.7-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.2.7-unix.tar.gz</a></td></tr><tr><td>3.2.8</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.2.8-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.2.8-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.2.8-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.2.8-unix.tar.gz</a></td></tr><tr><td>3.2.9</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.2.9-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.2.9-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.2.9-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.2.9-unix.tar.gz</a></td></tr><tr><td>3.3.0</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.3.0-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.3.0-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.3.0-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.3.0-unix.tar.gz</a></td></tr><tr><td>3.3.1</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.3.1-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.3.1-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.3.1-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.3.1-unix.tar.gz</a></td></tr><tr><td>3.3.2</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.3.2-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.3.2-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.3.2-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.3.2-unix.tar.gz</a></td></tr><tr><td>3.3.3</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.3.3-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.3.3-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.3.3-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.3.3-unix.tar.gz</a></td></tr><tr><td>3.3.4</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.3.4-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.3.4-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.3.4-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.3.4-unix.tar.gz</a></td></tr><tr><td>3.3.5</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.3.5-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.3.5-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.3.5-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.3.5-unix.tar.gz</a></td></tr><tr><td>3.3.6</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.3.6-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.3.6-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.3.6-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.3.6-unix.tar.gz</a></td></tr><tr><td>3.4.0</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.4.0-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.4.0-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.4.0-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.4.0-unix.tar.gz</a></td></tr><tr><td>3.4.1</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.4.1-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.4.1-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.4.1-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.4.1-unix.tar.gz</a></td></tr><tr><td>3.4.4</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.4.4-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.4.4-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.4.4-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.4.4-unix.tar.gz</a></td></tr><tr><td>3.4.5</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.4.5-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.4.5-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.4.5-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.4.5-unix.tar.gz</a></td></tr><tr><td>3.4.6</td><td><a href="http://dist.neo4j.org/neo4j-enterprise-3.4.6-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-enterprise-3.4.6-unix.tar.gz</a></td><td><a href="http://dist.neo4j.org/neo4j-community-3.4.6-unix.tar.gz" target="_blank" rel="noopener">http://dist.neo4j.org/neo4j-community-3.4.6-unix.tar.gz</a></td></tr></tbody></table><p><strong>参考资料</strong></p><ul><li><a href="https://github.com/docker-library/repo-info/blob/master/repos/neo4j/tag-details.md" target="_blank" rel="noopener">neo4j repo-info</a></li></ul>]]></content>
      
      <categories>
          
          <category> 知识图谱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> neo4j </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Neo4j社区版与企业版的区别</title>
      <link href="/2018/08/28/Neo4j%E7%A4%BE%E5%8C%BA%E7%89%88%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%89%88%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2018/08/28/Neo4j%E7%A4%BE%E5%8C%BA%E7%89%88%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%89%88%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<center><img src="/2018/08/28/Neo4j社区版与企业版的区别/neo4j_notag_whitebg.png" alt=""></center><ul><li>容量：社区版最多支持 320 亿个节点、320 亿个关系和 640 亿个属性，而企业版没有这个限制；</li><li>并发：社区版只能部署成单实例，不能做集群。而企业版可以部署成高可用集群或因果集群，从而可以解决高并发量的问题；</li><li>容灾：由于企业版支持集群，部分实例出故障不会影响整个系统正常运行；</li><li>热备：社区版只支持冷备份，即需要停止服务后才能进行备份，而企业版支持热备，第一次是全量备份，后续是增量备份；</li><li>性能：社区版最多用到 4 个内核，而企业能用到全部内核，且对性能做了精心的优化；</li><li>支持：企业版客户能得到 5X10 电话支持（Neo4j 美国电话、邮件，微云数聚电话、微信、邮件）；</li></ul>]]></content>
      
      <categories>
          
          <category> 知识图谱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> neo4j </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>neo4j备份与恢复</title>
      <link href="/2018/08/28/neo4j%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/"/>
      <url>/2018/08/28/neo4j%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</url>
      <content type="html"><![CDATA[<center><img src="/2018/08/28/neo4j备份与恢复/neo4j_notag_whitebg.png" alt=""></center><p><strong>tips 本文涉及到的备份和恢复命令均在社区版的neo4j中验证通过，执行命令前需要先关闭neo4j数据库</strong></p><ul><li>在实时应用程序中，我们需要定期备份应用程序数据库，以便在任何故障点恢复到某种工作状态</li><li>社区版neo4j不支持热备份，备份和恢复都需要停止neo4j的服务</li><li>企业版neo4j支持热备，第一次是全量备份，后续是增量备份</li></ul><p>Neo4j的neo4j-admin工具提供 dump 和 load 功能，可使用neo4j-admin进行数据的备份和导出</p><h5 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">neo4j-admin dump --database=graph.db --to=/opt/neo4j/backup</span><br></pre></td></tr></table></figure><h5 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">neo4j-admin load --from=/opt/neo4j/backup --database=graph.db --force</span><br></pre></td></tr></table></figure><p><strong>注意：</strong><br>如果还原后数据库无法启动，则到 neo4j.conf中将如下属性前的#号去掉，使其生效</p><center><img src="/2018/08/28/neo4j备份与恢复/Fv-Xt1PjUcMFJWZXc90BOt5_LO7H" alt=""></center>]]></content>
      
      <categories>
          
          <category> 知识图谱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> neo4j </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mac多版本python</title>
      <link href="/2018/08/15/Mac%E5%A4%9A%E7%89%88%E6%9C%ACpython/"/>
      <url>/2018/08/15/Mac%E5%A4%9A%E7%89%88%E6%9C%ACpython/</url>
      <content type="html"><![CDATA[<p>经常遇到这样的情况：<br>系统自带的Python是2.x，自己需要Python 3.x，测试尝鲜；<br>系统是2.6.x，开发环境是2.7.x<br>由于Mac机器系统保护的原因，默认的Python中无法对PIP一些包升级，需要组建新的Python环境。<br>此时需要在系统中安装多个Python，但又不能影响系统自带的Python，即需要实现Python的多版本共存。pyenv就是这样一个Python版本管理器。</p><h4 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew -v <span class="comment"># 验证是否安装成功</span></span><br></pre></td></tr></table></figure><h4 id="安装pyenv"><a href="#安装pyenv" class="headerlink" title="安装pyenv"></a>安装pyenv</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install pyenv</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv -v <span class="comment"># 验证是否安装成功</span></span><br></pre></td></tr></table></figure><h4 id="pyenv-常用命令"><a href="#pyenv-常用命令" class="headerlink" title="pyenv 常用命令"></a>pyenv 常用命令</h4><ul><li>pyenv install –list # 查看可以安装的python版本</li><li>pyenv install x.x.x # 安装x.x.x版本</li><li>pyenv rehash   # 安装之后记得一定要rehash</li><li>pyenv version # 查看当前激活的版本</li><li>pyenv versions # 查看已安装的版本</li><li>pyenv global x.x.x # 将全局切换为x.x.x版本</li><li>pyenv local x.x.x # 将当前用户切换为x.x.x版本</li></ul><h4 id="tips-某些机器pyenv命令不生效的解决方法"><a href="#tips-某些机器pyenv命令不生效的解决方法" class="headerlink" title="tips  某些机器pyenv命令不生效的解决方法"></a>tips  某些机器pyenv命令不生效的解决方法</h4><p>Add to your shell (~/.bashrc or ~/.zshrc) </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/Users/username/.pyenv:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv init -)</span>"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pynev </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ZooKeeper简介</title>
      <link href="/2018/08/15/ZooKeeper%E7%AE%80%E4%BB%8B/"/>
      <url>/2018/08/15/ZooKeeper%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<center><img src="/2018/08/15/ZooKeeper简介/logo.png" style="width:200px;height:160px"></center><h3 id="ZooKeeper是什么"><a href="#ZooKeeper是什么" class="headerlink" title="ZooKeeper是什么"></a>ZooKeeper是什么</h3><ul><li>Apache ZooKeeper是Apache软件基金会的一个软件项目，他为大型分布式计算提供开源的分布式配置服务、同步服务和命名注册，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。</li><li>ZooKeeper的架构通过冗余服务实现高可用性。因此，如果第一次无应答，客户端就可以询问另一台ZooKeeper主机。ZooKeeper节点将它们的数据存储于一个分层的命名空间，非常类似于一个文件系统或一个前缀树结构。客户端可以在节点读写，从而以这种方式拥有一个共享的配置服务，而更新是全局有序的。</li><li>客户端的读请求可以被集群中的任意一台机器处理，如果读请求在节点上注册了监听器，这个监听器也是由所连接的zookeeper机器来处理。对于写请求，这些请求会同时发给其他zookeeper机器并且达成一致后，请求才会返回成功。因此，随着zookeeper的集群机器增多，读请求的吞吐会提高但是写请求的吞吐会下降。</li><li>有序性是zookeeper中非常重要的一个特性，所有的更新都是全局有序的，每个更新都有一个唯一的时间戳，这个时间戳称为zxid（Zookeeper Transaction Id）。而读请求只会相对于更新有序，也就是读请求的返回结果中会带有这个zookeeper最新的zxid。</li></ul><h3 id="ZooKeeper提供了什么"><a href="#ZooKeeper提供了什么" class="headerlink" title="ZooKeeper提供了什么"></a>ZooKeeper提供了什么</h3><ul><li>文件系统</li></ul><p>Zookeeper提供一个多层级的节点命名空间（节点称为znode）。与文件系统不同的是，这些节点都可以设置关联的数据，而文件系统中只有文件节点可以存放数据而目录节点不行。Zookeeper为了保证高吞吐和低延迟，在内存中维护了这个树状的目录结构，这种特性使得Zookeeper不能用于存放大量的数据，每个节点的存放数据上限为1M。</p><ul><li>通知机制</li></ul><p>client端会对某个znode建立一个watcher事件，当该znode发生变化时，这些client会收到zk的通知，然后client可以根据znode变化来做出业务上的改变等。</p><h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><ul><li><a href="http://zookeeper.apache.org/" target="_blank" rel="noopener">官网</a></li><li><a href="https://zh.wikipedia.org/wiki/Apache_ZooKeeper" target="_blank" rel="noopener">维基百科</a></li><li><a href="https://baike.baidu.com/item/Zookeeper" target="_blank" rel="noopener">百度百科</a></li></ul>]]></content>
      
      <categories>
          
          <category> ZooKeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZooKeeper </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>lombok是什么</title>
      <link href="/2018/08/14/lombok%E6%98%AF%E4%BB%80%E4%B9%88/"/>
      <url>/2018/08/14/lombok%E6%98%AF%E4%BB%80%E4%B9%88/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java.<br>Never write another getter or equals method again. Early access to future java features such as val, and much more.</p><p>Lombok是一个可以通过简单的注解形式来帮助我们简化消除一些必须有但显得很臃肿的Java代码的工具，通过使用对应的注解，可以在编译源码的时候生成对应的方法。</p><h3 id="为什么使用lombok"><a href="#为什么使用lombok" class="headerlink" title="为什么使用lombok"></a>为什么使用lombok</h3><p>我们在开发过程中，通常都会定义大量的JavaBean，然后通过IDE去生成其属性的构造器、getter、setter、equals、hashcode、toString方法，当要增加属性或者对某个属性进行改变时，比如命名、类型等，都需要重新去生成上面提到的这些方法。这样重复的劳动没有任何意义，Lombok里面的注解可以轻松解决这些问题。</p><h3 id="features"><a href="#features" class="headerlink" title="features"></a>features</h3><ul><li>val: final 像动态语言一样，声明一个fianl的变量。</li><li>var: 同JDK10</li><li>@Data：注解在类上，将类提供的所有属性都添加get、set方法，并添加、equals、canEquals、hashCode、toString方法</li><li>@Setter：注解在类上，为所有属性添加set方法、注解在属性上为该属性提供set方法</li><li>@Getter：注解在类上，为所有的属性添加get方法、注解在属性上为该属性提供get方法</li><li>@NotNull：在参数中使用时，如果调用时传了null值，就会抛出空指针异常</li><li>@Synchronized 用于方法，可以锁定指定的对象，如果不指定，则默认创建一个对象锁定</li><li>@Log作用于类，创建一个log属性</li><li>@Builder：使用builder模式创建对象</li><li>@NoArgsConstructor：创建一个无参构造函数</li><li>@AllArgsConstructor：创建一个全参构造函数</li><li>@ToString：创建一个toString方法</li><li>@Accessors(chain = true)使用链式设置属性，set方法返回的是this对象。</li><li>@RequiredArgsConstructor：创建对象, 例: 在class上添加@RequiredArgsConstructor(staticName = “of”)会创建生成一个静态方法</li><li>@UtilityClass:工具类</li><li>@ExtensionMethod:设置父类</li><li>@FieldDefaults：设置属性的使用范围，如private、public等，也可以设置属性是否被final修饰。</li><li>@Cleanup: 关闭流、连接点。</li><li>@EqualsAndHashCode：重写equals和hashcode方法。</li><li>@toString：创建toString方法。<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用@Accessors(chain = true)</span></span><br><span class="line">    User userChain = <span class="keyword">new</span> User();</span><br><span class="line">    userChain.setId(<span class="string">"1"</span>).setName(<span class="string">"chain"</span>).setAge(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>参考资料</p><ul><li><a href="https://projectlombok.org/" target="_blank" rel="noopener">官网</a></li><li><a href="https://projectlombok.org/features/all" target="_blank" rel="noopener">features</a></li><li><a href="https://projectlombok.org/features/Data" target="_blank" rel="noopener">lombok @Data</a></li><li><a href="https://github.com/rzwitserloot/lombok" target="_blank" rel="noopener">github</a></li></ul>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> lombok </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Boot 简介</title>
      <link href="/2018/08/13/Spring-Boot-%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/08/13/Spring-Boot-%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<p>Spring Boot 是一个轻量级框架，可以完成基于 Spring 的应用程序的大部分配置工作。在本教程中，将学习如何使用 Spring Boot 的 starter、特性和可执行 JAR 文件结构，快速创建能直接运行的基于 Spring 的应用程序。</p><h3 id="Spring-Boot-是什么？"><a href="#Spring-Boot-是什么？" class="headerlink" title="Spring Boot 是什么？"></a>Spring Boot 是什么？</h3><p>Spring Boot 的目的是提供一组工具，以便快速构建容易配置的 Spring 应用程序。Spring Boot 使您能轻松地创建独立的、生产级的、基于 Spring 且能直接运行的应用程序。基本上讲，这意味着您只需极少的配置，就可以快速获得一个正常运行的 Spring 应用程序，而且这些极少的配置采用了注释的形式。</p><h3 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h3><h4 id="Starter"><a href="#Starter" class="headerlink" title="Starter"></a>Starter</h4><p>starter 是 Spring Boot 的一个重要组成部分，用于限制您需要执行的手动配置依赖项数量。starter 实际上是一组依赖项（比如 Maven POM），这些依赖项是 starter 所表示的应用程序类型所独有的。所有 starter 都使用以下命名约定：spring-boot-starter-XYZ，其中 XYZ 是想要构建的应用程序类型。下面是一些常用的starter及时说明</p><ul><li>spring-boot-starter-web 用于构建 RESTful Web 服务，它使用 Spring MVC 和 Tomcat 作为嵌入式应用程序容器。</li><li>spring-boot-starter-jersey 是 spring-boot-starter-web 的一个替代，它使用 Apache Jersey 而不是 Spring MVC。</li><li>spring-boot-starter-jdbc 用于建立 JDBC 连接池。它基于 Tomcat 的 JDBC 连接池实现。</li></ul><h4 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h4><p>Spring Boot 会使用其 @EnableAutoConfiguration 注释自动配置您的应用程序。自动配置基于类路径中的 JAR 和定义 bean 的方式：</p><ul><li>Spring Boot 使用您在 CLASSPATH 中指定的 JAR，形成一个有关如何配置某个自动行为的观点。例如，如果类路径中有 H2 数据库 JAR，而且您没有配置任何其他 DataSource bean，您的应用程序会自动配置一个内存型数据库。</li><li>Spring Boot 使用您定义 bean 的方式来确定如何自动配置自身。例如，如果您为 JPA bean 添加了 @Entity 注释，Spring Boot 会自动配置 JPA，这样您就不需要 persistence.xml 文件。</li></ul><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>Spring Boot 旨在帮助开发人员快速创建能直接运行的应用程序。为实现该目的，它会将应用程序及其依赖项包装在一个可执行 JAR 中。你可以以jar的形式直接运行你的程序，如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar PATH_TO_EXECUTABLE_JAR/executableJar.jar</span><br></pre></td></tr></table></figure></p><h3 id="优势-劣势"><a href="#优势-劣势" class="headerlink" title="优势|劣势"></a>优势|劣势</h3><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><ul><li>使用 Spring 项目引导页面可以在几秒构建一个项目</li><li>方便对外输出各种形式的服务，如 REST API、WebSocket、Web、Streaming、Tasks</li><li>非常简洁的安全策略集成</li><li>支持关系数据库和非关系数据库</li><li>支持运行期内嵌容器，如 Tomcat、Jetty</li><li>强大的开发包，支持热启动</li><li>自动管理依赖</li><li>自带应用监控</li><li>支持各种 IED，如 IntelliJ IDEA 、NetBeans</li></ul><h4 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h4><p>集成度过高，没有一定的经验你根本就不知道springboot自动做了什么，对于新入门的程序员来说这是件很可怕的事情</p><p>参考资料：</p><ul><li><a href="https://www.ibm.com/developerworks/cn/java/j-spring-boot-basics-perry/index.html" target="_blank" rel="noopener">Spring Boot 基础</a></li><li><a href="https://www.zhihu.com/question/39483566" target="_blank" rel="noopener">Spring Boot 优缺点</a></li></ul>]]></content>
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>修改easy_install和pip为国内源</title>
      <link href="/2018/08/13/%E4%BF%AE%E6%94%B9easy-install%E5%92%8Cpip%E4%B8%BA%E5%9B%BD%E5%86%85%E6%BA%90/"/>
      <url>/2018/08/13/%E4%BF%AE%E6%94%B9easy-install%E5%92%8Cpip%E4%B8%BA%E5%9B%BD%E5%86%85%E6%BA%90/</url>
      <content type="html"><![CDATA[<p>因为一些众所周知的原因，easy_install和pip默认的源速度实在是太慢了，严重影响到正常的开发工作，因此需要将其默认源修改为国内的源，以下相关配置采用的是豆瓣的源，若使用其他的源请自行替换，本文的示例仅为Mac和Linux系统，其他版本的系统（Windows）请自行谷歌。</p><h5 id="pip源修改"><a href="#pip源修改" class="headerlink" title="pip源修改"></a>pip源修改</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir .pip</span><br><span class="line">vi .pip/pip.conf</span><br></pre></td></tr></table></figure><p>在pip.conf中输入以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = http://pypi.douban.com/simple</span><br><span class="line">trusted-host = pypi.douban.com</span><br></pre></td></tr></table></figure><h5 id="easy-install源修改"><a href="#easy-install源修改" class="headerlink" title="easy_install源修改"></a>easy_install源修改</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">vi .pydistutils.cfg</span><br></pre></td></tr></table></figure><p>在.pydistutils.cfg输入以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[easy_install]</span><br><span class="line">index-url=http://pypi.douban.com/simple</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pip </tag>
            
            <tag> easy_install </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>centos时钟同步</title>
      <link href="/2018/08/10/centos%E6%97%B6%E9%92%9F%E5%90%8C%E6%AD%A5/"/>
      <url>/2018/08/10/centos%E6%97%B6%E9%92%9F%E5%90%8C%E6%AD%A5/</url>
      <content type="html"><![CDATA[<p>在使用centos服务器的时候，有时会遇到时间不准确的问题，尤其是在搭建服务器集群的时候会因服务器时间不准确给集群服务器的搭建带来各种未知的问题，下面介绍一种centos服务器使用NTP与互联网上的时间服务器进行时钟同步的方法。</p><h3 id="安装ntpdate"><a href="#安装ntpdate" class="headerlink" title="安装ntpdate"></a>安装ntpdate</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y ntpdate</span><br></pre></td></tr></table></figure><h3 id="将服务器的时区调整为东八区"><a href="#将服务器的时区调整为东八区" class="headerlink" title="将服务器的时区调整为东八区"></a>将服务器的时区调整为东八区</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure><h3 id="执行时钟同步动作"><a href="#执行时钟同步动作" class="headerlink" title="执行时钟同步动作"></a>执行时钟同步动作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntpdate us.pool.ntp.org</span><br></pre></td></tr></table></figure><h3 id="利用crontab，定时同步时钟"><a href="#利用crontab，定时同步时钟" class="headerlink" title="利用crontab，定时同步时钟"></a>利用crontab，定时同步时钟</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e <span class="comment">#编辑当前用户的定时任务</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0-59/10 * * * * /usr/sbin/ntpdate us.pool.ntp.org | logger -t NTP <span class="comment">#设置为每十分钟同步一次</span></span><br></pre></td></tr></table></figure><p>经过以上4步，centos服务器时间不准确的问题即可得到解决，当然你也可以在服务器集群上搭建一个时间服务器，其他的服务器与该服务器进行时钟同步即可。</p>]]></content>
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> 时钟同步 </tag>
            
            <tag> ntpdate </tag>
            
            <tag> crontab </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>centos更换yum源</title>
      <link href="/2018/08/10/centos%E6%9B%B4%E6%8D%A2yum%E6%BA%90/"/>
      <url>/2018/08/10/centos%E6%9B%B4%E6%8D%A2yum%E6%BA%90/</url>
      <content type="html"><![CDATA[<h3 id="备份你的原始镜像源，以免后续出错后可以恢复"><a href="#备份你的原始镜像源，以免后续出错后可以恢复" class="headerlink" title="备份你的原始镜像源，以免后续出错后可以恢复"></a>备份你的原始镜像源，以免后续出错后可以恢复</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure><h3 id="下载新的CentOS-Base-repo-到-etc-yum-repos-d"><a href="#下载新的CentOS-Base-repo-到-etc-yum-repos-d" class="headerlink" title="下载新的CentOS-Base.repo 到/etc/yum.repos.d/"></a>下载新的CentOS-Base.repo 到/etc/yum.repos.d/</h3><ul><li>centos5</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo</span><br></pre></td></tr></table></figure><ul><li>centos6</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br></pre></td></tr></table></figure><ul><li>centos7</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure><h3 id="运行yum-makecache生成缓存"><a href="#运行yum-makecache生成缓存" class="headerlink" title="运行yum makecache生成缓存"></a>运行yum makecache生成缓存</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos6 </tag>
            
            <tag> centos7 </tag>
            
            <tag> centos5 </tag>
            
            <tag> yum源 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关系抽取简介</title>
      <link href="/2018/08/09/%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E7%AE%80%E4%BB%8B/"/>
      <url>/2018/08/09/%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>信息抽取的只要目的是将非结构化或半结构化描述的自然语言转换成结构化数据,关系抽取是其重要的子任务，主要负责从文本中识别出实体，抽取实体之间的语义关系。如“Bill Gates is the founder of MicrosoftInc”，这句话中包含两个实体（Bill Gates，MicrosoftInc），这对实体之间的关系为founder（创建）。</p><h4 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h4><p>目前主流的关系抽取技术分为有监督式的学习方法、半监督式的学习方法和无监督式的学习方法</p><ul><li>有监督式的学习方法将关系抽取任务当成分类问题，依据训练数据设计有效的特征，从而学习各种分类模型，在使用训练过的分类器预测关系；该方法存在的问题为需要大量的人工标注训练语料，而语料的准备工作通常会非常耗时耗力</li><li>半监督式的学习方法主要采用Bootstrapping进行关系抽取，对于要抽取的关系，首先人工设定若干种子实力，然后逐步迭代的从数据抽取关系对应的模版和更多的实例</li><li>无监督式的学习方法首先会假设已经存在相同语义关系的实体对和拥有相似的上下文关系；因此可以利用每个实体对去对应上下文信息来表示该实体对的语义关系，并对所有实体对的语义关系进行聚类。<br>将上述三种学习方法进行对比，有监督的学习方法能够抽取更有效的特征，故其拥有较高的准备率和召回率。</li></ul>]]></content>
      
      
        <tags>
            
            <tag> 非结构化 </tag>
            
            <tag> 半结构化 </tag>
            
            <tag> 关系抽取 </tag>
            
            <tag> 实体 </tag>
            
            <tag> 语义关系 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker安装MongoDB</title>
      <link href="/2018/08/07/Docker%E5%AE%89%E8%A3%85MongoDB/"/>
      <url>/2018/08/07/Docker%E5%AE%89%E8%A3%85MongoDB/</url>
      <content type="html"><![CDATA[<h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mongo:3.6.5</span><br></pre></td></tr></table></figure><h2 id="创建mongodb的工作目录并赋予权限"><a href="#创建mongodb的工作目录并赋予权限" class="headerlink" title="创建mongodb的工作目录并赋予权限"></a>创建mongodb的工作目录并赋予权限</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/mongo</span><br><span class="line">chown 1000:1000 /data/mongo</span><br></pre></td></tr></table></figure><h2 id="新建并启动mongodb"><a href="#新建并启动mongodb" class="headerlink" title="新建并启动mongodb"></a>新建并启动mongodb</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mongo -p 27017:27017 -v /data/mongo:/data/db -d mongo:3.6.5 --auth</span><br></pre></td></tr></table></figure><h2 id="新建mongodb管理员"><a href="#新建mongodb管理员" class="headerlink" title="新建mongodb管理员"></a>新建mongodb管理员</h2><h3 id="进入-mongo-shell"><a href="#进入-mongo-shell" class="headerlink" title="进入 mongo shell"></a>进入 mongo shell</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mongo mongo admin</span><br></pre></td></tr></table></figure><h3 id="创建管理员"><a href="#创建管理员" class="headerlink" title="创建管理员"></a>创建管理员</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(&#123; user: <span class="string">'admin'</span>, <span class="built_in">pwd</span>: <span class="string">'123456'</span>, roles: [ &#123; role: <span class="string">'userAdminAnyDatabase'</span>, db: <span class="string">'admin'</span> &#125; ]&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> docker </tag>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker常用命令</title>
      <link href="/2018/08/07/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/08/07/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h3 id="将待挂载的本地文件赋予权限"><a href="#将待挂载的本地文件赋予权限" class="headerlink" title="将待挂载的本地文件赋予权限"></a>将待挂载的本地文件赋予权限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chcon -Rt svirt_sandbox_file_t /tmp <span class="comment">#tmp为待挂载的文件</span></span><br><span class="line">chown 1000:1000 /tmp <span class="comment">#tmp为待挂载的文件</span></span><br></pre></td></tr></table></figure><h3 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h3> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search ubuntu:16.04</span><br></pre></td></tr></table></figure><h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ubuntu:16.04</span><br></pre></td></tr></table></figure><h3 id="列出本地的镜像"><a href="#列出本地的镜像" class="headerlink" title="列出本地的镜像"></a>列出本地的镜像</h3> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h3 id="删除本地某个镜像"><a href="#删除本地某个镜像" class="headerlink" title="删除本地某个镜像"></a>删除本地某个镜像</h3> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi 镜像ID <span class="comment"># 通过第四部的命令可以查看镜像ID</span></span><br></pre></td></tr></table></figure><h4 id="tip：删除镜像时需要先通知运行该镜像的容器"><a href="#tip：删除镜像时需要先通知运行该镜像的容器" class="headerlink" title="tip：删除镜像时需要先通知运行该镜像的容器"></a>tip：删除镜像时需要先通知运行该镜像的容器</h4><h3 id="新建并启动容器"><a href="#新建并启动容器" class="headerlink" title="新建并启动容器"></a>新建并启动容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -t -i ubuntu:14.04 /bin/bash</span><br></pre></td></tr></table></figure><p>上面的命令是启动一个 bash 终端，允许用户进行交互</p><h3 id="停止运行中的容器"><a href="#停止运行中的容器" class="headerlink" title="停止运行中的容器"></a>停止运行中的容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker 容器ID stop</span><br></pre></td></tr></table></figure><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm  容器ID</span><br></pre></td></tr></table></figure><h3 id="提交对容器的修改"><a href="#提交对容器的修改" class="headerlink" title="提交对容器的修改"></a>提交对容器的修改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit 容器ID learn/ping <span class="comment"># learn/ping为容器tag</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker安装mysql</title>
      <link href="/2018/08/06/docker%E5%AE%89%E8%A3%85mysql/"/>
      <url>/2018/08/06/docker%E5%AE%89%E8%A3%85mysql/</url>
      <content type="html"><![CDATA[<h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7.22</span><br></pre></td></tr></table></figure><h2 id="创建mysql的工作目录并赋予权限"><a href="#创建mysql的工作目录并赋予权限" class="headerlink" title="创建mysql的工作目录并赋予权限"></a>创建mysql的工作目录并赋予权限</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /data/mysql</span><br><span class="line">sudo chown 1000:1000 /data/mysql</span><br></pre></td></tr></table></figure><h2 id="新建并启动mysql"><a href="#新建并启动mysql" class="headerlink" title="新建并启动mysql"></a>新建并启动mysql</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql -p 3306:3306 -v /data/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7.22  --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mysql bash <span class="comment"># 进入mysql容器</span></span><br><span class="line">docker stop mysql <span class="comment"># 停止mysql</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> centos7 </tag>
            
            <tag> mysql:5.7.22 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker安装jenkins</title>
      <link href="/2018/08/06/docker%E5%AE%89%E8%A3%85jenkins/"/>
      <url>/2018/08/06/docker%E5%AE%89%E8%A3%85jenkins/</url>
      <content type="html"><![CDATA[<h2 id="拉取长期支持版镜像"><a href="#拉取长期支持版镜像" class="headerlink" title="拉取长期支持版镜像"></a>拉取长期支持版镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull jenkins/jenkins:lts</span><br></pre></td></tr></table></figure><h2 id="创建jenkins的工作目录并赋予权限"><a href="#创建jenkins的工作目录并赋予权限" class="headerlink" title="创建jenkins的工作目录并赋予权限"></a>创建jenkins的工作目录并赋予权限</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /data/jenkins</span><br><span class="line">sudo chown 1000:1000 /data/jenkins</span><br></pre></td></tr></table></figure><h2 id="新建并启动Jenkins"><a href="#新建并启动Jenkins" class="headerlink" title="新建并启动Jenkins"></a>新建并启动Jenkins</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -p 8080:8080 -p 50000:50000 -v /data/jenkins:/var/jenkins_home --name jenkins -d jenkins/jenkins:lts</span><br></pre></td></tr></table></figure><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker jenkins start <span class="comment"># 启动jenkins</span></span><br><span class="line">docker jenkins stop <span class="comment"># 停止jenkins</span></span><br><span class="line">docker jenkins restart <span class="comment"># restart jenkins</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it jenkins /bin/bash <span class="comment"># 进入jenkins容器</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> centos7 </tag>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>centos6.x安装docker</title>
      <link href="/2018/08/06/centos6-x%E5%AE%89%E8%A3%85docker/"/>
      <url>/2018/08/06/centos6-x%E5%AE%89%E8%A3%85docker/</url>
      <content type="html"><![CDATA[<h1 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不建议在centos6系列的服务器上安装，会带来各种未知的问题</span><br></pre></td></tr></table></figure><h2 id="安装EPEL仓库"><a href="#安装EPEL仓库" class="headerlink" title="安装EPEL仓库"></a>安装EPEL仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -iUvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</span><br></pre></td></tr></table></figure><h2 id="更新yum源"><a href="#更新yum源" class="headerlink" title="更新yum源"></a>更新yum源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update -y</span><br></pre></td></tr></table></figure><h2 id="安装docker包"><a href="#安装docker包" class="headerlink" title="安装docker包"></a>安装docker包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker-io</span><br></pre></td></tr></table></figure><h2 id="启动-docker-守护进程"><a href="#启动-docker-守护进程" class="headerlink" title="启动 docker 守护进程"></a>启动 docker 守护进程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker start</span><br></pre></td></tr></table></figure><h2 id="配置让-docker-服务随系统自动启动"><a href="#配置让-docker-服务随系统自动启动" class="headerlink" title="配置让 docker 服务随系统自动启动"></a>配置让 docker 服务随系统自动启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chkconfig docker on</span><br></pre></td></tr></table></figure><h2 id="验证-docker-是否安装成功"><a href="#验证-docker-是否安装成功" class="headerlink" title="验证 docker 是否安装成功"></a>验证 docker 是否安装成功</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --version</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> centos6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>centos7安装docker</title>
      <link href="/2018/08/06/centos7%E5%AE%89%E8%A3%85docker/"/>
      <url>/2018/08/06/centos7%E5%AE%89%E8%A3%85docker/</url>
      <content type="html"><![CDATA[<h2 id="更新系统"><a href="#更新系统" class="headerlink" title="更新系统"></a>更新系统</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y update</span><br></pre></td></tr></table></figure><h2 id="添加-yum-仓库"><a href="#添加-yum-仓库" class="headerlink" title="添加 yum 仓库"></a>添加 yum 仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo tee /etc/yum.repos.d/docker.repo &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">[dockerrepo]</span><br><span class="line">name=Docker Repository</span><br><span class="line">baseurl=https://yum.dockerproject.org/repo/main/centos/<span class="variable">$releasever</span>/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://yum.dockerproject.org/gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="安装docker包"><a href="#安装docker包" class="headerlink" title="安装docker包"></a>安装docker包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install docker-engine</span><br></pre></td></tr></table></figure><h2 id="启动-docker-守护进程"><a href="#启动-docker-守护进程" class="headerlink" title="启动 docker 守护进程"></a>启动 docker 守护进程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo  systemctl start docker.service</span><br></pre></td></tr></table></figure><h2 id="配置让-docker-服务随系统自动启动"><a href="#配置让-docker-服务随系统自动启动" class="headerlink" title="配置让 docker 服务随系统自动启动"></a>配置让 docker 服务随系统自动启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chkconfig docker on</span><br></pre></td></tr></table></figure><h2 id="验证-docker-是否安装成功"><a href="#验证-docker-是否安装成功" class="headerlink" title="验证 docker 是否安装成功"></a>验证 docker 是否安装成功</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> docker.service</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> centos7 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker安装neo4j</title>
      <link href="/2018/08/06/docker%E5%AE%89%E8%A3%85neo4j/"/>
      <url>/2018/08/06/docker%E5%AE%89%E8%A3%85neo4j/</url>
      <content type="html"><![CDATA[<h1 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull neo4j:3.4</span><br></pre></td></tr></table></figure><h1 id="启动镜像"><a href="#启动镜像" class="headerlink" title="启动镜像"></a>启动镜像</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run  --publish=7474:7474 --publish=7687:7687  --volume=/data/docker/neo4j/data:/data --volume=/data/docker/neo4j/logs:/logs</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识图谱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> neo4j </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>centos安装nginx</title>
      <link href="/2018/08/05/centos%E5%AE%89%E8%A3%85nginx/"/>
      <url>/2018/08/05/centos%E5%AE%89%E8%A3%85nginx/</url>
      <content type="html"><![CDATA[<center><img src="/2018/08/05/centos安装nginx/bg2018022701.png" alt=""></center><h3 id="在-etc-yum-repos-d-目录下创建nginx-repo"><a href="#在-etc-yum-repos-d-目录下创建nginx-repo" class="headerlink" title="在/etc/yum.repos.d/目录下创建nginx.repo"></a>在/etc/yum.repos.d/目录下创建nginx.repo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d/ </span><br><span class="line">vim nginx.repo</span><br></pre></td></tr></table></figure><h3 id="填写如下内容"><a href="#填写如下内容" class="headerlink" title="填写如下内容"></a>填写如下内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[nginx]</span><br><span class="line">name=nginx repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure><p>保存，则会产生一个/etc/yum.repos.d/nginx.repo文件</p><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx -y</span><br></pre></td></tr></table></figure><h3 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx start</span><br></pre></td></tr></table></figure><h3 id="将nginx加入开机启动"><a href="#将nginx加入开机启动" class="headerlink" title="将nginx加入开机启动"></a>将nginx加入开机启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig nginx on</span><br></pre></td></tr></table></figure><h3 id="开放防火墙"><a href="#开放防火墙" class="headerlink" title="开放防火墙"></a>开放防火墙</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT 5 -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class="line"> </span><br><span class="line">service iptables save</span><br><span class="line"> </span><br><span class="line">service iptables restart</span><br></pre></td></tr></table></figure><h3 id="nginx常用命令"><a href="#nginx常用命令" class="headerlink" title="nginx常用命令"></a>nginx常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service nginx start <span class="comment"># 启动</span></span><br><span class="line">service nginx stop <span class="comment"># 停止</span></span><br><span class="line">service nginx restart <span class="comment"># 重启</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker简介</title>
      <link href="/2018/08/03/docker%E7%AE%80%E4%BB%8B/"/>
      <url>/2018/08/03/docker%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<center><img src="/2018/08/03/docker简介/whale_0.png" alt=""></center><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Docker 是世界领先的软件容器平台。开发人员利用 Docker 可以消除协作编码时“在我的机器上可正常工作”的问题。运维人员利用 Docker 可以在隔离容器中并行运行和管理应用，获得更好的计算密度。企业利用 Docker 可以构建敏捷的软件交付管道，以更快的速度、更高的安全性和可靠的信誉为 Linux 和 Windows Server 应用发布新功能。其英文官网为<a href="https://www.docker.com" target="_blank" rel="noopener">https://www.docker.com</a>  ，中文官网为<a href="https://www.docker-cn.com" target="_blank" rel="noopener">https://www.docker-cn.com</a>  </p><h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><center><img src="/2018/08/03/docker简介/Framework.jpeg" alt=""></center><h2 id="Docker-daemon（Docker守护进行）"><a href="#Docker-daemon（Docker守护进行）" class="headerlink" title="Docker daemon（Docker守护进行）"></a>Docker daemon（Docker守护进行）</h2><p>Docker daemon是一个运行在宿主机（DOCKER_HOST）的后台进程。可通过Docker客户端与之通信。</p><h2 id="client（Docker客户端）"><a href="#client（Docker客户端）" class="headerlink" title="client（Docker客户端）"></a>client（Docker客户端）</h2><p>Docker客户端是Docker的用户界面，它可以接受用户命令和配置标识，并于Docker daemon通信。</p><h2 id="Images（Docker镜像）"><a href="#Images（Docker镜像）" class="headerlink" title="Images（Docker镜像）"></a>Images（Docker镜像）</h2><p>Docker镜像是一个只读模版，其包含创建Docker容器的说明。它与系统安装光盘类似—使用安装光盘可以安装系统，同理适用Docker镜像可以运行镜像中的程序。</p><h2 id="Container（容器）"><a href="#Container（容器）" class="headerlink" title="Container（容器）"></a>Container（容器）</h2><p>容器是镜像的可运行实例。镜像和容器的关系类似于面向对象中，类和对象的关系。可通过Docker API或CLI命令来启停、移动、删除容器。</p><h2 id="Registry（仓库）"><a href="#Registry（仓库）" class="headerlink" title="Registry（仓库）"></a>Registry（仓库）</h2><p>Docker Registry是一个集中存储与分发镜像的服务。构建完Docker镜像后，即可在当前宿主机器上运行。但如果需要在其他机器上运行这个镜像，就需要手动复制。此时可借助Docker Registry来避免镜像的手动复制。<br>一个Docker Registry可包含多个Docker仓库，每个仓库可以包含多个镜像标签，每个标签对应一个Docker镜像。<br>Docker Registry可以分为共有仓库和私有仓库。最常用的Docker Registry莫过于官方的Docker Hub，其也是默认的Docker Registry。Docker Hub上存放着大量的优秀镜像，可适用Docker命令下载和使用。</p>]]></content>
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>声明</title>
      <link href="/2018/08/02/%E5%A3%B0%E6%98%8E/"/>
      <url>/2018/08/02/%E5%A3%B0%E6%98%8E/</url>
      <content type="html"><![CDATA[<p><center><img src="/2018/08/02/声明/customizable_ui@2x.png" alt=""></center><br><br></p><blockquote><p>本站内所有的演示代码或示例代码均在Centos6.x、Centos7.x、Mac os中正常运行，其他版本的操作系统暂未支持。</p></blockquote><p>本站内的相关文章内容均摘自于互联网和相关书籍，如有侵权请发邮件至<a href="mailto:junfengwang11@aliyun.com" target="_blank" rel="noopener">junfengwang11@aliyun.com</a>，将会在第一时间删除。</p>]]></content>
      
      <categories>
          
          <category> 声明 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> Mac os </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
